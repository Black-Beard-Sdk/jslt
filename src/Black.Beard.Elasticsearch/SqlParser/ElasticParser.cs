//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ElasticParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.Elastic.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class ElasticParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SCOL=1, DOT=2, OPEN_PAR=3, CLOSE_PAR=4, COMMA=5, ASSIGN=6, STAR=7, PLUS=8, 
		MINUS=9, TILDE=10, PIPE2=11, DIV=12, MOD=13, LT2=14, GT2=15, AMP=16, PIPE=17, 
		LT=18, LT_EQ=19, GT=20, GT_EQ=21, EQ=22, NOT_EQ1=23, NOT_EQ2=24, ABORT=25, 
		ACTION=26, ADD=27, AFTER=28, ALL=29, ALTER=30, ANALYZE=31, AND=32, AS=33, 
		ASC=34, ATTACH=35, AUTOINCREMENT=36, BEFORE=37, BEGIN=38, BETWEEN=39, 
		BY=40, CASCADE=41, CASE=42, CAST=43, CHECK=44, COLLATE=45, COLUMN=46, 
		COMMIT=47, CONFLICT=48, CONSTRAINT=49, CREATE=50, CROSS=51, CURRENT_DATE=52, 
		CURRENT_TIME=53, CURRENT_TIMESTAMP=54, DATABASE=55, DEFAULT=56, DEFERRABLE=57, 
		DEFERRED=58, DELETE=59, DESC=60, DETACH=61, DISTINCT=62, DROP=63, EACH=64, 
		ELSE=65, END=66, ESCAPE=67, EXCEPT=68, EXCLUSIVE=69, EXISTS=70, EXPLAIN=71, 
		FAIL=72, FOR=73, FOREIGN=74, FROM=75, FULL=76, GLOB=77, GROUP=78, HAVING=79, 
		IF=80, IGNORE=81, IMMEDIATE=82, IN=83, INDEX=84, INDEXED=85, INITIALLY=86, 
		INNER=87, INSERT=88, INSTEAD=89, INTERSECT=90, INTO=91, IS=92, ISNULL=93, 
		JOIN=94, KEY=95, LEFT=96, LIKE=97, LIMIT=98, MATCH=99, NATURAL=100, NO=101, 
		NOT=102, NOTNULL=103, NULL_=104, OF=105, OFFSET=106, ON=107, OR=108, ORDER=109, 
		OUTER=110, PLAN=111, PRAGMA=112, PRIMARY=113, QUERY=114, RAISE=115, RECURSIVE=116, 
		REFERENCES=117, REGEXP=118, REINDEX=119, RELEASE=120, RENAME=121, REPLACE=122, 
		RESTRICT=123, RIGHT=124, ROLLBACK=125, ROW=126, ROWS=127, SAVEPOINT=128, 
		SELECT=129, SET=130, TABLE=131, TEMP=132, TEMPORARY=133, THEN=134, TO=135, 
		TRANSACTION=136, TRIGGER=137, UNION=138, UNIQUE=139, UPDATE=140, USING=141, 
		VACUUM=142, VALUES=143, VIEW=144, VIRTUAL=145, WHEN=146, WHERE=147, WITH=148, 
		WITHOUT=149, FIRST_VALUE=150, OVER=151, PARTITION=152, RANGE=153, PRECEDING=154, 
		UNBOUNDED=155, CURRENT=156, FOLLOWING=157, CUME_DIST=158, DENSE_RANK=159, 
		LAG=160, LAST_VALUE=161, LEAD=162, NTH_VALUE=163, NTILE=164, PERCENT_RANK=165, 
		RANK=166, ROW_NUMBER=167, GENERATED=168, ALWAYS=169, STORED=170, TRUE_=171, 
		FALSE_=172, WINDOW=173, NULLS=174, FIRST=175, LAST=176, FILTER=177, GROUPS=178, 
		EXCLUDE=179, TIES=180, OTHERS=181, DO=182, NOTHING=183, IDENTIFIER=184, 
		NUMERIC_LITERAL=185, BIND_PARAMETER=186, STRING_LITERAL=187, BLOB_LITERAL=188, 
		SINGLE_LINE_COMMENT=189, MULTILINE_COMMENT=190, SPACES=191, UNEXPECTED_CHAR=192;
	public const int
		RULE_parse = 0, RULE_error = 1, RULE_sql_stmt_list = 2, RULE_sql_stmt = 3, 
		RULE_where_stmt = 4, RULE_indexed_column = 5, RULE_create_table_stmt = 6, 
		RULE_column_def = 7, RULE_type_name = 8, RULE_column_constraint = 9, RULE_signed_number = 10, 
		RULE_table_constraint = 11, RULE_foreign_key_clause = 12, RULE_conflict_clause = 13, 
		RULE_create_view_stmt = 14, RULE_create_virtual_table_stmt = 15, RULE_with_clause = 16, 
		RULE_cte_table_name = 17, RULE_recursive_cte = 18, RULE_common_table_expression = 19, 
		RULE_expr = 20, RULE_call_function_expr = 21, RULE_in_expr = 22, RULE_case_expression = 23, 
		RULE_case_when = 24, RULE_case_expr = 25, RULE_case_else_expr = 26, RULE_exists_expr = 27, 
		RULE_nullable_expr = 28, RULE_binary_operator = 29, RULE_like_operator = 30, 
		RULE_raise_function = 31, RULE_literal_value = 32, RULE_insert_stmt = 33, 
		RULE_upsert_clause = 34, RULE_select_stmt = 35, RULE_compound = 36, RULE_join_clauses = 37, 
		RULE_join_clause = 38, RULE_select_core = 39, RULE_value_list_stmt = 40, 
		RULE_group_by_stmt = 41, RULE_having_stmt = 42, RULE_window_stmt = 43, 
		RULE_expr_list = 44, RULE_table_or_subquery = 45, RULE_subquery_table = 46, 
		RULE_result_column = 47, RULE_join_operator = 48, RULE_join_constraint = 49, 
		RULE_compound_operator = 50, RULE_column_name_list = 51, RULE_filter_clause = 52, 
		RULE_window_defn = 53, RULE_over_clause = 54, RULE_frame_spec = 55, RULE_frame_clause = 56, 
		RULE_common_table_stmt = 57, RULE_order_by_stmt = 58, RULE_limit_stmts = 59, 
		RULE_limit_stmt = 60, RULE_ordering_term = 61, RULE_asc_desc = 62, RULE_frame_left = 63, 
		RULE_frame_right = 64, RULE_frame_single = 65, RULE_window_function = 66, 
		RULE_offset = 67, RULE_default_value = 68, RULE_partition_by = 69, RULE_order_by_expr = 70, 
		RULE_order_by_expr_asc_desc = 71, RULE_initial_select = 72, RULE_recursive_select = 73, 
		RULE_unary_operator = 74, RULE_error_message = 75, RULE_module_argument = 76, 
		RULE_column_alias = 77, RULE_keyword = 78, RULE_name = 79, RULE_full_function_name = 80, 
		RULE_function_name = 81, RULE_schema_name = 82, RULE_table_name = 83, 
		RULE_full_table_name = 84, RULE_fullname = 85, RULE_column_name = 86, 
		RULE_collation_name = 87, RULE_foreign_table = 88, RULE_index_name = 89, 
		RULE_view_name = 90, RULE_module_name = 91, RULE_table_alias = 92, RULE_window_name = 93, 
		RULE_alias = 94, RULE_base_window_name = 95, RULE_simple_func = 96, RULE_aggregate_func = 97, 
		RULE_table_function_name = 98, RULE_any_name = 99;
	public static readonly string[] ruleNames = {
		"parse", "error", "sql_stmt_list", "sql_stmt", "where_stmt", "indexed_column", 
		"create_table_stmt", "column_def", "type_name", "column_constraint", "signed_number", 
		"table_constraint", "foreign_key_clause", "conflict_clause", "create_view_stmt", 
		"create_virtual_table_stmt", "with_clause", "cte_table_name", "recursive_cte", 
		"common_table_expression", "expr", "call_function_expr", "in_expr", "case_expression", 
		"case_when", "case_expr", "case_else_expr", "exists_expr", "nullable_expr", 
		"binary_operator", "like_operator", "raise_function", "literal_value", 
		"insert_stmt", "upsert_clause", "select_stmt", "compound", "join_clauses", 
		"join_clause", "select_core", "value_list_stmt", "group_by_stmt", "having_stmt", 
		"window_stmt", "expr_list", "table_or_subquery", "subquery_table", "result_column", 
		"join_operator", "join_constraint", "compound_operator", "column_name_list", 
		"filter_clause", "window_defn", "over_clause", "frame_spec", "frame_clause", 
		"common_table_stmt", "order_by_stmt", "limit_stmts", "limit_stmt", "ordering_term", 
		"asc_desc", "frame_left", "frame_right", "frame_single", "window_function", 
		"offset", "default_value", "partition_by", "order_by_expr", "order_by_expr_asc_desc", 
		"initial_select", "recursive_select", "unary_operator", "error_message", 
		"module_argument", "column_alias", "keyword", "name", "full_function_name", 
		"function_name", "schema_name", "table_name", "full_table_name", "fullname", 
		"column_name", "collation_name", "foreign_table", "index_name", "view_name", 
		"module_name", "table_alias", "window_name", "alias", "base_window_name", 
		"simple_func", "aggregate_func", "table_function_name", "any_name"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", "'-'", "'~'", 
		"'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", 
		"'>='", "'=='", "'!='", "'<>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", "ASSIGN", "STAR", 
		"PLUS", "MINUS", "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", 
		"PIPE", "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", "ABORT", 
		"ACTION", "ADD", "AFTER", "ALL", "ALTER", "ANALYZE", "AND", "AS", "ASC", 
		"ATTACH", "AUTOINCREMENT", "BEFORE", "BEGIN", "BETWEEN", "BY", "CASCADE", 
		"CASE", "CAST", "CHECK", "COLLATE", "COLUMN", "COMMIT", "CONFLICT", "CONSTRAINT", 
		"CREATE", "CROSS", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
		"DATABASE", "DEFAULT", "DEFERRABLE", "DEFERRED", "DELETE", "DESC", "DETACH", 
		"DISTINCT", "DROP", "EACH", "ELSE", "END", "ESCAPE", "EXCEPT", "EXCLUSIVE", 
		"EXISTS", "EXPLAIN", "FAIL", "FOR", "FOREIGN", "FROM", "FULL", "GLOB", 
		"GROUP", "HAVING", "IF", "IGNORE", "IMMEDIATE", "IN", "INDEX", "INDEXED", 
		"INITIALLY", "INNER", "INSERT", "INSTEAD", "INTERSECT", "INTO", "IS", 
		"ISNULL", "JOIN", "KEY", "LEFT", "LIKE", "LIMIT", "MATCH", "NATURAL", 
		"NO", "NOT", "NOTNULL", "NULL_", "OF", "OFFSET", "ON", "OR", "ORDER", 
		"OUTER", "PLAN", "PRAGMA", "PRIMARY", "QUERY", "RAISE", "RECURSIVE", "REFERENCES", 
		"REGEXP", "REINDEX", "RELEASE", "RENAME", "REPLACE", "RESTRICT", "RIGHT", 
		"ROLLBACK", "ROW", "ROWS", "SAVEPOINT", "SELECT", "SET", "TABLE", "TEMP", 
		"TEMPORARY", "THEN", "TO", "TRANSACTION", "TRIGGER", "UNION", "UNIQUE", 
		"UPDATE", "USING", "VACUUM", "VALUES", "VIEW", "VIRTUAL", "WHEN", "WHERE", 
		"WITH", "WITHOUT", "FIRST_VALUE", "OVER", "PARTITION", "RANGE", "PRECEDING", 
		"UNBOUNDED", "CURRENT", "FOLLOWING", "CUME_DIST", "DENSE_RANK", "LAG", 
		"LAST_VALUE", "LEAD", "NTH_VALUE", "NTILE", "PERCENT_RANK", "RANK", "ROW_NUMBER", 
		"GENERATED", "ALWAYS", "STORED", "TRUE_", "FALSE_", "WINDOW", "NULLS", 
		"FIRST", "LAST", "FILTER", "GROUPS", "EXCLUDE", "TIES", "OTHERS", "DO", 
		"NOTHING", "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", "STRING_LITERAL", 
		"BLOB_LITERAL", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", "SPACES", 
		"UNEXPECTED_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ElasticParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ElasticParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ElasticParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ElasticParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ParseContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(ElasticParser.Eof, 0); }
		public Sql_stmt_listContext[] sql_stmt_list() {
			return GetRuleContexts<Sql_stmt_listContext>();
		}
		public Sql_stmt_listContext sql_stmt_list(int i) {
			return GetRuleContext<Sql_stmt_listContext>(i);
		}
		public ErrorContext[] error() {
			return GetRuleContexts<ErrorContext>();
		}
		public ErrorContext error(int i) {
			return GetRuleContext<ErrorContext>(i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SCOL) | (1L << CREATE) | (1L << DEFAULT))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (EXPLAIN - 71)) | (1L << (INSERT - 71)) | (1L << (REPLACE - 71)) | (1L << (SELECT - 71)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (VALUES - 143)) | (1L << (WITH - 143)) | (1L << (UNEXPECTED_CHAR - 143)))) != 0)) {
				{
				State = 202;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SCOL:
				case CREATE:
				case DEFAULT:
				case EXPLAIN:
				case INSERT:
				case REPLACE:
				case SELECT:
				case VALUES:
				case WITH:
					{
					State = 200; sql_stmt_list();
					}
					break;
				case UNEXPECTED_CHAR:
					{
					State = 201; error();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 207; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorContext : ParserRuleContext {
		public IToken _UNEXPECTED_CHAR;
		public ITerminalNode UNEXPECTED_CHAR() { return GetToken(ElasticParser.UNEXPECTED_CHAR, 0); }
		public ErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorContext error() {
		ErrorContext _localctx = new ErrorContext(Context, State);
		EnterRule(_localctx, 2, RULE_error);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; _localctx._UNEXPECTED_CHAR = Match(UNEXPECTED_CHAR);
			 
			     throw new RuntimeException("UNEXPECTED_CHAR=" + (_localctx._UNEXPECTED_CHAR!=null?_localctx._UNEXPECTED_CHAR.Text:null)); 
			   
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmt_listContext : ParserRuleContext {
		public Sql_stmtContext[] sql_stmt() {
			return GetRuleContexts<Sql_stmtContext>();
		}
		public Sql_stmtContext sql_stmt(int i) {
			return GetRuleContext<Sql_stmtContext>(i);
		}
		public Sql_stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_stmt_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmt_listContext sql_stmt_list() {
		Sql_stmt_listContext _localctx = new Sql_stmt_listContext(Context, State);
		EnterRule(_localctx, 4, RULE_sql_stmt_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 212; Match(SCOL);
				}
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 218; sql_stmt();
			State = 227;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 220;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 219; Match(SCOL);
						}
						}
						State = 222;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==SCOL );
					State = 224; sql_stmt();
					}
					} 
				}
				State = 229;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			State = 233;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 230; Match(SCOL);
					}
					} 
				}
				State = 235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmtContext : ParserRuleContext {
		public Create_table_stmtContext create_table_stmt() {
			return GetRuleContext<Create_table_stmtContext>(0);
		}
		public Create_view_stmtContext create_view_stmt() {
			return GetRuleContext<Create_view_stmtContext>(0);
		}
		public Create_virtual_table_stmtContext create_virtual_table_stmt() {
			return GetRuleContext<Create_virtual_table_stmtContext>(0);
		}
		public Insert_stmtContext insert_stmt() {
			return GetRuleContext<Insert_stmtContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode EXPLAIN() { return GetToken(ElasticParser.EXPLAIN, 0); }
		public ITerminalNode QUERY() { return GetToken(ElasticParser.QUERY, 0); }
		public ITerminalNode PLAN() { return GetToken(ElasticParser.PLAN, 0); }
		public Sql_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmtContext sql_stmt() {
		Sql_stmtContext _localctx = new Sql_stmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_sql_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXPLAIN) {
				{
				State = 236; Match(EXPLAIN);
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUERY) {
					{
					State = 237; Match(QUERY);
					State = 238; Match(PLAN);
					}
				}

				}
			}

			State = 248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 243; create_table_stmt();
				}
				break;
			case 2:
				{
				State = 244; create_view_stmt();
				}
				break;
			case 3:
				{
				State = 245; create_virtual_table_stmt();
				}
				break;
			case 4:
				{
				State = 246; insert_stmt();
				}
				break;
			case 5:
				{
				State = 247; select_stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_stmtContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(ElasticParser.WHERE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Where_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_stmtContext where_stmt() {
		Where_stmtContext _localctx = new Where_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_where_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; Match(WHERE);
			State = 251; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexed_columnContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(ElasticParser.COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public Asc_descContext asc_desc() {
			return GetRuleContext<Asc_descContext>(0);
		}
		public Indexed_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexed_column; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexed_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexed_columnContext indexed_column() {
		Indexed_columnContext _localctx = new Indexed_columnContext(Context, State);
		EnterRule(_localctx, 10, RULE_indexed_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 253; column_name();
				}
				break;
			case 2:
				{
				State = 254; expr(0);
				}
				break;
			}
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE) {
				{
				State = 257; Match(COLLATE);
				State = 258; collation_name();
				}
			}

			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 261; asc_desc();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_stmtContext : ParserRuleContext {
		public IToken rowID;
		public ITerminalNode CREATE() { return GetToken(ElasticParser.CREATE, 0); }
		public ITerminalNode TABLE() { return GetToken(ElasticParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode IF() { return GetToken(ElasticParser.IF, 0); }
		public ITerminalNode NOT() { return GetToken(ElasticParser.NOT, 0); }
		public ITerminalNode EXISTS() { return GetToken(ElasticParser.EXISTS, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode TEMP() { return GetToken(ElasticParser.TEMP, 0); }
		public ITerminalNode TEMPORARY() { return GetToken(ElasticParser.TEMPORARY, 0); }
		public Column_defContext[] column_def() {
			return GetRuleContexts<Column_defContext>();
		}
		public Column_defContext column_def(int i) {
			return GetRuleContext<Column_defContext>(i);
		}
		public ITerminalNode AS() { return GetToken(ElasticParser.AS, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Table_constraintContext[] table_constraint() {
			return GetRuleContexts<Table_constraintContext>();
		}
		public Table_constraintContext table_constraint(int i) {
			return GetRuleContext<Table_constraintContext>(i);
		}
		public ITerminalNode WITHOUT() { return GetToken(ElasticParser.WITHOUT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(ElasticParser.IDENTIFIER, 0); }
		public Create_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_stmtContext create_table_stmt() {
		Create_table_stmtContext _localctx = new Create_table_stmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_create_table_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; Match(CREATE);
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 265;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 268; Match(TABLE);
			State = 272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 269; Match(IF);
				State = 270; Match(NOT);
				State = 271; Match(EXISTS);
				}
				break;
			}
			State = 277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 274; schema_name();
				State = 275; Match(DOT);
				}
				break;
			}
			State = 279; table_name();
			State = 303;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAR:
				{
				{
				State = 280; Match(OPEN_PAR);
				State = 281; column_def();
				State = 286;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 282; Match(COMMA);
						State = 283; column_def();
						}
						} 
					}
					State = 288;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				}
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 289; Match(COMMA);
					State = 290; table_constraint();
					}
					}
					State = 295;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 296; Match(CLOSE_PAR);
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITHOUT) {
					{
					State = 297; Match(WITHOUT);
					State = 298; _localctx.rowID = Match(IDENTIFIER);
					}
				}

				}
				}
				break;
			case AS:
				{
				{
				State = 301; Match(AS);
				State = 302; select_stmt();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_defContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Column_constraintContext[] column_constraint() {
			return GetRuleContexts<Column_constraintContext>();
		}
		public Column_constraintContext column_constraint(int i) {
			return GetRuleContext<Column_constraintContext>(i);
		}
		public Column_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_defContext column_def() {
		Column_defContext _localctx = new Column_defContext(Context, State);
		EnterRule(_localctx, 14, RULE_column_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305; column_name();
			State = 307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 306; type_name();
				}
				break;
			}
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << CHECK) | (1L << COLLATE) | (1L << CONSTRAINT) | (1L << DEFAULT))) != 0) || ((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & ((1L << (NOT - 102)) | (1L << (PRIMARY - 102)) | (1L << (REFERENCES - 102)) | (1L << (UNIQUE - 102)))) != 0) || _la==GENERATED) {
				{
				{
				State = 309; column_constraint();
				}
				}
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public Signed_numberContext[] signed_number() {
			return GetRuleContexts<Signed_numberContext>();
		}
		public Signed_numberContext signed_number(int i) {
			return GetRuleContext<Signed_numberContext>(i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 16, RULE_type_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 315; name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 318;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 330;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 320; Match(OPEN_PAR);
				State = 321; signed_number();
				State = 322; Match(CLOSE_PAR);
				}
				break;
			case 2:
				{
				State = 324; Match(OPEN_PAR);
				State = 325; signed_number();
				State = 326; Match(COMMA);
				State = 327; signed_number();
				State = 328; Match(CLOSE_PAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		public ITerminalNode CHECK() { return GetToken(ElasticParser.CHECK, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(ElasticParser.DEFAULT, 0); }
		public ITerminalNode COLLATE() { return GetToken(ElasticParser.COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		public ITerminalNode AS() { return GetToken(ElasticParser.AS, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(ElasticParser.CONSTRAINT, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode PRIMARY() { return GetToken(ElasticParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(ElasticParser.KEY, 0); }
		public ITerminalNode UNIQUE() { return GetToken(ElasticParser.UNIQUE, 0); }
		public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public Conflict_clauseContext conflict_clause() {
			return GetRuleContext<Conflict_clauseContext>(0);
		}
		public ITerminalNode GENERATED() { return GetToken(ElasticParser.GENERATED, 0); }
		public ITerminalNode ALWAYS() { return GetToken(ElasticParser.ALWAYS, 0); }
		public ITerminalNode NOT() { return GetToken(ElasticParser.NOT, 0); }
		public ITerminalNode NULL_() { return GetToken(ElasticParser.NULL_, 0); }
		public ITerminalNode STORED() { return GetToken(ElasticParser.STORED, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(ElasticParser.VIRTUAL, 0); }
		public Asc_descContext asc_desc() {
			return GetRuleContext<Asc_descContext>(0);
		}
		public ITerminalNode AUTOINCREMENT() { return GetToken(ElasticParser.AUTOINCREMENT, 0); }
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(Context, State);
		EnterRule(_localctx, 18, RULE_column_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT) {
				{
				State = 332; Match(CONSTRAINT);
				State = 333; name();
				}
			}

			State = 383;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY:
				{
				{
				State = 336; Match(PRIMARY);
				State = 337; Match(KEY);
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					State = 338; asc_desc();
					}
				}

				State = 342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 341; conflict_clause();
					}
				}

				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AUTOINCREMENT) {
					{
					State = 344; Match(AUTOINCREMENT);
					}
				}

				}
				}
				break;
			case NOT:
			case UNIQUE:
				{
				State = 350;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NOT:
					{
					{
					State = 347; Match(NOT);
					State = 348; Match(NULL_);
					}
					}
					break;
				case UNIQUE:
					{
					State = 349; Match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 352; conflict_clause();
					}
				}

				}
				break;
			case CHECK:
				{
				State = 355; Match(CHECK);
				State = 356; Match(OPEN_PAR);
				State = 357; expr(0);
				State = 358; Match(CLOSE_PAR);
				}
				break;
			case DEFAULT:
				{
				State = 360; Match(DEFAULT);
				State = 367;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 361; signed_number();
					}
					break;
				case 2:
					{
					State = 362; literal_value();
					}
					break;
				case 3:
					{
					{
					State = 363; Match(OPEN_PAR);
					State = 364; expr(0);
					State = 365; Match(CLOSE_PAR);
					}
					}
					break;
				}
				}
				break;
			case COLLATE:
				{
				State = 369; Match(COLLATE);
				State = 370; collation_name();
				}
				break;
			case REFERENCES:
				{
				State = 371; foreign_key_clause();
				}
				break;
			case AS:
			case GENERATED:
				{
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GENERATED) {
					{
					State = 372; Match(GENERATED);
					State = 373; Match(ALWAYS);
					}
				}

				State = 376; Match(AS);
				State = 377; Match(OPEN_PAR);
				State = 378; expr(0);
				State = 379; Match(CLOSE_PAR);
				State = 381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VIRTUAL || _la==STORED) {
					{
					State = 380;
					_la = TokenStream.LA(1);
					if ( !(_la==VIRTUAL || _la==STORED) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_numberContext : ParserRuleContext {
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(ElasticParser.NUMERIC_LITERAL, 0); }
		public Signed_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_numberContext signed_number() {
		Signed_numberContext _localctx = new Signed_numberContext(Context, State);
		EnterRule(_localctx, 20, RULE_signed_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 385;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 388; Match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		public ITerminalNode CONSTRAINT() { return GetToken(ElasticParser.CONSTRAINT, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Indexed_columnContext[] indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		public ITerminalNode CHECK() { return GetToken(ElasticParser.CHECK, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode FOREIGN() { return GetToken(ElasticParser.FOREIGN, 0); }
		public ITerminalNode KEY() { return GetToken(ElasticParser.KEY, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		public ITerminalNode PRIMARY() { return GetToken(ElasticParser.PRIMARY, 0); }
		public ITerminalNode UNIQUE() { return GetToken(ElasticParser.UNIQUE, 0); }
		public Conflict_clauseContext conflict_clause() {
			return GetRuleContext<Conflict_clauseContext>(0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(Context, State);
		EnterRule(_localctx, 22, RULE_table_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT) {
				{
				State = 390; Match(CONSTRAINT);
				State = 391; name();
				}
			}

			State = 422;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				{
				State = 397;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PRIMARY:
					{
					State = 394; Match(PRIMARY);
					State = 395; Match(KEY);
					}
					break;
				case UNIQUE:
					{
					State = 396; Match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 399; Match(OPEN_PAR);
				State = 400; indexed_column();
				State = 405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 401; Match(COMMA);
					State = 402; indexed_column();
					}
					}
					State = 407;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 408; Match(CLOSE_PAR);
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 409; conflict_clause();
					}
				}

				}
				}
				break;
			case CHECK:
				{
				{
				State = 412; Match(CHECK);
				State = 413; Match(OPEN_PAR);
				State = 414; expr(0);
				State = 415; Match(CLOSE_PAR);
				}
				}
				break;
			case FOREIGN:
				{
				{
				State = 417; Match(FOREIGN);
				State = 418; Match(KEY);
				State = 419; column_name_list();
				State = 420; foreign_key_clause();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_key_clauseContext : ParserRuleContext {
		public ITerminalNode REFERENCES() { return GetToken(ElasticParser.REFERENCES, 0); }
		public Foreign_tableContext foreign_table() {
			return GetRuleContext<Foreign_tableContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode DEFERRABLE() { return GetToken(ElasticParser.DEFERRABLE, 0); }
		public ITerminalNode[] ON() { return GetTokens(ElasticParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(ElasticParser.ON, i);
		}
		public ITerminalNode[] MATCH() { return GetTokens(ElasticParser.MATCH); }
		public ITerminalNode MATCH(int i) {
			return GetToken(ElasticParser.MATCH, i);
		}
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public ITerminalNode[] DELETE() { return GetTokens(ElasticParser.DELETE); }
		public ITerminalNode DELETE(int i) {
			return GetToken(ElasticParser.DELETE, i);
		}
		public ITerminalNode[] UPDATE() { return GetTokens(ElasticParser.UPDATE); }
		public ITerminalNode UPDATE(int i) {
			return GetToken(ElasticParser.UPDATE, i);
		}
		public ITerminalNode NOT() { return GetToken(ElasticParser.NOT, 0); }
		public ITerminalNode INITIALLY() { return GetToken(ElasticParser.INITIALLY, 0); }
		public ITerminalNode[] CASCADE() { return GetTokens(ElasticParser.CASCADE); }
		public ITerminalNode CASCADE(int i) {
			return GetToken(ElasticParser.CASCADE, i);
		}
		public ITerminalNode[] RESTRICT() { return GetTokens(ElasticParser.RESTRICT); }
		public ITerminalNode RESTRICT(int i) {
			return GetToken(ElasticParser.RESTRICT, i);
		}
		public ITerminalNode DEFERRED() { return GetToken(ElasticParser.DEFERRED, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(ElasticParser.IMMEDIATE, 0); }
		public ITerminalNode[] SET() { return GetTokens(ElasticParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(ElasticParser.SET, i);
		}
		public ITerminalNode[] NO() { return GetTokens(ElasticParser.NO); }
		public ITerminalNode NO(int i) {
			return GetToken(ElasticParser.NO, i);
		}
		public ITerminalNode[] ACTION() { return GetTokens(ElasticParser.ACTION); }
		public ITerminalNode ACTION(int i) {
			return GetToken(ElasticParser.ACTION, i);
		}
		public ITerminalNode[] NULL_() { return GetTokens(ElasticParser.NULL_); }
		public ITerminalNode NULL_(int i) {
			return GetToken(ElasticParser.NULL_, i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(ElasticParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(ElasticParser.DEFAULT, i);
		}
		public Foreign_key_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_key_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_key_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_key_clauseContext foreign_key_clause() {
		Foreign_key_clauseContext _localctx = new Foreign_key_clauseContext(Context, State);
		EnterRule(_localctx, 24, RULE_foreign_key_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; Match(REFERENCES);
			State = 425; foreign_table();
			State = 427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 426; column_name_list();
				}
			}

			State = 443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MATCH || _la==ON) {
				{
				State = 441;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON:
					{
					{
					State = 429; Match(ON);
					State = 430;
					_la = TokenStream.LA(1);
					if ( !(_la==DELETE || _la==UPDATE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 437;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SET:
						{
						{
						State = 431; Match(SET);
						State = 432;
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==NULL_) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						break;
					case CASCADE:
						{
						State = 433; Match(CASCADE);
						}
						break;
					case RESTRICT:
						{
						State = 434; Match(RESTRICT);
						}
						break;
					case NO:
						{
						{
						State = 435; Match(NO);
						State = 436; Match(ACTION);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				case MATCH:
					{
					{
					State = 439; Match(MATCH);
					State = 440; name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 454;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 446; Match(NOT);
					}
				}

				State = 449; Match(DEFERRABLE);
				State = 452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INITIALLY) {
					{
					State = 450; Match(INITIALLY);
					State = 451;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conflict_clauseContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(ElasticParser.ON, 0); }
		public ITerminalNode CONFLICT() { return GetToken(ElasticParser.CONFLICT, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(ElasticParser.ROLLBACK, 0); }
		public ITerminalNode ABORT() { return GetToken(ElasticParser.ABORT, 0); }
		public ITerminalNode FAIL() { return GetToken(ElasticParser.FAIL, 0); }
		public ITerminalNode IGNORE() { return GetToken(ElasticParser.IGNORE, 0); }
		public ITerminalNode REPLACE() { return GetToken(ElasticParser.REPLACE, 0); }
		public Conflict_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conflict_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConflict_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conflict_clauseContext conflict_clause() {
		Conflict_clauseContext _localctx = new Conflict_clauseContext(Context, State);
		EnterRule(_localctx, 26, RULE_conflict_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456; Match(ON);
			State = 457; Match(CONFLICT);
			State = 458;
			_la = TokenStream.LA(1);
			if ( !(_la==ABORT || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (FAIL - 72)) | (1L << (IGNORE - 72)) | (1L << (REPLACE - 72)) | (1L << (ROLLBACK - 72)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_view_stmtContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(ElasticParser.CREATE, 0); }
		public ITerminalNode VIEW() { return GetToken(ElasticParser.VIEW, 0); }
		public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(ElasticParser.AS, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode IF() { return GetToken(ElasticParser.IF, 0); }
		public ITerminalNode NOT() { return GetToken(ElasticParser.NOT, 0); }
		public ITerminalNode EXISTS() { return GetToken(ElasticParser.EXISTS, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode TEMP() { return GetToken(ElasticParser.TEMP, 0); }
		public ITerminalNode TEMPORARY() { return GetToken(ElasticParser.TEMPORARY, 0); }
		public Create_view_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_view_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_view_stmtContext create_view_stmt() {
		Create_view_stmtContext _localctx = new Create_view_stmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_create_view_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460; Match(CREATE);
			State = 462;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 461;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 464; Match(VIEW);
			State = 468;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 465; Match(IF);
				State = 466; Match(NOT);
				State = 467; Match(EXISTS);
				}
				break;
			}
			State = 473;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 470; schema_name();
				State = 471; Match(DOT);
				}
				break;
			}
			State = 475; view_name();
			State = 477;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 476; column_name_list();
				}
			}

			State = 479; Match(AS);
			State = 480; select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_virtual_table_stmtContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(ElasticParser.CREATE, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(ElasticParser.VIRTUAL, 0); }
		public ITerminalNode TABLE() { return GetToken(ElasticParser.TABLE, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public ITerminalNode USING() { return GetToken(ElasticParser.USING, 0); }
		public Module_nameContext module_name() {
			return GetRuleContext<Module_nameContext>(0);
		}
		public ITerminalNode IF() { return GetToken(ElasticParser.IF, 0); }
		public ITerminalNode NOT() { return GetToken(ElasticParser.NOT, 0); }
		public ITerminalNode EXISTS() { return GetToken(ElasticParser.EXISTS, 0); }
		public Module_argumentContext[] module_argument() {
			return GetRuleContexts<Module_argumentContext>();
		}
		public Module_argumentContext module_argument(int i) {
			return GetRuleContext<Module_argumentContext>(i);
		}
		public Create_virtual_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_virtual_table_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_virtual_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_virtual_table_stmtContext create_virtual_table_stmt() {
		Create_virtual_table_stmtContext _localctx = new Create_virtual_table_stmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_create_virtual_table_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482; Match(CREATE);
			State = 483; Match(VIRTUAL);
			State = 484; Match(TABLE);
			State = 488;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 485; Match(IF);
				State = 486; Match(NOT);
				State = 487; Match(EXISTS);
				}
				break;
			}
			State = 490; full_table_name();
			State = 491; Match(USING);
			State = 492; module_name();
			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 493; Match(OPEN_PAR);
				State = 494; module_argument();
				State = 499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 495; Match(COMMA);
					State = 496; module_argument();
					}
					}
					State = 501;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 502; Match(CLOSE_PAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_clauseContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(ElasticParser.WITH, 0); }
		public Cte_table_nameContext[] cte_table_name() {
			return GetRuleContexts<Cte_table_nameContext>();
		}
		public Cte_table_nameContext cte_table_name(int i) {
			return GetRuleContext<Cte_table_nameContext>(i);
		}
		public ITerminalNode[] AS() { return GetTokens(ElasticParser.AS); }
		public ITerminalNode AS(int i) {
			return GetToken(ElasticParser.AS, i);
		}
		public Select_stmtContext[] select_stmt() {
			return GetRuleContexts<Select_stmtContext>();
		}
		public Select_stmtContext select_stmt(int i) {
			return GetRuleContext<Select_stmtContext>(i);
		}
		public ITerminalNode RECURSIVE() { return GetToken(ElasticParser.RECURSIVE, 0); }
		public With_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_clauseContext with_clause() {
		With_clauseContext _localctx = new With_clauseContext(Context, State);
		EnterRule(_localctx, 32, RULE_with_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506; Match(WITH);
			State = 508;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 507; Match(RECURSIVE);
				}
				break;
			}
			State = 510; cte_table_name();
			State = 511; Match(AS);
			State = 512; Match(OPEN_PAR);
			State = 513; select_stmt();
			State = 514; Match(CLOSE_PAR);
			State = 524;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 515; Match(COMMA);
				State = 516; cte_table_name();
				State = 517; Match(AS);
				State = 518; Match(OPEN_PAR);
				State = 519; select_stmt();
				State = 520; Match(CLOSE_PAR);
				}
				}
				State = 526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cte_table_nameContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Cte_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cte_table_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCte_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cte_table_nameContext cte_table_name() {
		Cte_table_nameContext _localctx = new Cte_table_nameContext(Context, State);
		EnterRule(_localctx, 34, RULE_cte_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527; table_name();
			State = 529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 528; column_name_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recursive_cteContext : ParserRuleContext {
		public Cte_table_nameContext cte_table_name() {
			return GetRuleContext<Cte_table_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(ElasticParser.AS, 0); }
		public Initial_selectContext initial_select() {
			return GetRuleContext<Initial_selectContext>(0);
		}
		public ITerminalNode UNION() { return GetToken(ElasticParser.UNION, 0); }
		public Recursive_selectContext recursive_select() {
			return GetRuleContext<Recursive_selectContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(ElasticParser.ALL, 0); }
		public Recursive_cteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recursive_cte; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecursive_cte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Recursive_cteContext recursive_cte() {
		Recursive_cteContext _localctx = new Recursive_cteContext(Context, State);
		EnterRule(_localctx, 36, RULE_recursive_cte);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531; cte_table_name();
			State = 532; Match(AS);
			State = 533; Match(OPEN_PAR);
			State = 534; initial_select();
			State = 535; Match(UNION);
			State = 537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL) {
				{
				State = 536; Match(ALL);
				}
			}

			State = 539; recursive_select();
			State = 540; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_expressionContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(ElasticParser.AS, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_table_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_expressionContext common_table_expression() {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_common_table_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542; table_name();
			State = 544;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 543; column_name_list();
				}
			}

			State = 546; Match(AS);
			State = 547; Match(OPEN_PAR);
			State = 548; select_stmt();
			State = 549; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public ITerminalNode BIND_PARAMETER() { return GetToken(ElasticParser.BIND_PARAMETER, 0); }
		public FullnameContext fullname() {
			return GetRuleContext<FullnameContext>(0);
		}
		public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Call_function_exprContext call_function_expr() {
			return GetRuleContext<Call_function_exprContext>(0);
		}
		public ITerminalNode CAST() { return GetToken(ElasticParser.CAST, 0); }
		public ITerminalNode AS() { return GetToken(ElasticParser.AS, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Exists_exprContext exists_expr() {
			return GetRuleContext<Exists_exprContext>(0);
		}
		public Case_expressionContext case_expression() {
			return GetRuleContext<Case_expressionContext>(0);
		}
		public Raise_functionContext raise_function() {
			return GetRuleContext<Raise_functionContext>(0);
		}
		public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Binary_operatorContext binary_operator() {
			return GetRuleContext<Binary_operatorContext>(0);
		}
		public ITerminalNode BETWEEN() { return GetToken(ElasticParser.BETWEEN, 0); }
		public ITerminalNode AND() { return GetToken(ElasticParser.AND, 0); }
		public ITerminalNode NOT() { return GetToken(ElasticParser.NOT, 0); }
		public ITerminalNode COLLATE() { return GetToken(ElasticParser.COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public Nullable_exprContext nullable_expr() {
			return GetRuleContext<Nullable_exprContext>(0);
		}
		public In_exprContext in_expr() {
			return GetRuleContext<In_exprContext>(0);
		}
		public Like_operatorContext like_operator() {
			return GetRuleContext<Like_operatorContext>(0);
		}
		public ITerminalNode ESCAPE() { return GetToken(ElasticParser.ESCAPE, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 552; literal_value();
				}
				break;
			case 2:
				{
				State = 553; Match(BIND_PARAMETER);
				}
				break;
			case 3:
				{
				State = 554; fullname();
				}
				break;
			case 4:
				{
				State = 555; unary_operator();
				State = 556; expr(13);
				}
				break;
			case 5:
				{
				State = 558; call_function_expr();
				}
				break;
			case 6:
				{
				State = 559; Match(CAST);
				State = 560; Match(OPEN_PAR);
				State = 561; expr(0);
				State = 562; Match(AS);
				State = 563; type_name();
				State = 564; Match(CLOSE_PAR);
				}
				break;
			case 7:
				{
				State = 566; exists_expr();
				}
				break;
			case 8:
				{
				State = 567; case_expression();
				}
				break;
			case 9:
				{
				State = 568; raise_function();
				}
				break;
			case 10:
				{
				State = 569; Match(OPEN_PAR);
				State = 572;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 570; expr(0);
					}
					break;
				case 2:
					{
					State = 571; expr_list();
					}
					break;
				}
				State = 574; Match(CLOSE_PAR);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 610;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 608;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 578;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 579; binary_operator();
						State = 580; expr(13);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 582;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 584;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 583; Match(NOT);
							}
						}

						State = 586; Match(BETWEEN);
						State = 587; expr(0);
						State = 588; Match(AND);
						State = 589; expr(4);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 591;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 592; Match(COLLATE);
						State = 593; collation_name();
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 594;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 595; nullable_expr();
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 596;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 597; in_expr();
						}
						break;
					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 598;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 600;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 599; Match(NOT);
							}
						}

						State = 602; like_operator();
						State = 603; expr(0);
						State = 606;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
						case 1:
							{
							State = 604; Match(ESCAPE);
							State = 605; expr(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 612;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Call_function_exprContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(ElasticParser.STAR, 0); }
		public Filter_clauseContext filter_clause() {
			return GetRuleContext<Filter_clauseContext>(0);
		}
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public ITerminalNode DISTINCT() { return GetToken(ElasticParser.DISTINCT, 0); }
		public Call_function_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_function_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_function_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_function_exprContext call_function_expr() {
		Call_function_exprContext _localctx = new Call_function_exprContext(Context, State);
		EnterRule(_localctx, 42, RULE_call_function_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613; function_name();
			State = 614; Match(OPEN_PAR);
			State = 620;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAR:
			case PLUS:
			case MINUS:
			case TILDE:
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case AS:
			case ASC:
			case ATTACH:
			case AUTOINCREMENT:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case COMMIT:
			case CONFLICT:
			case CONSTRAINT:
			case CREATE:
			case CROSS:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATABASE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DELETE:
			case DESC:
			case DETACH:
			case DISTINCT:
			case DROP:
			case EACH:
			case ELSE:
			case END:
			case ESCAPE:
			case EXCEPT:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case FAIL:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case GLOB:
			case GROUP:
			case HAVING:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INDEX:
			case INDEXED:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LEFT:
			case LIKE:
			case LIMIT:
			case MATCH:
			case NATURAL:
			case NO:
			case NOT:
			case NOTNULL:
			case NULL_:
			case OF:
			case OFFSET:
			case ON:
			case OR:
			case ORDER:
			case OUTER:
			case PLAN:
			case PRAGMA:
			case PRIMARY:
			case QUERY:
			case RAISE:
			case RECURSIVE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESTRICT:
			case RIGHT:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case SAVEPOINT:
			case SELECT:
			case SET:
			case TABLE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TO:
			case TRANSACTION:
			case TRIGGER:
			case UNION:
			case UNIQUE:
			case UPDATE:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WITH:
			case WITHOUT:
			case FIRST_VALUE:
			case OVER:
			case PARTITION:
			case RANGE:
			case PRECEDING:
			case UNBOUNDED:
			case CURRENT:
			case FOLLOWING:
			case CUME_DIST:
			case DENSE_RANK:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case NTH_VALUE:
			case NTILE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case GENERATED:
			case ALWAYS:
			case STORED:
			case TRUE_:
			case FALSE_:
			case WINDOW:
			case NULLS:
			case FIRST:
			case LAST:
			case FILTER:
			case GROUPS:
			case EXCLUDE:
			case IDENTIFIER:
			case NUMERIC_LITERAL:
			case BIND_PARAMETER:
			case STRING_LITERAL:
			case BLOB_LITERAL:
				{
				{
				State = 616;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
				case 1:
					{
					State = 615; Match(DISTINCT);
					}
					break;
				}
				State = 618; expr_list();
				}
				}
				break;
			case STAR:
				{
				State = 619; Match(STAR);
				}
				break;
			case CLOSE_PAR:
				break;
			default:
				break;
			}
			State = 622; Match(CLOSE_PAR);
			State = 624;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 623; filter_clause();
				}
				break;
			}
			State = 627;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 626; over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_exprContext : ParserRuleContext {
		public ITerminalNode IN() { return GetToken(ElasticParser.IN, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(ElasticParser.NOT, 0); }
		public Full_function_nameContext full_function_name() {
			return GetRuleContext<Full_function_nameContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public In_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIn_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public In_exprContext in_expr() {
		In_exprContext _localctx = new In_exprContext(Context, State);
		EnterRule(_localctx, 44, RULE_in_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 629; Match(NOT);
				}
			}

			State = 632; Match(IN);
			State = 647;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				{
				State = 633; Match(OPEN_PAR);
				State = 636;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 634; select_stmt();
					}
					break;
				case 2:
					{
					State = 635; expr_list();
					}
					break;
				}
				State = 638; Match(CLOSE_PAR);
				}
				}
				break;
			case 2:
				{
				State = 639; full_table_name();
				}
				break;
			case 3:
				{
				{
				State = 640; full_function_name();
				State = 641; Match(OPEN_PAR);
				State = 643;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_PAR) | (1L << PLUS) | (1L << MINUS) | (1L << TILDE) | (1L << ABORT) | (1L << ACTION) | (1L << ADD) | (1L << AFTER) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << AS) | (1L << ASC) | (1L << ATTACH) | (1L << AUTOINCREMENT) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHECK) | (1L << COLLATE) | (1L << COLUMN) | (1L << COMMIT) | (1L << CONFLICT) | (1L << CONSTRAINT) | (1L << CREATE) | (1L << CROSS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DEFERRABLE) | (1L << DEFERRED) | (1L << DELETE) | (1L << DESC) | (1L << DETACH) | (1L << DISTINCT) | (1L << DROP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EACH - 64)) | (1L << (ELSE - 64)) | (1L << (END - 64)) | (1L << (ESCAPE - 64)) | (1L << (EXCEPT - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXISTS - 64)) | (1L << (EXPLAIN - 64)) | (1L << (FAIL - 64)) | (1L << (FOR - 64)) | (1L << (FOREIGN - 64)) | (1L << (FROM - 64)) | (1L << (FULL - 64)) | (1L << (GLOB - 64)) | (1L << (GROUP - 64)) | (1L << (HAVING - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IN - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXED - 64)) | (1L << (INITIALLY - 64)) | (1L << (INNER - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INTERSECT - 64)) | (1L << (INTO - 64)) | (1L << (IS - 64)) | (1L << (ISNULL - 64)) | (1L << (JOIN - 64)) | (1L << (KEY - 64)) | (1L << (LEFT - 64)) | (1L << (LIKE - 64)) | (1L << (LIMIT - 64)) | (1L << (MATCH - 64)) | (1L << (NATURAL - 64)) | (1L << (NO - 64)) | (1L << (NOT - 64)) | (1L << (NOTNULL - 64)) | (1L << (NULL_ - 64)) | (1L << (OF - 64)) | (1L << (OFFSET - 64)) | (1L << (ON - 64)) | (1L << (OR - 64)) | (1L << (ORDER - 64)) | (1L << (OUTER - 64)) | (1L << (PLAN - 64)) | (1L << (PRAGMA - 64)) | (1L << (PRIMARY - 64)) | (1L << (QUERY - 64)) | (1L << (RAISE - 64)) | (1L << (RECURSIVE - 64)) | (1L << (REFERENCES - 64)) | (1L << (REGEXP - 64)) | (1L << (REINDEX - 64)) | (1L << (RELEASE - 64)) | (1L << (RENAME - 64)) | (1L << (REPLACE - 64)) | (1L << (RESTRICT - 64)) | (1L << (RIGHT - 64)) | (1L << (ROLLBACK - 64)) | (1L << (ROW - 64)) | (1L << (ROWS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (SAVEPOINT - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (TABLE - 128)) | (1L << (TEMP - 128)) | (1L << (TEMPORARY - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRANSACTION - 128)) | (1L << (TRIGGER - 128)) | (1L << (UNION - 128)) | (1L << (UNIQUE - 128)) | (1L << (UPDATE - 128)) | (1L << (USING - 128)) | (1L << (VACUUM - 128)) | (1L << (VALUES - 128)) | (1L << (VIEW - 128)) | (1L << (VIRTUAL - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (WITH - 128)) | (1L << (WITHOUT - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (OVER - 128)) | (1L << (PARTITION - 128)) | (1L << (RANGE - 128)) | (1L << (PRECEDING - 128)) | (1L << (UNBOUNDED - 128)) | (1L << (CURRENT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (CUME_DIST - 128)) | (1L << (DENSE_RANK - 128)) | (1L << (LAG - 128)) | (1L << (LAST_VALUE - 128)) | (1L << (LEAD - 128)) | (1L << (NTH_VALUE - 128)) | (1L << (NTILE - 128)) | (1L << (PERCENT_RANK - 128)) | (1L << (RANK - 128)) | (1L << (ROW_NUMBER - 128)) | (1L << (GENERATED - 128)) | (1L << (ALWAYS - 128)) | (1L << (STORED - 128)) | (1L << (TRUE_ - 128)) | (1L << (FALSE_ - 128)) | (1L << (WINDOW - 128)) | (1L << (NULLS - 128)) | (1L << (FIRST - 128)) | (1L << (LAST - 128)) | (1L << (FILTER - 128)) | (1L << (GROUPS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (IDENTIFIER - 128)) | (1L << (NUMERIC_LITERAL - 128)) | (1L << (BIND_PARAMETER - 128)) | (1L << (STRING_LITERAL - 128)) | (1L << (BLOB_LITERAL - 128)))) != 0)) {
					{
					State = 642; expr_list();
					}
				}

				State = 645; Match(CLOSE_PAR);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_expressionContext : ParserRuleContext {
		public Case_exprContext case_expr() {
			return GetRuleContext<Case_exprContext>(0);
		}
		public ITerminalNode END() { return GetToken(ElasticParser.END, 0); }
		public Case_whenContext[] case_when() {
			return GetRuleContexts<Case_whenContext>();
		}
		public Case_whenContext case_when(int i) {
			return GetRuleContext<Case_whenContext>(i);
		}
		public Case_else_exprContext case_else_expr() {
			return GetRuleContext<Case_else_exprContext>(0);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_expressionContext case_expression() {
		Case_expressionContext _localctx = new Case_expressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_case_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649; case_expr();
			State = 651;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 650; case_when();
				}
				}
				State = 653;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 655; case_else_expr();
				}
			}

			State = 658; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_whenContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(ElasticParser.WHEN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(ElasticParser.THEN, 0); }
		public Case_whenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_when; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_when(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_whenContext case_when() {
		Case_whenContext _localctx = new Case_whenContext(Context, State);
		EnterRule(_localctx, 48, RULE_case_when);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660; Match(WHEN);
			State = 661; expr(0);
			State = 662; Match(THEN);
			State = 663; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_exprContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(ElasticParser.CASE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Case_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_exprContext case_expr() {
		Case_exprContext _localctx = new Case_exprContext(Context, State);
		EnterRule(_localctx, 50, RULE_case_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665; Match(CASE);
			State = 667;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 666; expr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_else_exprContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(ElasticParser.ELSE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Case_else_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_else_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_else_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_else_exprContext case_else_expr() {
		Case_else_exprContext _localctx = new Case_else_exprContext(Context, State);
		EnterRule(_localctx, 52, RULE_case_else_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669; Match(ELSE);
			State = 670; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exists_exprContext : ParserRuleContext {
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode EXISTS() { return GetToken(ElasticParser.EXISTS, 0); }
		public ITerminalNode NOT() { return GetToken(ElasticParser.NOT, 0); }
		public Exists_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exists_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExists_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exists_exprContext exists_expr() {
		Exists_exprContext _localctx = new Exists_exprContext(Context, State);
		EnterRule(_localctx, 54, RULE_exists_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXISTS || _la==NOT) {
				{
				State = 673;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 672; Match(NOT);
					}
				}

				State = 675; Match(EXISTS);
				}
			}

			State = 678; Match(OPEN_PAR);
			State = 679; select_stmt();
			State = 680; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nullable_exprContext : ParserRuleContext {
		public ITerminalNode ISNULL() { return GetToken(ElasticParser.ISNULL, 0); }
		public ITerminalNode NOTNULL() { return GetToken(ElasticParser.NOTNULL, 0); }
		public ITerminalNode NOT() { return GetToken(ElasticParser.NOT, 0); }
		public ITerminalNode NULL_() { return GetToken(ElasticParser.NULL_, 0); }
		public Nullable_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullable_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullable_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nullable_exprContext nullable_expr() {
		Nullable_exprContext _localctx = new Nullable_exprContext(Context, State);
		EnterRule(_localctx, 56, RULE_nullable_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ISNULL:
				{
				State = 682; Match(ISNULL);
				}
				break;
			case NOTNULL:
				{
				State = 683; Match(NOTNULL);
				}
				break;
			case NOT:
				{
				{
				State = 684; Match(NOT);
				State = 685; Match(NULL_);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_operatorContext : ParserRuleContext {
		public ITerminalNode STAR() { return GetToken(ElasticParser.STAR, 0); }
		public ITerminalNode IN() { return GetToken(ElasticParser.IN, 0); }
		public ITerminalNode AND() { return GetToken(ElasticParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(ElasticParser.OR, 0); }
		public ITerminalNode IS() { return GetToken(ElasticParser.IS, 0); }
		public ITerminalNode NOT() { return GetToken(ElasticParser.NOT, 0); }
		public Like_operatorContext like_operator() {
			return GetRuleContext<Like_operatorContext>(0);
		}
		public Binary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_operatorContext binary_operator() {
		Binary_operatorContext _localctx = new Binary_operatorContext(Context, State);
		EnterRule(_localctx, 58, RULE_binary_operator);
		int _la;
		try {
			State = 705;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PIPE2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 688; Match(PIPE2);
				}
				break;
			case STAR:
			case DIV:
			case MOD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 689;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << DIV) | (1L << MOD))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 690;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case LT2:
			case GT2:
			case AMP:
			case PIPE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 691;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT2) | (1L << GT2) | (1L << AMP) | (1L << PIPE))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case LT:
			case LT_EQ:
			case GT:
			case GT_EQ:
				EnterOuterAlt(_localctx, 5);
				{
				State = 692;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LT_EQ) | (1L << GT) | (1L << GT_EQ))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case ASSIGN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 693; Match(ASSIGN);
				}
				break;
			case EQ:
				EnterOuterAlt(_localctx, 7);
				{
				State = 694; Match(EQ);
				}
				break;
			case NOT_EQ1:
				EnterOuterAlt(_localctx, 8);
				{
				State = 695; Match(NOT_EQ1);
				}
				break;
			case NOT_EQ2:
				EnterOuterAlt(_localctx, 9);
				{
				State = 696; Match(NOT_EQ2);
				}
				break;
			case IN:
				EnterOuterAlt(_localctx, 10);
				{
				State = 697; Match(IN);
				}
				break;
			case AND:
				EnterOuterAlt(_localctx, 11);
				{
				State = 698; Match(AND);
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 12);
				{
				State = 699; Match(OR);
				}
				break;
			case IS:
				EnterOuterAlt(_localctx, 13);
				{
				State = 700; Match(IS);
				State = 702;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
				case 1:
					{
					State = 701; Match(NOT);
					}
					break;
				}
				}
				break;
			case GLOB:
			case LIKE:
			case MATCH:
			case REGEXP:
				EnterOuterAlt(_localctx, 14);
				{
				State = 704; like_operator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Like_operatorContext : ParserRuleContext {
		public ITerminalNode LIKE() { return GetToken(ElasticParser.LIKE, 0); }
		public ITerminalNode GLOB() { return GetToken(ElasticParser.GLOB, 0); }
		public ITerminalNode MATCH() { return GetToken(ElasticParser.MATCH, 0); }
		public ITerminalNode REGEXP() { return GetToken(ElasticParser.REGEXP, 0); }
		public Like_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_like_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLike_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Like_operatorContext like_operator() {
		Like_operatorContext _localctx = new Like_operatorContext(Context, State);
		EnterRule(_localctx, 60, RULE_like_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 707;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (GLOB - 77)) | (1L << (LIKE - 77)) | (1L << (MATCH - 77)) | (1L << (REGEXP - 77)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raise_functionContext : ParserRuleContext {
		public ITerminalNode RAISE() { return GetToken(ElasticParser.RAISE, 0); }
		public ITerminalNode IGNORE() { return GetToken(ElasticParser.IGNORE, 0); }
		public Error_messageContext error_message() {
			return GetRuleContext<Error_messageContext>(0);
		}
		public ITerminalNode ROLLBACK() { return GetToken(ElasticParser.ROLLBACK, 0); }
		public ITerminalNode ABORT() { return GetToken(ElasticParser.ABORT, 0); }
		public ITerminalNode FAIL() { return GetToken(ElasticParser.FAIL, 0); }
		public Raise_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaise_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raise_functionContext raise_function() {
		Raise_functionContext _localctx = new Raise_functionContext(Context, State);
		EnterRule(_localctx, 62, RULE_raise_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 709; Match(RAISE);
			State = 710; Match(OPEN_PAR);
			State = 715;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IGNORE:
				{
				State = 711; Match(IGNORE);
				}
				break;
			case ABORT:
			case FAIL:
			case ROLLBACK:
				{
				{
				State = 712;
				_la = TokenStream.LA(1);
				if ( !(_la==ABORT || _la==FAIL || _la==ROLLBACK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 713; Match(COMMA);
				State = 714; error_message();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 717; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_valueContext : ParserRuleContext {
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(ElasticParser.NUMERIC_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(ElasticParser.STRING_LITERAL, 0); }
		public ITerminalNode BLOB_LITERAL() { return GetToken(ElasticParser.BLOB_LITERAL, 0); }
		public ITerminalNode NULL_() { return GetToken(ElasticParser.NULL_, 0); }
		public ITerminalNode TRUE_() { return GetToken(ElasticParser.TRUE_, 0); }
		public ITerminalNode FALSE_() { return GetToken(ElasticParser.FALSE_, 0); }
		public ITerminalNode CURRENT_TIME() { return GetToken(ElasticParser.CURRENT_TIME, 0); }
		public ITerminalNode CURRENT_DATE() { return GetToken(ElasticParser.CURRENT_DATE, 0); }
		public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(ElasticParser.CURRENT_TIMESTAMP, 0); }
		public Literal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_valueContext literal_value() {
		Literal_valueContext _localctx = new Literal_valueContext(Context, State);
		EnterRule(_localctx, 64, RULE_literal_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & ((1L << (CURRENT_DATE - 52)) | (1L << (CURRENT_TIME - 52)) | (1L << (CURRENT_TIMESTAMP - 52)) | (1L << (NULL_ - 52)))) != 0) || ((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (TRUE_ - 171)) | (1L << (FALSE_ - 171)) | (1L << (NUMERIC_LITERAL - 171)) | (1L << (STRING_LITERAL - 171)) | (1L << (BLOB_LITERAL - 171)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_stmtContext : ParserRuleContext {
		public ITerminalNode INTO() { return GetToken(ElasticParser.INTO, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public ITerminalNode INSERT() { return GetToken(ElasticParser.INSERT, 0); }
		public ITerminalNode REPLACE() { return GetToken(ElasticParser.REPLACE, 0); }
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode AS() { return GetToken(ElasticParser.AS, 0); }
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode OR() { return GetToken(ElasticParser.OR, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode ROLLBACK() { return GetToken(ElasticParser.ROLLBACK, 0); }
		public ITerminalNode ABORT() { return GetToken(ElasticParser.ABORT, 0); }
		public ITerminalNode FAIL() { return GetToken(ElasticParser.FAIL, 0); }
		public ITerminalNode IGNORE() { return GetToken(ElasticParser.IGNORE, 0); }
		public Upsert_clauseContext upsert_clause() {
			return GetRuleContext<Upsert_clauseContext>(0);
		}
		public ITerminalNode VALUES() { return GetToken(ElasticParser.VALUES, 0); }
		public Value_list_stmtContext value_list_stmt() {
			return GetRuleContext<Value_list_stmtContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(ElasticParser.DEFAULT, 0); }
		public Insert_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_stmtContext insert_stmt() {
		Insert_stmtContext _localctx = new Insert_stmtContext(Context, State);
		EnterRule(_localctx, 66, RULE_insert_stmt);
		int _la;
		try {
			State = 750;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INSERT:
			case REPLACE:
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 722;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 721; with_clause();
					}
				}

				State = 729;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
				case 1:
					{
					State = 724; Match(INSERT);
					}
					break;
				case 2:
					{
					State = 725; Match(REPLACE);
					}
					break;
				case 3:
					{
					{
					State = 726; Match(INSERT);
					State = 727; Match(OR);
					State = 728;
					_la = TokenStream.LA(1);
					if ( !(_la==ABORT || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (FAIL - 72)) | (1L << (IGNORE - 72)) | (1L << (REPLACE - 72)) | (1L << (ROLLBACK - 72)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				}
				State = 731; Match(INTO);
				State = 732; full_table_name();
				State = 735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 733; Match(AS);
					State = 734; table_alias();
					}
				}

				State = 738;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAR) {
					{
					State = 737; column_name_list();
					}
				}

				{
				State = 743;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
				case 1:
					{
					{
					State = 740; Match(VALUES);
					State = 741; value_list_stmt();
					}
					}
					break;
				case 2:
					{
					State = 742; select_stmt();
					}
					break;
				}
				State = 746;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 745; upsert_clause();
					}
				}

				}
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 748; Match(DEFAULT);
				State = 749; Match(VALUES);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Upsert_clauseContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(ElasticParser.ON, 0); }
		public ITerminalNode CONFLICT() { return GetToken(ElasticParser.CONFLICT, 0); }
		public ITerminalNode DO() { return GetToken(ElasticParser.DO, 0); }
		public ITerminalNode NOTHING() { return GetToken(ElasticParser.NOTHING, 0); }
		public Indexed_columnContext[] indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		public ITerminalNode UPDATE() { return GetToken(ElasticParser.UPDATE, 0); }
		public ITerminalNode SET() { return GetToken(ElasticParser.SET, 0); }
		public Where_stmtContext[] where_stmt() {
			return GetRuleContexts<Where_stmtContext>();
		}
		public Where_stmtContext where_stmt(int i) {
			return GetRuleContext<Where_stmtContext>(i);
		}
		public ITerminalNode[] EQ() { return GetTokens(ElasticParser.EQ); }
		public ITerminalNode EQ(int i) {
			return GetToken(ElasticParser.EQ, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		public Upsert_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upsert_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpsert_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Upsert_clauseContext upsert_clause() {
		Upsert_clauseContext _localctx = new Upsert_clauseContext(Context, State);
		EnterRule(_localctx, 68, RULE_upsert_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 752; Match(ON);
			State = 753; Match(CONFLICT);
			State = 767;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 754; Match(OPEN_PAR);
				State = 755; indexed_column();
				State = 760;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 756; Match(COMMA);
					State = 757; indexed_column();
					}
					}
					State = 762;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 763; Match(CLOSE_PAR);
				State = 765;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 764; where_stmt();
					}
				}

				}
			}

			State = 769; Match(DO);
			State = 795;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOTHING:
				{
				State = 770; Match(NOTHING);
				}
				break;
			case UPDATE:
				{
				{
				State = 771; Match(UPDATE);
				State = 772; Match(SET);
				{
				State = 775;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
				case 1:
					{
					State = 773; column_name();
					}
					break;
				case 2:
					{
					State = 774; column_name_list();
					}
					break;
				}
				State = 777; Match(EQ);
				State = 778; expr(0);
				State = 789;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 779; Match(COMMA);
					State = 782;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
					case 1:
						{
						State = 780; column_name();
						}
						break;
					case 2:
						{
						State = 781; column_name_list();
						}
						break;
					}
					State = 784; Match(EQ);
					State = 785; expr(0);
					}
					}
					State = 791;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 793;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 792; where_stmt();
					}
				}

				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_stmtContext : ParserRuleContext {
		public Select_coreContext select_core() {
			return GetRuleContext<Select_coreContext>(0);
		}
		public Common_table_stmtContext common_table_stmt() {
			return GetRuleContext<Common_table_stmtContext>(0);
		}
		public CompoundContext[] compound() {
			return GetRuleContexts<CompoundContext>();
		}
		public CompoundContext compound(int i) {
			return GetRuleContext<CompoundContext>(i);
		}
		public Order_by_stmtContext order_by_stmt() {
			return GetRuleContext<Order_by_stmtContext>(0);
		}
		public Limit_stmtsContext limit_stmts() {
			return GetRuleContext<Limit_stmtsContext>(0);
		}
		public Select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_stmtContext select_stmt() {
		Select_stmtContext _localctx = new Select_stmtContext(Context, State);
		EnterRule(_localctx, 70, RULE_select_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 798;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 797; common_table_stmt();
				}
			}

			State = 800; select_core();
			State = 804;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 801; compound();
					}
					} 
				}
				State = 806;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			}
			State = 808;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 807; order_by_stmt();
				}
			}

			State = 811;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 810; limit_stmts();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundContext : ParserRuleContext {
		public Compound_operatorContext compound_operator() {
			return GetRuleContext<Compound_operatorContext>(0);
		}
		public Select_coreContext select_core() {
			return GetRuleContext<Select_coreContext>(0);
		}
		public CompoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundContext compound() {
		CompoundContext _localctx = new CompoundContext(Context, State);
		EnterRule(_localctx, 72, RULE_compound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 813; compound_operator();
			State = 814; select_core();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clausesContext : ParserRuleContext {
		public Table_or_subqueryContext table_or_subquery() {
			return GetRuleContext<Table_or_subqueryContext>(0);
		}
		public Join_clauseContext[] join_clause() {
			return GetRuleContexts<Join_clauseContext>();
		}
		public Join_clauseContext join_clause(int i) {
			return GetRuleContext<Join_clauseContext>(i);
		}
		public Join_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clauses; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_clausesContext join_clauses() {
		Join_clausesContext _localctx = new Join_clausesContext(Context, State);
		EnterRule(_localctx, 74, RULE_join_clauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816; table_or_subquery();
			State = 818;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 817; join_clause();
				}
				}
				State = 820;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA || _la==CROSS || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (INNER - 87)) | (1L << (JOIN - 87)) | (1L << (LEFT - 87)) | (1L << (NATURAL - 87)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		public Join_operatorContext join_operator() {
			return GetRuleContext<Join_operatorContext>(0);
		}
		public Table_or_subqueryContext table_or_subquery() {
			return GetRuleContext<Table_or_subqueryContext>(0);
		}
		public Join_constraintContext join_constraint() {
			return GetRuleContext<Join_constraintContext>(0);
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		Join_clauseContext _localctx = new Join_clauseContext(Context, State);
		EnterRule(_localctx, 76, RULE_join_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 822; join_operator();
			State = 823; table_or_subquery();
			State = 825;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				{
				State = 824; join_constraint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_coreContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(ElasticParser.SELECT, 0); }
		public Result_columnContext[] result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(ElasticParser.FROM, 0); }
		public Subquery_tableContext subquery_table() {
			return GetRuleContext<Subquery_tableContext>(0);
		}
		public Where_stmtContext where_stmt() {
			return GetRuleContext<Where_stmtContext>(0);
		}
		public Group_by_stmtContext group_by_stmt() {
			return GetRuleContext<Group_by_stmtContext>(0);
		}
		public ITerminalNode WINDOW() { return GetToken(ElasticParser.WINDOW, 0); }
		public Window_stmtContext[] window_stmt() {
			return GetRuleContexts<Window_stmtContext>();
		}
		public Window_stmtContext window_stmt(int i) {
			return GetRuleContext<Window_stmtContext>(i);
		}
		public ITerminalNode DISTINCT() { return GetToken(ElasticParser.DISTINCT, 0); }
		public ITerminalNode ALL() { return GetToken(ElasticParser.ALL, 0); }
		public ITerminalNode VALUES() { return GetToken(ElasticParser.VALUES, 0); }
		public Value_list_stmtContext value_list_stmt() {
			return GetRuleContext<Value_list_stmtContext>(0);
		}
		public Select_coreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_core; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_core(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_coreContext select_core() {
		Select_coreContext _localctx = new Select_coreContext(Context, State);
		EnterRule(_localctx, 78, RULE_select_core);
		int _la;
		try {
			State = 862;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 827; Match(SELECT);
				State = 829;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
				case 1:
					{
					State = 828;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 831; result_column();
				State = 836;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 832; Match(COMMA);
					State = 833; result_column();
					}
					}
					State = 838;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 841;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 839; Match(FROM);
					State = 840; subquery_table();
					}
				}

				State = 844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 843; where_stmt();
					}
				}

				State = 847;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GROUP) {
					{
					State = 846; group_by_stmt();
					}
				}

				State = 858;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WINDOW) {
					{
					State = 849; Match(WINDOW);
					State = 850; window_stmt();
					State = 855;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 851; Match(COMMA);
						State = 852; window_stmt();
						}
						}
						State = 857;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				}
				break;
			case VALUES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 860; Match(VALUES);
				State = 861; value_list_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_list_stmtContext : ParserRuleContext {
		public Expr_listContext[] expr_list() {
			return GetRuleContexts<Expr_listContext>();
		}
		public Expr_listContext expr_list(int i) {
			return GetRuleContext<Expr_listContext>(i);
		}
		public Value_list_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_list_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_list_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_list_stmtContext value_list_stmt() {
		Value_list_stmtContext _localctx = new Value_list_stmtContext(Context, State);
		EnterRule(_localctx, 80, RULE_value_list_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 864; Match(OPEN_PAR);
			State = 865; expr_list();
			State = 866; Match(CLOSE_PAR);
			State = 874;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 867; Match(COMMA);
				State = 868; Match(OPEN_PAR);
				State = 869; expr_list();
				State = 870; Match(CLOSE_PAR);
				}
				}
				State = 876;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_stmtContext : ParserRuleContext {
		public ITerminalNode GROUP() { return GetToken(ElasticParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(ElasticParser.BY, 0); }
		public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Having_stmtContext having_stmt() {
			return GetRuleContext<Having_stmtContext>(0);
		}
		public Group_by_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_stmtContext group_by_stmt() {
		Group_by_stmtContext _localctx = new Group_by_stmtContext(Context, State);
		EnterRule(_localctx, 82, RULE_group_by_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 877; Match(GROUP);
			State = 878; Match(BY);
			State = 879; expr_list();
			State = 881;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAVING) {
				{
				State = 880; having_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Having_stmtContext : ParserRuleContext {
		public ITerminalNode HAVING() { return GetToken(ElasticParser.HAVING, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Having_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_having_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHaving_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Having_stmtContext having_stmt() {
		Having_stmtContext _localctx = new Having_stmtContext(Context, State);
		EnterRule(_localctx, 84, RULE_having_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 883; Match(HAVING);
			State = 884; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_stmtContext : ParserRuleContext {
		public Window_nameContext window_name() {
			return GetRuleContext<Window_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(ElasticParser.AS, 0); }
		public Window_defnContext window_defn() {
			return GetRuleContext<Window_defnContext>(0);
		}
		public Window_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_stmtContext window_stmt() {
		Window_stmtContext _localctx = new Window_stmtContext(Context, State);
		EnterRule(_localctx, 86, RULE_window_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 886; window_name();
			State = 887; Match(AS);
			State = 888; window_defn();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_listContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_listContext expr_list() {
		Expr_listContext _localctx = new Expr_listContext(Context, State);
		EnterRule(_localctx, 88, RULE_expr_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 890; expr(0);
			State = 895;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 891; Match(COMMA);
				State = 892; expr(0);
				}
				}
				State = 897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_or_subqueryContext : ParserRuleContext {
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public ITerminalNode INDEXED() { return GetToken(ElasticParser.INDEXED, 0); }
		public ITerminalNode BY() { return GetToken(ElasticParser.BY, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(ElasticParser.NOT, 0); }
		public ITerminalNode AS() { return GetToken(ElasticParser.AS, 0); }
		public Full_function_nameContext full_function_name() {
			return GetRuleContext<Full_function_nameContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Subquery_tableContext subquery_table() {
			return GetRuleContext<Subquery_tableContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Table_or_subqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_or_subquery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_or_subquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_or_subqueryContext table_or_subquery() {
		Table_or_subqueryContext _localctx = new Table_or_subqueryContext(Context, State);
		EnterRule(_localctx, 90, RULE_table_or_subquery);
		int _la;
		try {
			State = 942;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 898; full_table_name();
				State = 903;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
				case 1:
					{
					State = 900;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
					case 1:
						{
						State = 899; Match(AS);
						}
						break;
					}
					State = 902; table_alias();
					}
					break;
				}
				State = 910;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INDEXED:
					{
					{
					State = 905; Match(INDEXED);
					State = 906; Match(BY);
					State = 907; index_name();
					}
					}
					break;
				case NOT:
					{
					{
					State = 908; Match(NOT);
					State = 909; Match(INDEXED);
					}
					}
					break;
				case Eof:
				case SCOL:
				case CLOSE_PAR:
				case COMMA:
				case CREATE:
				case CROSS:
				case DEFAULT:
				case EXCEPT:
				case EXPLAIN:
				case GROUP:
				case INNER:
				case INSERT:
				case INTERSECT:
				case JOIN:
				case LEFT:
				case LIMIT:
				case NATURAL:
				case ON:
				case ORDER:
				case REPLACE:
				case SELECT:
				case UNION:
				case USING:
				case VALUES:
				case WHERE:
				case WITH:
				case WINDOW:
				case UNEXPECTED_CHAR:
					break;
				default:
					break;
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 912; full_function_name();
				State = 913; Match(OPEN_PAR);
				State = 914; expr(0);
				State = 919;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 915; Match(COMMA);
					State = 916; expr(0);
					}
					}
					State = 921;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 922; Match(CLOSE_PAR);
				State = 927;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
				case 1:
					{
					State = 924;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
					case 1:
						{
						State = 923; Match(AS);
						}
						break;
					}
					State = 926; table_alias();
					}
					break;
				}
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 929; Match(OPEN_PAR);
				State = 930; subquery_table();
				State = 931; Match(CLOSE_PAR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 933; Match(OPEN_PAR);
				State = 934; select_stmt();
				State = 935; Match(CLOSE_PAR);
				State = 940;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
				case 1:
					{
					State = 937;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
					case 1:
						{
						State = 936; Match(AS);
						}
						break;
					}
					State = 939; table_alias();
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subquery_tableContext : ParserRuleContext {
		public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Join_clausesContext join_clauses() {
			return GetRuleContext<Join_clausesContext>(0);
		}
		public Subquery_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery_table; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subquery_tableContext subquery_table() {
		Subquery_tableContext _localctx = new Subquery_tableContext(Context, State);
		EnterRule(_localctx, 92, RULE_subquery_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 953;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				{
				State = 944; table_or_subquery();
				State = 949;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 945; Match(COMMA);
					State = 946; table_or_subquery();
					}
					}
					State = 951;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 952; join_clauses();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_columnContext : ParserRuleContext {
		public ITerminalNode STAR() { return GetToken(ElasticParser.STAR, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(ElasticParser.AS, 0); }
		public Result_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_column; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Result_columnContext result_column() {
		Result_columnContext _localctx = new Result_columnContext(Context, State);
		EnterRule(_localctx, 94, RULE_result_column);
		int _la;
		try {
			State = 967;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 955; Match(STAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 956; table_name();
				State = 957; Match(DOT);
				State = 958; Match(STAR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 960; expr(0);
				State = 965;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS || _la==IDENTIFIER || _la==STRING_LITERAL) {
					{
					State = 962;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 961; Match(AS);
						}
					}

					State = 964; column_alias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_operatorContext : ParserRuleContext {
		public ITerminalNode JOIN() { return GetToken(ElasticParser.JOIN, 0); }
		public ITerminalNode NATURAL() { return GetToken(ElasticParser.NATURAL, 0); }
		public ITerminalNode INNER() { return GetToken(ElasticParser.INNER, 0); }
		public ITerminalNode CROSS() { return GetToken(ElasticParser.CROSS, 0); }
		public ITerminalNode LEFT() { return GetToken(ElasticParser.LEFT, 0); }
		public ITerminalNode OUTER() { return GetToken(ElasticParser.OUTER, 0); }
		public Join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_operatorContext join_operator() {
		Join_operatorContext _localctx = new Join_operatorContext(Context, State);
		EnterRule(_localctx, 96, RULE_join_operator);
		int _la;
		try {
			State = 982;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 969; Match(COMMA);
				}
				break;
			case CROSS:
			case INNER:
			case JOIN:
			case LEFT:
			case NATURAL:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 971;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NATURAL) {
					{
					State = 970; Match(NATURAL);
					}
				}

				State = 979;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LEFT:
					{
					{
					State = 973; Match(LEFT);
					State = 975;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OUTER) {
						{
						State = 974; Match(OUTER);
						}
					}

					}
					}
					break;
				case INNER:
					{
					State = 977; Match(INNER);
					}
					break;
				case CROSS:
					{
					State = 978; Match(CROSS);
					}
					break;
				case JOIN:
					break;
				default:
					break;
				}
				State = 981; Match(JOIN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_constraintContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(ElasticParser.ON, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode USING() { return GetToken(ElasticParser.USING, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Join_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_constraintContext join_constraint() {
		Join_constraintContext _localctx = new Join_constraintContext(Context, State);
		EnterRule(_localctx, 98, RULE_join_constraint);
		try {
			State = 988;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 984; Match(ON);
				State = 985; expr(0);
				}
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 986; Match(USING);
				State = 987; column_name_list();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_operatorContext : ParserRuleContext {
		public ITerminalNode UNION() { return GetToken(ElasticParser.UNION, 0); }
		public ITerminalNode ALL() { return GetToken(ElasticParser.ALL, 0); }
		public ITerminalNode INTERSECT() { return GetToken(ElasticParser.INTERSECT, 0); }
		public ITerminalNode EXCEPT() { return GetToken(ElasticParser.EXCEPT, 0); }
		public Compound_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_operatorContext compound_operator() {
		Compound_operatorContext _localctx = new Compound_operatorContext(Context, State);
		EnterRule(_localctx, 100, RULE_compound_operator);
		int _la;
		try {
			State = 996;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNION:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 990; Match(UNION);
				State = 992;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL) {
					{
					State = 991; Match(ALL);
					}
				}

				}
				}
				break;
			case INTERSECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 994; Match(INTERSECT);
				}
				break;
			case EXCEPT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 995; Match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_listContext : ParserRuleContext {
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_listContext column_name_list() {
		Column_name_listContext _localctx = new Column_name_listContext(Context, State);
		EnterRule(_localctx, 102, RULE_column_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 998; Match(OPEN_PAR);
			State = 999; column_name();
			State = 1004;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1000; Match(COMMA);
				State = 1001; column_name();
				}
				}
				State = 1006;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1007; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filter_clauseContext : ParserRuleContext {
		public ITerminalNode FILTER() { return GetToken(ElasticParser.FILTER, 0); }
		public ITerminalNode WHERE() { return GetToken(ElasticParser.WHERE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Filter_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Filter_clauseContext filter_clause() {
		Filter_clauseContext _localctx = new Filter_clauseContext(Context, State);
		EnterRule(_localctx, 104, RULE_filter_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1009; Match(FILTER);
			State = 1010; Match(OPEN_PAR);
			State = 1011; Match(WHERE);
			State = 1012; expr(0);
			State = 1013; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_defnContext : ParserRuleContext {
		public ITerminalNode ORDER() { return GetToken(ElasticParser.ORDER, 0); }
		public ITerminalNode[] BY() { return GetTokens(ElasticParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(ElasticParser.BY, i);
		}
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public Base_window_nameContext base_window_name() {
			return GetRuleContext<Base_window_nameContext>(0);
		}
		public ITerminalNode PARTITION() { return GetToken(ElasticParser.PARTITION, 0); }
		public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Frame_specContext frame_spec() {
			return GetRuleContext<Frame_specContext>(0);
		}
		public Window_defnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_defn; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_defn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_defnContext window_defn() {
		Window_defnContext _localctx = new Window_defnContext(Context, State);
		EnterRule(_localctx, 106, RULE_window_defn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1015; Match(OPEN_PAR);
			State = 1017;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				{
				State = 1016; base_window_name();
				}
				break;
			}
			State = 1022;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 1019; Match(PARTITION);
				State = 1020; Match(BY);
				State = 1021; expr_list();
				}
			}

			{
			State = 1024; Match(ORDER);
			State = 1025; Match(BY);
			State = 1026; ordering_term();
			State = 1031;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1027; Match(COMMA);
				State = 1028; ordering_term();
				}
				}
				State = 1033;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 1035;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (ROWS - 127)) | (1L << (RANGE - 127)) | (1L << (GROUPS - 127)))) != 0)) {
				{
				State = 1034; frame_spec();
				}
			}

			State = 1037; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		public ITerminalNode OVER() { return GetToken(ElasticParser.OVER, 0); }
		public Window_nameContext window_name() {
			return GetRuleContext<Window_nameContext>(0);
		}
		public Base_window_nameContext base_window_name() {
			return GetRuleContext<Base_window_nameContext>(0);
		}
		public ITerminalNode PARTITION() { return GetToken(ElasticParser.PARTITION, 0); }
		public ITerminalNode[] BY() { return GetTokens(ElasticParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(ElasticParser.BY, i);
		}
		public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public ITerminalNode ORDER() { return GetToken(ElasticParser.ORDER, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public Frame_specContext frame_spec() {
			return GetRuleContext<Frame_specContext>(0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(Context, State);
		EnterRule(_localctx, 108, RULE_over_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1039; Match(OVER);
			State = 1066;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				{
				State = 1040; window_name();
				}
				break;
			case 2:
				{
				{
				State = 1041; Match(OPEN_PAR);
				State = 1043;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
				case 1:
					{
					State = 1042; base_window_name();
					}
					break;
				}
				State = 1048;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1045; Match(PARTITION);
					State = 1046; Match(BY);
					State = 1047; expr_list();
					}
				}

				State = 1060;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 1050; Match(ORDER);
					State = 1051; Match(BY);
					State = 1052; ordering_term();
					State = 1057;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1053; Match(COMMA);
						State = 1054; ordering_term();
						}
						}
						State = 1059;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1063;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (ROWS - 127)) | (1L << (RANGE - 127)) | (1L << (GROUPS - 127)))) != 0)) {
					{
					State = 1062; frame_spec();
					}
				}

				State = 1065; Match(CLOSE_PAR);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_specContext : ParserRuleContext {
		public Frame_clauseContext frame_clause() {
			return GetRuleContext<Frame_clauseContext>(0);
		}
		public ITerminalNode EXCLUDE() { return GetToken(ElasticParser.EXCLUDE, 0); }
		public ITerminalNode GROUP() { return GetToken(ElasticParser.GROUP, 0); }
		public ITerminalNode TIES() { return GetToken(ElasticParser.TIES, 0); }
		public ITerminalNode NO() { return GetToken(ElasticParser.NO, 0); }
		public ITerminalNode OTHERS() { return GetToken(ElasticParser.OTHERS, 0); }
		public ITerminalNode CURRENT() { return GetToken(ElasticParser.CURRENT, 0); }
		public ITerminalNode ROW() { return GetToken(ElasticParser.ROW, 0); }
		public Frame_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_specContext frame_spec() {
		Frame_specContext _localctx = new Frame_specContext(Context, State);
		EnterRule(_localctx, 110, RULE_frame_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1068; frame_clause();
			State = 1076;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXCLUDE:
				{
				State = 1069; Match(EXCLUDE);
				{
				State = 1070; Match(NO);
				State = 1071; Match(OTHERS);
				}
				}
				break;
			case CURRENT:
				{
				{
				State = 1072; Match(CURRENT);
				State = 1073; Match(ROW);
				}
				}
				break;
			case GROUP:
				{
				State = 1074; Match(GROUP);
				}
				break;
			case TIES:
				{
				State = 1075; Match(TIES);
				}
				break;
			case CLOSE_PAR:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_clauseContext : ParserRuleContext {
		public ITerminalNode RANGE() { return GetToken(ElasticParser.RANGE, 0); }
		public ITerminalNode ROWS() { return GetToken(ElasticParser.ROWS, 0); }
		public ITerminalNode GROUPS() { return GetToken(ElasticParser.GROUPS, 0); }
		public Frame_singleContext frame_single() {
			return GetRuleContext<Frame_singleContext>(0);
		}
		public ITerminalNode BETWEEN() { return GetToken(ElasticParser.BETWEEN, 0); }
		public Frame_leftContext frame_left() {
			return GetRuleContext<Frame_leftContext>(0);
		}
		public ITerminalNode AND() { return GetToken(ElasticParser.AND, 0); }
		public Frame_rightContext frame_right() {
			return GetRuleContext<Frame_rightContext>(0);
		}
		public Frame_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_clauseContext frame_clause() {
		Frame_clauseContext _localctx = new Frame_clauseContext(Context, State);
		EnterRule(_localctx, 112, RULE_frame_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1078;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (ROWS - 127)) | (1L << (RANGE - 127)) | (1L << (GROUPS - 127)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1085;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
			case 1:
				{
				State = 1079; frame_single();
				}
				break;
			case 2:
				{
				State = 1080; Match(BETWEEN);
				State = 1081; frame_left();
				State = 1082; Match(AND);
				State = 1083; frame_right();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_stmtContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(ElasticParser.WITH, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public ITerminalNode RECURSIVE() { return GetToken(ElasticParser.RECURSIVE, 0); }
		public Common_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_stmtContext common_table_stmt() {
		Common_table_stmtContext _localctx = new Common_table_stmtContext(Context, State);
		EnterRule(_localctx, 114, RULE_common_table_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1087; Match(WITH);
			State = 1089;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
			case 1:
				{
				State = 1088; Match(RECURSIVE);
				}
				break;
			}
			State = 1091; common_table_expression();
			State = 1096;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1092; Match(COMMA);
				State = 1093; common_table_expression();
				}
				}
				State = 1098;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_stmtContext : ParserRuleContext {
		public ITerminalNode ORDER() { return GetToken(ElasticParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(ElasticParser.BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public Order_by_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_stmtContext order_by_stmt() {
		Order_by_stmtContext _localctx = new Order_by_stmtContext(Context, State);
		EnterRule(_localctx, 116, RULE_order_by_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1099; Match(ORDER);
			State = 1100; Match(BY);
			State = 1101; ordering_term();
			State = 1106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1102; Match(COMMA);
				State = 1103; ordering_term();
				}
				}
				State = 1108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_stmtsContext : ParserRuleContext {
		public ITerminalNode LIMIT() { return GetToken(ElasticParser.LIMIT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Limit_stmtContext limit_stmt() {
			return GetRuleContext<Limit_stmtContext>(0);
		}
		public Limit_stmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_stmts; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimit_stmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Limit_stmtsContext limit_stmts() {
		Limit_stmtsContext _localctx = new Limit_stmtsContext(Context, State);
		EnterRule(_localctx, 118, RULE_limit_stmts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1109; Match(LIMIT);
			State = 1110; expr(0);
			State = 1112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA || _la==OFFSET) {
				{
				State = 1111; limit_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_stmtContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode OFFSET() { return GetToken(ElasticParser.OFFSET, 0); }
		public Limit_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimit_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Limit_stmtContext limit_stmt() {
		Limit_stmtContext _localctx = new Limit_stmtContext(Context, State);
		EnterRule(_localctx, 120, RULE_limit_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1114;
			_la = TokenStream.LA(1);
			if ( !(_la==COMMA || _la==OFFSET) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1115; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordering_termContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(ElasticParser.COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public Asc_descContext asc_desc() {
			return GetRuleContext<Asc_descContext>(0);
		}
		public ITerminalNode NULLS() { return GetToken(ElasticParser.NULLS, 0); }
		public ITerminalNode FIRST() { return GetToken(ElasticParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(ElasticParser.LAST, 0); }
		public Ordering_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering_term; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdering_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ordering_termContext ordering_term() {
		Ordering_termContext _localctx = new Ordering_termContext(Context, State);
		EnterRule(_localctx, 122, RULE_ordering_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1117; expr(0);
			State = 1120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE) {
				{
				State = 1118; Match(COLLATE);
				State = 1119; collation_name();
				}
			}

			State = 1123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 1122; asc_desc();
				}
			}

			State = 1127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NULLS) {
				{
				State = 1125; Match(NULLS);
				State = 1126;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asc_descContext : ParserRuleContext {
		public ITerminalNode ASC() { return GetToken(ElasticParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(ElasticParser.DESC, 0); }
		public Asc_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asc_desc; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsc_desc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Asc_descContext asc_desc() {
		Asc_descContext _localctx = new Asc_descContext(Context, State);
		EnterRule(_localctx, 124, RULE_asc_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1129;
			_la = TokenStream.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_leftContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PRECEDING() { return GetToken(ElasticParser.PRECEDING, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(ElasticParser.FOLLOWING, 0); }
		public ITerminalNode CURRENT() { return GetToken(ElasticParser.CURRENT, 0); }
		public ITerminalNode ROW() { return GetToken(ElasticParser.ROW, 0); }
		public ITerminalNode UNBOUNDED() { return GetToken(ElasticParser.UNBOUNDED, 0); }
		public Frame_leftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_left; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_left(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_leftContext frame_left() {
		Frame_leftContext _localctx = new Frame_leftContext(Context, State);
		EnterRule(_localctx, 126, RULE_frame_left);
		try {
			State = 1141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1131; expr(0);
				State = 1132; Match(PRECEDING);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1134; expr(0);
				State = 1135; Match(FOLLOWING);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 1137; Match(CURRENT);
				State = 1138; Match(ROW);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 1139; Match(UNBOUNDED);
				State = 1140; Match(PRECEDING);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_rightContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PRECEDING() { return GetToken(ElasticParser.PRECEDING, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(ElasticParser.FOLLOWING, 0); }
		public ITerminalNode CURRENT() { return GetToken(ElasticParser.CURRENT, 0); }
		public ITerminalNode ROW() { return GetToken(ElasticParser.ROW, 0); }
		public ITerminalNode UNBOUNDED() { return GetToken(ElasticParser.UNBOUNDED, 0); }
		public Frame_rightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_right; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_right(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_rightContext frame_right() {
		Frame_rightContext _localctx = new Frame_rightContext(Context, State);
		EnterRule(_localctx, 128, RULE_frame_right);
		try {
			State = 1153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1143; expr(0);
				State = 1144; Match(PRECEDING);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1146; expr(0);
				State = 1147; Match(FOLLOWING);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 1149; Match(CURRENT);
				State = 1150; Match(ROW);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 1151; Match(UNBOUNDED);
				State = 1152; Match(FOLLOWING);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_singleContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PRECEDING() { return GetToken(ElasticParser.PRECEDING, 0); }
		public ITerminalNode UNBOUNDED() { return GetToken(ElasticParser.UNBOUNDED, 0); }
		public ITerminalNode CURRENT() { return GetToken(ElasticParser.CURRENT, 0); }
		public ITerminalNode ROW() { return GetToken(ElasticParser.ROW, 0); }
		public Frame_singleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_single; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_single(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_singleContext frame_single() {
		Frame_singleContext _localctx = new Frame_singleContext(Context, State);
		EnterRule(_localctx, 130, RULE_frame_single);
		try {
			State = 1162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1155; expr(0);
				State = 1156; Match(PRECEDING);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1158; Match(UNBOUNDED);
				State = 1159; Match(PRECEDING);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 1160; Match(CURRENT);
				State = 1161; Match(ROW);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_functionContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode OVER() { return GetToken(ElasticParser.OVER, 0); }
		public Order_by_expr_asc_descContext order_by_expr_asc_desc() {
			return GetRuleContext<Order_by_expr_asc_descContext>(0);
		}
		public ITerminalNode FIRST_VALUE() { return GetToken(ElasticParser.FIRST_VALUE, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(ElasticParser.LAST_VALUE, 0); }
		public Partition_byContext partition_by() {
			return GetRuleContext<Partition_byContext>(0);
		}
		public Frame_clauseContext frame_clause() {
			return GetRuleContext<Frame_clauseContext>(0);
		}
		public ITerminalNode CUME_DIST() { return GetToken(ElasticParser.CUME_DIST, 0); }
		public ITerminalNode PERCENT_RANK() { return GetToken(ElasticParser.PERCENT_RANK, 0); }
		public Order_by_exprContext order_by_expr() {
			return GetRuleContext<Order_by_exprContext>(0);
		}
		public ITerminalNode DENSE_RANK() { return GetToken(ElasticParser.DENSE_RANK, 0); }
		public ITerminalNode RANK() { return GetToken(ElasticParser.RANK, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(ElasticParser.ROW_NUMBER, 0); }
		public ITerminalNode LAG() { return GetToken(ElasticParser.LAG, 0); }
		public ITerminalNode LEAD() { return GetToken(ElasticParser.LEAD, 0); }
		public OffsetContext offset() {
			return GetRuleContext<OffsetContext>(0);
		}
		public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		public ITerminalNode NTH_VALUE() { return GetToken(ElasticParser.NTH_VALUE, 0); }
		public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public ITerminalNode NTILE() { return GetToken(ElasticParser.NTILE, 0); }
		public Window_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_functionContext window_function() {
		Window_functionContext _localctx = new Window_functionContext(Context, State);
		EnterRule(_localctx, 132, RULE_window_function);
		int _la;
		try {
			State = 1249;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FIRST_VALUE:
			case LAST_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1164;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1165; Match(OPEN_PAR);
				State = 1166; expr(0);
				State = 1167; Match(CLOSE_PAR);
				State = 1168; Match(OVER);
				State = 1169; Match(OPEN_PAR);
				State = 1171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1170; partition_by();
					}
				}

				State = 1173; order_by_expr_asc_desc();
				State = 1175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (ROWS - 127)) | (1L << (RANGE - 127)) | (1L << (GROUPS - 127)))) != 0)) {
					{
					State = 1174; frame_clause();
					}
				}

				State = 1177; Match(CLOSE_PAR);
				}
				break;
			case CUME_DIST:
			case PERCENT_RANK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1179;
				_la = TokenStream.LA(1);
				if ( !(_la==CUME_DIST || _la==PERCENT_RANK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1180; Match(OPEN_PAR);
				State = 1181; Match(CLOSE_PAR);
				State = 1182; Match(OVER);
				State = 1183; Match(OPEN_PAR);
				State = 1185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1184; partition_by();
					}
				}

				State = 1188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 1187; order_by_expr();
					}
				}

				State = 1190; Match(CLOSE_PAR);
				}
				break;
			case DENSE_RANK:
			case RANK:
			case ROW_NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1191;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (DENSE_RANK - 159)) | (1L << (RANK - 159)) | (1L << (ROW_NUMBER - 159)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1192; Match(OPEN_PAR);
				State = 1193; Match(CLOSE_PAR);
				State = 1194; Match(OVER);
				State = 1195; Match(OPEN_PAR);
				State = 1197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1196; partition_by();
					}
				}

				State = 1199; order_by_expr_asc_desc();
				State = 1200; Match(CLOSE_PAR);
				}
				break;
			case LAG:
			case LEAD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1202;
				_la = TokenStream.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1203; Match(OPEN_PAR);
				State = 1204; expr(0);
				State = 1206;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
				case 1:
					{
					State = 1205; offset();
					}
					break;
				}
				State = 1209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1208; default_value();
					}
				}

				State = 1211; Match(CLOSE_PAR);
				State = 1212; Match(OVER);
				State = 1213; Match(OPEN_PAR);
				State = 1215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1214; partition_by();
					}
				}

				State = 1217; order_by_expr_asc_desc();
				State = 1218; Match(CLOSE_PAR);
				}
				break;
			case NTH_VALUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1220; Match(NTH_VALUE);
				State = 1221; Match(OPEN_PAR);
				State = 1222; expr(0);
				State = 1223; Match(COMMA);
				State = 1224; signed_number();
				State = 1225; Match(CLOSE_PAR);
				State = 1226; Match(OVER);
				State = 1227; Match(OPEN_PAR);
				State = 1229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1228; partition_by();
					}
				}

				State = 1231; order_by_expr_asc_desc();
				State = 1233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (ROWS - 127)) | (1L << (RANGE - 127)) | (1L << (GROUPS - 127)))) != 0)) {
					{
					State = 1232; frame_clause();
					}
				}

				State = 1235; Match(CLOSE_PAR);
				}
				break;
			case NTILE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1237; Match(NTILE);
				State = 1238; Match(OPEN_PAR);
				State = 1239; expr(0);
				State = 1240; Match(CLOSE_PAR);
				State = 1241; Match(OVER);
				State = 1242; Match(OPEN_PAR);
				State = 1244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1243; partition_by();
					}
				}

				State = 1246; order_by_expr_asc_desc();
				State = 1247; Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OffsetContext : ParserRuleContext {
		public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public OffsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offset; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOffset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OffsetContext offset() {
		OffsetContext _localctx = new OffsetContext(Context, State);
		EnterRule(_localctx, 134, RULE_offset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1251; Match(COMMA);
			State = 1252; signed_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_valueContext : ParserRuleContext {
		public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_valueContext default_value() {
		Default_valueContext _localctx = new Default_valueContext(Context, State);
		EnterRule(_localctx, 136, RULE_default_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1254; Match(COMMA);
			State = 1255; signed_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_byContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(ElasticParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(ElasticParser.BY, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Partition_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_by; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartition_by(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partition_byContext partition_by() {
		Partition_byContext _localctx = new Partition_byContext(Context, State);
		EnterRule(_localctx, 138, RULE_partition_by);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1257; Match(PARTITION);
			State = 1258; Match(BY);
			State = 1260;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1259; expr(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1262;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_exprContext : ParserRuleContext {
		public ITerminalNode ORDER() { return GetToken(ElasticParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(ElasticParser.BY, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Order_by_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_exprContext order_by_expr() {
		Order_by_exprContext _localctx = new Order_by_exprContext(Context, State);
		EnterRule(_localctx, 140, RULE_order_by_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1264; Match(ORDER);
			State = 1265; Match(BY);
			State = 1267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1266; expr(0);
				}
				}
				State = 1269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_PAR) | (1L << PLUS) | (1L << MINUS) | (1L << TILDE) | (1L << ABORT) | (1L << ACTION) | (1L << ADD) | (1L << AFTER) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << AS) | (1L << ASC) | (1L << ATTACH) | (1L << AUTOINCREMENT) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHECK) | (1L << COLLATE) | (1L << COLUMN) | (1L << COMMIT) | (1L << CONFLICT) | (1L << CONSTRAINT) | (1L << CREATE) | (1L << CROSS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DEFERRABLE) | (1L << DEFERRED) | (1L << DELETE) | (1L << DESC) | (1L << DETACH) | (1L << DISTINCT) | (1L << DROP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EACH - 64)) | (1L << (ELSE - 64)) | (1L << (END - 64)) | (1L << (ESCAPE - 64)) | (1L << (EXCEPT - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXISTS - 64)) | (1L << (EXPLAIN - 64)) | (1L << (FAIL - 64)) | (1L << (FOR - 64)) | (1L << (FOREIGN - 64)) | (1L << (FROM - 64)) | (1L << (FULL - 64)) | (1L << (GLOB - 64)) | (1L << (GROUP - 64)) | (1L << (HAVING - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IN - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXED - 64)) | (1L << (INITIALLY - 64)) | (1L << (INNER - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INTERSECT - 64)) | (1L << (INTO - 64)) | (1L << (IS - 64)) | (1L << (ISNULL - 64)) | (1L << (JOIN - 64)) | (1L << (KEY - 64)) | (1L << (LEFT - 64)) | (1L << (LIKE - 64)) | (1L << (LIMIT - 64)) | (1L << (MATCH - 64)) | (1L << (NATURAL - 64)) | (1L << (NO - 64)) | (1L << (NOT - 64)) | (1L << (NOTNULL - 64)) | (1L << (NULL_ - 64)) | (1L << (OF - 64)) | (1L << (OFFSET - 64)) | (1L << (ON - 64)) | (1L << (OR - 64)) | (1L << (ORDER - 64)) | (1L << (OUTER - 64)) | (1L << (PLAN - 64)) | (1L << (PRAGMA - 64)) | (1L << (PRIMARY - 64)) | (1L << (QUERY - 64)) | (1L << (RAISE - 64)) | (1L << (RECURSIVE - 64)) | (1L << (REFERENCES - 64)) | (1L << (REGEXP - 64)) | (1L << (REINDEX - 64)) | (1L << (RELEASE - 64)) | (1L << (RENAME - 64)) | (1L << (REPLACE - 64)) | (1L << (RESTRICT - 64)) | (1L << (RIGHT - 64)) | (1L << (ROLLBACK - 64)) | (1L << (ROW - 64)) | (1L << (ROWS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (SAVEPOINT - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (TABLE - 128)) | (1L << (TEMP - 128)) | (1L << (TEMPORARY - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRANSACTION - 128)) | (1L << (TRIGGER - 128)) | (1L << (UNION - 128)) | (1L << (UNIQUE - 128)) | (1L << (UPDATE - 128)) | (1L << (USING - 128)) | (1L << (VACUUM - 128)) | (1L << (VALUES - 128)) | (1L << (VIEW - 128)) | (1L << (VIRTUAL - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (WITH - 128)) | (1L << (WITHOUT - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (OVER - 128)) | (1L << (PARTITION - 128)) | (1L << (RANGE - 128)) | (1L << (PRECEDING - 128)) | (1L << (UNBOUNDED - 128)) | (1L << (CURRENT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (CUME_DIST - 128)) | (1L << (DENSE_RANK - 128)) | (1L << (LAG - 128)) | (1L << (LAST_VALUE - 128)) | (1L << (LEAD - 128)) | (1L << (NTH_VALUE - 128)) | (1L << (NTILE - 128)) | (1L << (PERCENT_RANK - 128)) | (1L << (RANK - 128)) | (1L << (ROW_NUMBER - 128)) | (1L << (GENERATED - 128)) | (1L << (ALWAYS - 128)) | (1L << (STORED - 128)) | (1L << (TRUE_ - 128)) | (1L << (FALSE_ - 128)) | (1L << (WINDOW - 128)) | (1L << (NULLS - 128)) | (1L << (FIRST - 128)) | (1L << (LAST - 128)) | (1L << (FILTER - 128)) | (1L << (GROUPS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (IDENTIFIER - 128)) | (1L << (NUMERIC_LITERAL - 128)) | (1L << (BIND_PARAMETER - 128)) | (1L << (STRING_LITERAL - 128)) | (1L << (BLOB_LITERAL - 128)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_expr_asc_descContext : ParserRuleContext {
		public ITerminalNode ORDER() { return GetToken(ElasticParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(ElasticParser.BY, 0); }
		public Order_by_expr_asc_descContext order_by_expr_asc_desc() {
			return GetRuleContext<Order_by_expr_asc_descContext>(0);
		}
		public Order_by_expr_asc_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_expr_asc_desc; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_expr_asc_desc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_expr_asc_descContext order_by_expr_asc_desc() {
		Order_by_expr_asc_descContext _localctx = new Order_by_expr_asc_descContext(Context, State);
		EnterRule(_localctx, 142, RULE_order_by_expr_asc_desc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1271; Match(ORDER);
			State = 1272; Match(BY);
			State = 1273; order_by_expr_asc_desc();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initial_selectContext : ParserRuleContext {
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Initial_selectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initial_select; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitial_select(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Initial_selectContext initial_select() {
		Initial_selectContext _localctx = new Initial_selectContext(Context, State);
		EnterRule(_localctx, 144, RULE_initial_select);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1275; select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recursive_selectContext : ParserRuleContext {
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Recursive_selectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recursive_select; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecursive_select(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Recursive_selectContext recursive_select() {
		Recursive_selectContext _localctx = new Recursive_selectContext(Context, State);
		EnterRule(_localctx, 146, RULE_recursive_select);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1277; select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(ElasticParser.NOT, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 148, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1279;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << TILDE))) != 0) || _la==NOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_messageContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(ElasticParser.STRING_LITERAL, 0); }
		public Error_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_message; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_message(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_messageContext error_message() {
		Error_messageContext _localctx = new Error_messageContext(Context, State);
		EnterRule(_localctx, 150, RULE_error_message);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1281; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_argumentContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Column_defContext column_def() {
			return GetRuleContext<Column_defContext>(0);
		}
		public Module_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_argument; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_argumentContext module_argument() {
		Module_argumentContext _localctx = new Module_argumentContext(Context, State);
		EnterRule(_localctx, 152, RULE_module_argument);
		try {
			State = 1285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1283; expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1284; column_def();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ElasticParser.IDENTIFIER, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(ElasticParser.STRING_LITERAL, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(Context, State);
		EnterRule(_localctx, 154, RULE_column_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1287;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==STRING_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode ABORT() { return GetToken(ElasticParser.ABORT, 0); }
		public ITerminalNode ACTION() { return GetToken(ElasticParser.ACTION, 0); }
		public ITerminalNode ADD() { return GetToken(ElasticParser.ADD, 0); }
		public ITerminalNode AFTER() { return GetToken(ElasticParser.AFTER, 0); }
		public ITerminalNode ALL() { return GetToken(ElasticParser.ALL, 0); }
		public ITerminalNode ALTER() { return GetToken(ElasticParser.ALTER, 0); }
		public ITerminalNode ANALYZE() { return GetToken(ElasticParser.ANALYZE, 0); }
		public ITerminalNode AND() { return GetToken(ElasticParser.AND, 0); }
		public ITerminalNode AS() { return GetToken(ElasticParser.AS, 0); }
		public ITerminalNode ASC() { return GetToken(ElasticParser.ASC, 0); }
		public ITerminalNode ATTACH() { return GetToken(ElasticParser.ATTACH, 0); }
		public ITerminalNode AUTOINCREMENT() { return GetToken(ElasticParser.AUTOINCREMENT, 0); }
		public ITerminalNode BEFORE() { return GetToken(ElasticParser.BEFORE, 0); }
		public ITerminalNode BEGIN() { return GetToken(ElasticParser.BEGIN, 0); }
		public ITerminalNode BETWEEN() { return GetToken(ElasticParser.BETWEEN, 0); }
		public ITerminalNode BY() { return GetToken(ElasticParser.BY, 0); }
		public ITerminalNode CASCADE() { return GetToken(ElasticParser.CASCADE, 0); }
		public ITerminalNode CASE() { return GetToken(ElasticParser.CASE, 0); }
		public ITerminalNode CAST() { return GetToken(ElasticParser.CAST, 0); }
		public ITerminalNode CHECK() { return GetToken(ElasticParser.CHECK, 0); }
		public ITerminalNode COLLATE() { return GetToken(ElasticParser.COLLATE, 0); }
		public ITerminalNode COLUMN() { return GetToken(ElasticParser.COLUMN, 0); }
		public ITerminalNode COMMIT() { return GetToken(ElasticParser.COMMIT, 0); }
		public ITerminalNode CONFLICT() { return GetToken(ElasticParser.CONFLICT, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(ElasticParser.CONSTRAINT, 0); }
		public ITerminalNode CREATE() { return GetToken(ElasticParser.CREATE, 0); }
		public ITerminalNode CROSS() { return GetToken(ElasticParser.CROSS, 0); }
		public ITerminalNode CURRENT_DATE() { return GetToken(ElasticParser.CURRENT_DATE, 0); }
		public ITerminalNode CURRENT_TIME() { return GetToken(ElasticParser.CURRENT_TIME, 0); }
		public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(ElasticParser.CURRENT_TIMESTAMP, 0); }
		public ITerminalNode DATABASE() { return GetToken(ElasticParser.DATABASE, 0); }
		public ITerminalNode DEFAULT() { return GetToken(ElasticParser.DEFAULT, 0); }
		public ITerminalNode DEFERRABLE() { return GetToken(ElasticParser.DEFERRABLE, 0); }
		public ITerminalNode DEFERRED() { return GetToken(ElasticParser.DEFERRED, 0); }
		public ITerminalNode DELETE() { return GetToken(ElasticParser.DELETE, 0); }
		public ITerminalNode DESC() { return GetToken(ElasticParser.DESC, 0); }
		public ITerminalNode DETACH() { return GetToken(ElasticParser.DETACH, 0); }
		public ITerminalNode DISTINCT() { return GetToken(ElasticParser.DISTINCT, 0); }
		public ITerminalNode DROP() { return GetToken(ElasticParser.DROP, 0); }
		public ITerminalNode EACH() { return GetToken(ElasticParser.EACH, 0); }
		public ITerminalNode ELSE() { return GetToken(ElasticParser.ELSE, 0); }
		public ITerminalNode END() { return GetToken(ElasticParser.END, 0); }
		public ITerminalNode ESCAPE() { return GetToken(ElasticParser.ESCAPE, 0); }
		public ITerminalNode EXCEPT() { return GetToken(ElasticParser.EXCEPT, 0); }
		public ITerminalNode EXCLUSIVE() { return GetToken(ElasticParser.EXCLUSIVE, 0); }
		public ITerminalNode EXISTS() { return GetToken(ElasticParser.EXISTS, 0); }
		public ITerminalNode EXPLAIN() { return GetToken(ElasticParser.EXPLAIN, 0); }
		public ITerminalNode FAIL() { return GetToken(ElasticParser.FAIL, 0); }
		public ITerminalNode FOR() { return GetToken(ElasticParser.FOR, 0); }
		public ITerminalNode FOREIGN() { return GetToken(ElasticParser.FOREIGN, 0); }
		public ITerminalNode FROM() { return GetToken(ElasticParser.FROM, 0); }
		public ITerminalNode FULL() { return GetToken(ElasticParser.FULL, 0); }
		public ITerminalNode GLOB() { return GetToken(ElasticParser.GLOB, 0); }
		public ITerminalNode GROUP() { return GetToken(ElasticParser.GROUP, 0); }
		public ITerminalNode HAVING() { return GetToken(ElasticParser.HAVING, 0); }
		public ITerminalNode IF() { return GetToken(ElasticParser.IF, 0); }
		public ITerminalNode IGNORE() { return GetToken(ElasticParser.IGNORE, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(ElasticParser.IMMEDIATE, 0); }
		public ITerminalNode IN() { return GetToken(ElasticParser.IN, 0); }
		public ITerminalNode INDEX() { return GetToken(ElasticParser.INDEX, 0); }
		public ITerminalNode INDEXED() { return GetToken(ElasticParser.INDEXED, 0); }
		public ITerminalNode INITIALLY() { return GetToken(ElasticParser.INITIALLY, 0); }
		public ITerminalNode INNER() { return GetToken(ElasticParser.INNER, 0); }
		public ITerminalNode INSERT() { return GetToken(ElasticParser.INSERT, 0); }
		public ITerminalNode INSTEAD() { return GetToken(ElasticParser.INSTEAD, 0); }
		public ITerminalNode INTERSECT() { return GetToken(ElasticParser.INTERSECT, 0); }
		public ITerminalNode INTO() { return GetToken(ElasticParser.INTO, 0); }
		public ITerminalNode IS() { return GetToken(ElasticParser.IS, 0); }
		public ITerminalNode ISNULL() { return GetToken(ElasticParser.ISNULL, 0); }
		public ITerminalNode JOIN() { return GetToken(ElasticParser.JOIN, 0); }
		public ITerminalNode KEY() { return GetToken(ElasticParser.KEY, 0); }
		public ITerminalNode LEFT() { return GetToken(ElasticParser.LEFT, 0); }
		public ITerminalNode LIKE() { return GetToken(ElasticParser.LIKE, 0); }
		public ITerminalNode LIMIT() { return GetToken(ElasticParser.LIMIT, 0); }
		public ITerminalNode MATCH() { return GetToken(ElasticParser.MATCH, 0); }
		public ITerminalNode NATURAL() { return GetToken(ElasticParser.NATURAL, 0); }
		public ITerminalNode NO() { return GetToken(ElasticParser.NO, 0); }
		public ITerminalNode NOT() { return GetToken(ElasticParser.NOT, 0); }
		public ITerminalNode NOTNULL() { return GetToken(ElasticParser.NOTNULL, 0); }
		public ITerminalNode NULL_() { return GetToken(ElasticParser.NULL_, 0); }
		public ITerminalNode OF() { return GetToken(ElasticParser.OF, 0); }
		public ITerminalNode OFFSET() { return GetToken(ElasticParser.OFFSET, 0); }
		public ITerminalNode ON() { return GetToken(ElasticParser.ON, 0); }
		public ITerminalNode OR() { return GetToken(ElasticParser.OR, 0); }
		public ITerminalNode ORDER() { return GetToken(ElasticParser.ORDER, 0); }
		public ITerminalNode OUTER() { return GetToken(ElasticParser.OUTER, 0); }
		public ITerminalNode PLAN() { return GetToken(ElasticParser.PLAN, 0); }
		public ITerminalNode PRAGMA() { return GetToken(ElasticParser.PRAGMA, 0); }
		public ITerminalNode PRIMARY() { return GetToken(ElasticParser.PRIMARY, 0); }
		public ITerminalNode QUERY() { return GetToken(ElasticParser.QUERY, 0); }
		public ITerminalNode RAISE() { return GetToken(ElasticParser.RAISE, 0); }
		public ITerminalNode RECURSIVE() { return GetToken(ElasticParser.RECURSIVE, 0); }
		public ITerminalNode REFERENCES() { return GetToken(ElasticParser.REFERENCES, 0); }
		public ITerminalNode REGEXP() { return GetToken(ElasticParser.REGEXP, 0); }
		public ITerminalNode REINDEX() { return GetToken(ElasticParser.REINDEX, 0); }
		public ITerminalNode RELEASE() { return GetToken(ElasticParser.RELEASE, 0); }
		public ITerminalNode RENAME() { return GetToken(ElasticParser.RENAME, 0); }
		public ITerminalNode REPLACE() { return GetToken(ElasticParser.REPLACE, 0); }
		public ITerminalNode RESTRICT() { return GetToken(ElasticParser.RESTRICT, 0); }
		public ITerminalNode RIGHT() { return GetToken(ElasticParser.RIGHT, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(ElasticParser.ROLLBACK, 0); }
		public ITerminalNode ROW() { return GetToken(ElasticParser.ROW, 0); }
		public ITerminalNode ROWS() { return GetToken(ElasticParser.ROWS, 0); }
		public ITerminalNode SAVEPOINT() { return GetToken(ElasticParser.SAVEPOINT, 0); }
		public ITerminalNode SELECT() { return GetToken(ElasticParser.SELECT, 0); }
		public ITerminalNode SET() { return GetToken(ElasticParser.SET, 0); }
		public ITerminalNode TABLE() { return GetToken(ElasticParser.TABLE, 0); }
		public ITerminalNode TEMP() { return GetToken(ElasticParser.TEMP, 0); }
		public ITerminalNode TEMPORARY() { return GetToken(ElasticParser.TEMPORARY, 0); }
		public ITerminalNode THEN() { return GetToken(ElasticParser.THEN, 0); }
		public ITerminalNode TO() { return GetToken(ElasticParser.TO, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(ElasticParser.TRANSACTION, 0); }
		public ITerminalNode TRIGGER() { return GetToken(ElasticParser.TRIGGER, 0); }
		public ITerminalNode UNION() { return GetToken(ElasticParser.UNION, 0); }
		public ITerminalNode UNIQUE() { return GetToken(ElasticParser.UNIQUE, 0); }
		public ITerminalNode UPDATE() { return GetToken(ElasticParser.UPDATE, 0); }
		public ITerminalNode USING() { return GetToken(ElasticParser.USING, 0); }
		public ITerminalNode VACUUM() { return GetToken(ElasticParser.VACUUM, 0); }
		public ITerminalNode VALUES() { return GetToken(ElasticParser.VALUES, 0); }
		public ITerminalNode VIEW() { return GetToken(ElasticParser.VIEW, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(ElasticParser.VIRTUAL, 0); }
		public ITerminalNode WHEN() { return GetToken(ElasticParser.WHEN, 0); }
		public ITerminalNode WHERE() { return GetToken(ElasticParser.WHERE, 0); }
		public ITerminalNode WITH() { return GetToken(ElasticParser.WITH, 0); }
		public ITerminalNode WITHOUT() { return GetToken(ElasticParser.WITHOUT, 0); }
		public ITerminalNode FIRST_VALUE() { return GetToken(ElasticParser.FIRST_VALUE, 0); }
		public ITerminalNode OVER() { return GetToken(ElasticParser.OVER, 0); }
		public ITerminalNode PARTITION() { return GetToken(ElasticParser.PARTITION, 0); }
		public ITerminalNode RANGE() { return GetToken(ElasticParser.RANGE, 0); }
		public ITerminalNode PRECEDING() { return GetToken(ElasticParser.PRECEDING, 0); }
		public ITerminalNode UNBOUNDED() { return GetToken(ElasticParser.UNBOUNDED, 0); }
		public ITerminalNode CURRENT() { return GetToken(ElasticParser.CURRENT, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(ElasticParser.FOLLOWING, 0); }
		public ITerminalNode CUME_DIST() { return GetToken(ElasticParser.CUME_DIST, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(ElasticParser.DENSE_RANK, 0); }
		public ITerminalNode LAG() { return GetToken(ElasticParser.LAG, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(ElasticParser.LAST_VALUE, 0); }
		public ITerminalNode LEAD() { return GetToken(ElasticParser.LEAD, 0); }
		public ITerminalNode NTH_VALUE() { return GetToken(ElasticParser.NTH_VALUE, 0); }
		public ITerminalNode NTILE() { return GetToken(ElasticParser.NTILE, 0); }
		public ITerminalNode PERCENT_RANK() { return GetToken(ElasticParser.PERCENT_RANK, 0); }
		public ITerminalNode RANK() { return GetToken(ElasticParser.RANK, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(ElasticParser.ROW_NUMBER, 0); }
		public ITerminalNode GENERATED() { return GetToken(ElasticParser.GENERATED, 0); }
		public ITerminalNode ALWAYS() { return GetToken(ElasticParser.ALWAYS, 0); }
		public ITerminalNode STORED() { return GetToken(ElasticParser.STORED, 0); }
		public ITerminalNode TRUE_() { return GetToken(ElasticParser.TRUE_, 0); }
		public ITerminalNode FALSE_() { return GetToken(ElasticParser.FALSE_, 0); }
		public ITerminalNode WINDOW() { return GetToken(ElasticParser.WINDOW, 0); }
		public ITerminalNode NULLS() { return GetToken(ElasticParser.NULLS, 0); }
		public ITerminalNode FIRST() { return GetToken(ElasticParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(ElasticParser.LAST, 0); }
		public ITerminalNode FILTER() { return GetToken(ElasticParser.FILTER, 0); }
		public ITerminalNode GROUPS() { return GetToken(ElasticParser.GROUPS, 0); }
		public ITerminalNode EXCLUDE() { return GetToken(ElasticParser.EXCLUDE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 156, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1289;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ACTION) | (1L << ADD) | (1L << AFTER) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << AS) | (1L << ASC) | (1L << ATTACH) | (1L << AUTOINCREMENT) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHECK) | (1L << COLLATE) | (1L << COLUMN) | (1L << COMMIT) | (1L << CONFLICT) | (1L << CONSTRAINT) | (1L << CREATE) | (1L << CROSS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DEFERRABLE) | (1L << DEFERRED) | (1L << DELETE) | (1L << DESC) | (1L << DETACH) | (1L << DISTINCT) | (1L << DROP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EACH - 64)) | (1L << (ELSE - 64)) | (1L << (END - 64)) | (1L << (ESCAPE - 64)) | (1L << (EXCEPT - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXISTS - 64)) | (1L << (EXPLAIN - 64)) | (1L << (FAIL - 64)) | (1L << (FOR - 64)) | (1L << (FOREIGN - 64)) | (1L << (FROM - 64)) | (1L << (FULL - 64)) | (1L << (GLOB - 64)) | (1L << (GROUP - 64)) | (1L << (HAVING - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IN - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXED - 64)) | (1L << (INITIALLY - 64)) | (1L << (INNER - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INTERSECT - 64)) | (1L << (INTO - 64)) | (1L << (IS - 64)) | (1L << (ISNULL - 64)) | (1L << (JOIN - 64)) | (1L << (KEY - 64)) | (1L << (LEFT - 64)) | (1L << (LIKE - 64)) | (1L << (LIMIT - 64)) | (1L << (MATCH - 64)) | (1L << (NATURAL - 64)) | (1L << (NO - 64)) | (1L << (NOT - 64)) | (1L << (NOTNULL - 64)) | (1L << (NULL_ - 64)) | (1L << (OF - 64)) | (1L << (OFFSET - 64)) | (1L << (ON - 64)) | (1L << (OR - 64)) | (1L << (ORDER - 64)) | (1L << (OUTER - 64)) | (1L << (PLAN - 64)) | (1L << (PRAGMA - 64)) | (1L << (PRIMARY - 64)) | (1L << (QUERY - 64)) | (1L << (RAISE - 64)) | (1L << (RECURSIVE - 64)) | (1L << (REFERENCES - 64)) | (1L << (REGEXP - 64)) | (1L << (REINDEX - 64)) | (1L << (RELEASE - 64)) | (1L << (RENAME - 64)) | (1L << (REPLACE - 64)) | (1L << (RESTRICT - 64)) | (1L << (RIGHT - 64)) | (1L << (ROLLBACK - 64)) | (1L << (ROW - 64)) | (1L << (ROWS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (SAVEPOINT - 128)) | (1L << (SELECT - 128)) | (1L << (SET - 128)) | (1L << (TABLE - 128)) | (1L << (TEMP - 128)) | (1L << (TEMPORARY - 128)) | (1L << (THEN - 128)) | (1L << (TO - 128)) | (1L << (TRANSACTION - 128)) | (1L << (TRIGGER - 128)) | (1L << (UNION - 128)) | (1L << (UNIQUE - 128)) | (1L << (UPDATE - 128)) | (1L << (USING - 128)) | (1L << (VACUUM - 128)) | (1L << (VALUES - 128)) | (1L << (VIEW - 128)) | (1L << (VIRTUAL - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (WITH - 128)) | (1L << (WITHOUT - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (OVER - 128)) | (1L << (PARTITION - 128)) | (1L << (RANGE - 128)) | (1L << (PRECEDING - 128)) | (1L << (UNBOUNDED - 128)) | (1L << (CURRENT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (CUME_DIST - 128)) | (1L << (DENSE_RANK - 128)) | (1L << (LAG - 128)) | (1L << (LAST_VALUE - 128)) | (1L << (LEAD - 128)) | (1L << (NTH_VALUE - 128)) | (1L << (NTILE - 128)) | (1L << (PERCENT_RANK - 128)) | (1L << (RANK - 128)) | (1L << (ROW_NUMBER - 128)) | (1L << (GENERATED - 128)) | (1L << (ALWAYS - 128)) | (1L << (STORED - 128)) | (1L << (TRUE_ - 128)) | (1L << (FALSE_ - 128)) | (1L << (WINDOW - 128)) | (1L << (NULLS - 128)) | (1L << (FIRST - 128)) | (1L << (LAST - 128)) | (1L << (FILTER - 128)) | (1L << (GROUPS - 128)) | (1L << (EXCLUDE - 128)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 158, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1291; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_function_nameContext : ParserRuleContext {
		public Table_function_nameContext table_function_name() {
			return GetRuleContext<Table_function_nameContext>(0);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public Full_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_function_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_function_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_function_nameContext full_function_name() {
		Full_function_nameContext _localctx = new Full_function_nameContext(Context, State);
		EnterRule(_localctx, 160, RULE_full_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1296;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				{
				State = 1293; schema_name();
				State = 1294; Match(DOT);
				}
				break;
			}
			State = 1298; table_function_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 162, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1300; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Schema_nameContext schema_name() {
		Schema_nameContext _localctx = new Schema_nameContext(Context, State);
		EnterRule(_localctx, 164, RULE_schema_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1302; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(Context, State);
		EnterRule(_localctx, 166, RULE_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1304; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_table_nameContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public Full_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_table_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_table_nameContext full_table_name() {
		Full_table_nameContext _localctx = new Full_table_nameContext(Context, State);
		EnterRule(_localctx, 168, RULE_full_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1309;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
			case 1:
				{
				State = 1306; schema_name();
				State = 1307; Match(DOT);
				}
				break;
			}
			State = 1311; table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullnameContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public FullnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullname; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullnameContext fullname() {
		FullnameContext _localctx = new FullnameContext(Context, State);
		EnterRule(_localctx, 170, RULE_fullname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1316;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
			case 1:
				{
				State = 1313; full_table_name();
				State = 1314; Match(DOT);
				}
				break;
			}
			State = 1318; column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(Context, State);
		EnterRule(_localctx, 172, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1320; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collation_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Collation_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collation_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollation_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collation_nameContext collation_name() {
		Collation_nameContext _localctx = new Collation_nameContext(Context, State);
		EnterRule(_localctx, 174, RULE_collation_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1322; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_tableContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Foreign_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_table; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_tableContext foreign_table() {
		Foreign_tableContext _localctx = new Foreign_tableContext(Context, State);
		EnterRule(_localctx, 176, RULE_foreign_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1324; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_nameContext index_name() {
		Index_nameContext _localctx = new Index_nameContext(Context, State);
		EnterRule(_localctx, 178, RULE_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1326; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public View_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_nameContext view_name() {
		View_nameContext _localctx = new View_nameContext(Context, State);
		EnterRule(_localctx, 180, RULE_view_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1328; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		Module_nameContext _localctx = new Module_nameContext(Context, State);
		EnterRule(_localctx, 182, RULE_module_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1330; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(Context, State);
		EnterRule(_localctx, 184, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1332; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Window_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_nameContext window_name() {
		Window_nameContext _localctx = new Window_nameContext(Context, State);
		EnterRule(_localctx, 186, RULE_window_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1334; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 188, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1336; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_window_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Base_window_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_window_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_window_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_window_nameContext base_window_name() {
		Base_window_nameContext _localctx = new Base_window_nameContext(Context, State);
		EnterRule(_localctx, 190, RULE_base_window_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1338; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_funcContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Simple_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_func; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_func(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_funcContext simple_func() {
		Simple_funcContext _localctx = new Simple_funcContext(Context, State);
		EnterRule(_localctx, 192, RULE_simple_func);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1340; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_funcContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Aggregate_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_func; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate_func(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_funcContext aggregate_func() {
		Aggregate_funcContext _localctx = new Aggregate_funcContext(Context, State);
		EnterRule(_localctx, 194, RULE_aggregate_func);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1342; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_function_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_function_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_function_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_function_nameContext table_function_name() {
		Table_function_nameContext _localctx = new Table_function_nameContext(Context, State);
		EnterRule(_localctx, 196, RULE_table_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1344; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ElasticParser.IDENTIFIER, 0); }
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(ElasticParser.STRING_LITERAL, 0); }
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElasticParserVisitor<TResult> typedVisitor = visitor as IElasticParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_nameContext any_name() {
		Any_nameContext _localctx = new Any_nameContext(Context, State);
		EnterRule(_localctx, 198, RULE_any_name);
		try {
			State = 1353;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1346; Match(IDENTIFIER);
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case AS:
			case ASC:
			case ATTACH:
			case AUTOINCREMENT:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case COMMIT:
			case CONFLICT:
			case CONSTRAINT:
			case CREATE:
			case CROSS:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATABASE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DELETE:
			case DESC:
			case DETACH:
			case DISTINCT:
			case DROP:
			case EACH:
			case ELSE:
			case END:
			case ESCAPE:
			case EXCEPT:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case FAIL:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case GLOB:
			case GROUP:
			case HAVING:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INDEX:
			case INDEXED:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LEFT:
			case LIKE:
			case LIMIT:
			case MATCH:
			case NATURAL:
			case NO:
			case NOT:
			case NOTNULL:
			case NULL_:
			case OF:
			case OFFSET:
			case ON:
			case OR:
			case ORDER:
			case OUTER:
			case PLAN:
			case PRAGMA:
			case PRIMARY:
			case QUERY:
			case RAISE:
			case RECURSIVE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESTRICT:
			case RIGHT:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case SAVEPOINT:
			case SELECT:
			case SET:
			case TABLE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TO:
			case TRANSACTION:
			case TRIGGER:
			case UNION:
			case UNIQUE:
			case UPDATE:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WITH:
			case WITHOUT:
			case FIRST_VALUE:
			case OVER:
			case PARTITION:
			case RANGE:
			case PRECEDING:
			case UNBOUNDED:
			case CURRENT:
			case FOLLOWING:
			case CUME_DIST:
			case DENSE_RANK:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case NTH_VALUE:
			case NTILE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case GENERATED:
			case ALWAYS:
			case STORED:
			case TRUE_:
			case FALSE_:
			case WINDOW:
			case NULLS:
			case FIRST:
			case LAST:
			case FILTER:
			case GROUPS:
			case EXCLUDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1347; keyword();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1348; Match(STRING_LITERAL);
				}
				break;
			case OPEN_PAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1349; Match(OPEN_PAR);
				State = 1350; any_name();
				State = 1351; Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 20: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 12);
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xC2', '\x54E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x3', '\x2', '\x3', '\x2', 
		'\a', '\x2', '\xCD', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xD0', '\v', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\a', '\x4', '\xD8', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '\xDB', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x6', '\x4', 
		'\xDF', '\n', '\x4', '\r', '\x4', '\xE', '\x4', '\xE0', '\x3', '\x4', 
		'\a', '\x4', '\xE4', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\xE7', '\v', 
		'\x4', '\x3', '\x4', '\a', '\x4', '\xEA', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '\xED', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\xF2', '\n', '\x5', '\x5', '\x5', '\xF4', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\xFB', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x102', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\x106', '\n', '\a', '\x3', '\a', '\x5', 
		'\a', '\x109', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x10D', 
		'\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\x113', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\x118', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\a', '\b', '\x11F', '\n', '\b', '\f', '\b', '\xE', 
		'\b', '\x122', '\v', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\x126', 
		'\n', '\b', '\f', '\b', '\xE', '\b', '\x129', '\v', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\x12E', '\n', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '\x132', '\n', '\b', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\x136', '\n', '\t', '\x3', '\t', '\a', '\t', '\x139', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '\x13C', '\v', '\t', '\x3', '\n', '\x6', 
		'\n', '\x13F', '\n', '\n', '\r', '\n', '\xE', '\n', '\x140', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x14D', '\n', 
		'\n', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x151', '\n', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x156', '\n', '\v', '\x3', 
		'\v', '\x5', '\v', '\x159', '\n', '\v', '\x3', '\v', '\x5', '\v', '\x15C', 
		'\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x161', 
		'\n', '\v', '\x3', '\v', '\x5', '\v', '\x164', '\n', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', '\x172', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x5', '\v', '\x179', '\n', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x180', 
		'\n', '\v', '\x5', '\v', '\x182', '\n', '\v', '\x3', '\f', '\x5', '\f', 
		'\x185', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\x18B', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\x190', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\a', '\r', '\x196', '\n', '\r', '\f', '\r', '\xE', '\r', 
		'\x199', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x19D', '\n', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\x1A9', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x1AE', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x1B8', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', 
		'\xE', '\x1BC', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x1BF', '\v', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\x1C2', '\n', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x1C7', '\n', '\xE', '\x5', 
		'\xE', '\x1C9', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x1D1', '\n', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\x1D7', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x1DC', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\x1E0', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x1EB', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\a', '\x11', '\x1F4', '\n', '\x11', '\f', '\x11', '\xE', '\x11', 
		'\x1F7', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x1FB', 
		'\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x1FF', '\n', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\x20D', '\n', '\x12', 
		'\f', '\x12', '\xE', '\x12', '\x210', '\v', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\x214', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\x21C', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x223', '\n', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x23F', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', 
		'\x16', '\x243', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x24B', '\n', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', 
		'\x16', '\x25B', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x5', '\x16', '\x261', '\n', '\x16', '\a', '\x16', '\x263', 
		'\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x266', '\v', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x26B', '\n', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x26F', '\n', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x273', '\n', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x276', '\n', '\x17', '\x3', '\x18', '\x5', '\x18', '\x279', 
		'\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x27F', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x286', '\n', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x28A', '\n', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x6', '\x19', '\x28E', '\n', '\x19', '\r', '\x19', 
		'\xE', '\x19', '\x28F', '\x3', '\x19', '\x5', '\x19', '\x293', '\n', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', 
		'\x29E', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1D', '\x5', '\x1D', '\x2A4', '\n', '\x1D', '\x3', '\x1D', '\x5', '\x1D', 
		'\x2A7', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', 
		'\x1E', '\x2B1', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x5', '\x1F', '\x2C1', '\n', '\x1F', '\x3', '\x1F', '\x5', 
		'\x1F', '\x2C4', '\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x2CE', 
		'\n', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '#', 
		'\x5', '#', '\x2D5', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x5', '#', '\x2DC', '\n', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x5', '#', '\x2E2', '\n', '#', '\x3', '#', '\x5', 
		'#', '\x2E5', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', 
		'\x2EA', '\n', '#', '\x3', '#', '\x5', '#', '\x2ED', '\n', '#', '\x3', 
		'#', '\x3', '#', '\x5', '#', '\x2F1', '\n', '#', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\a', '$', '\x2F9', '\n', 
		'$', '\f', '$', '\xE', '$', '\x2FC', '\v', '$', '\x3', '$', '\x3', '$', 
		'\x5', '$', '\x300', '\n', '$', '\x5', '$', '\x302', '\n', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', 
		'$', '\x30A', '\n', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x5', '$', '\x311', '\n', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\a', '$', '\x316', '\n', '$', '\f', '$', '\xE', '$', '\x319', '\v', 
		'$', '\x3', '$', '\x5', '$', '\x31C', '\n', '$', '\x5', '$', '\x31E', 
		'\n', '$', '\x3', '%', '\x5', '%', '\x321', '\n', '%', '\x3', '%', '\x3', 
		'%', '\a', '%', '\x325', '\n', '%', '\f', '%', '\xE', '%', '\x328', '\v', 
		'%', '\x3', '%', '\x5', '%', '\x32B', '\n', '%', '\x3', '%', '\x5', '%', 
		'\x32E', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', 
		'\'', '\x6', '\'', '\x335', '\n', '\'', '\r', '\'', '\xE', '\'', '\x336', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x33C', '\n', '(', '\x3', 
		')', '\x3', ')', '\x5', ')', '\x340', '\n', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\a', ')', '\x345', '\n', ')', '\f', ')', '\xE', ')', '\x348', 
		'\v', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x34C', '\n', ')', '\x3', 
		')', '\x5', ')', '\x34F', '\n', ')', '\x3', ')', '\x5', ')', '\x352', 
		'\n', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\a', ')', 
		'\x358', '\n', ')', '\f', ')', '\xE', ')', '\x35B', '\v', ')', '\x5', 
		')', '\x35D', '\n', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x361', 
		'\n', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\a', '*', '\x36B', '\n', '*', '\f', 
		'*', '\xE', '*', '\x36E', '\v', '*', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x5', '+', '\x374', '\n', '+', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\a', '.', '\x380', '\n', '.', '\f', '.', '\xE', '.', 
		'\x383', '\v', '.', '\x3', '/', '\x3', '/', '\x5', '/', '\x387', '\n', 
		'/', '\x3', '/', '\x5', '/', '\x38A', '\n', '/', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x391', '\n', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\a', '/', '\x398', 
		'\n', '/', '\f', '/', '\xE', '/', '\x39B', '\v', '/', '\x3', '/', '\x3', 
		'/', '\x5', '/', '\x39F', '\n', '/', '\x3', '/', '\x5', '/', '\x3A2', 
		'\n', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x3AC', '\n', '/', '\x3', 
		'/', '\x5', '/', '\x3AF', '\n', '/', '\x5', '/', '\x3B1', '\n', '/', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\a', '\x30', '\x3B6', '\n', '\x30', 
		'\f', '\x30', '\xE', '\x30', '\x3B9', '\v', '\x30', '\x3', '\x30', '\x5', 
		'\x30', '\x3BC', '\n', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', 
		'\x3C5', '\n', '\x31', '\x3', '\x31', '\x5', '\x31', '\x3C8', '\n', '\x31', 
		'\x5', '\x31', '\x3CA', '\n', '\x31', '\x3', '\x32', '\x3', '\x32', '\x5', 
		'\x32', '\x3CE', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', 
		'\x3D2', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x3D6', 
		'\n', '\x32', '\x3', '\x32', '\x5', '\x32', '\x3D9', '\n', '\x32', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x3DF', 
		'\n', '\x33', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x3E3', '\n', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x3E7', '\n', '\x34', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\a', '\x35', 
		'\x3ED', '\n', '\x35', '\f', '\x35', '\xE', '\x35', '\x3F0', '\v', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', '\x37', 
		'\x5', '\x37', '\x3FC', '\n', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x5', '\x37', '\x401', '\n', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\a', '\x37', '\x408', '\n', 
		'\x37', '\f', '\x37', '\xE', '\x37', '\x40B', '\v', '\x37', '\x3', '\x37', 
		'\x5', '\x37', '\x40E', '\n', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x416', 
		'\n', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', 
		'\x41B', '\n', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\a', '\x38', '\x422', '\n', '\x38', '\f', '\x38', 
		'\xE', '\x38', '\x425', '\v', '\x38', '\x5', '\x38', '\x427', '\n', '\x38', 
		'\x3', '\x38', '\x5', '\x38', '\x42A', '\n', '\x38', '\x3', '\x38', '\x5', 
		'\x38', '\x42D', '\n', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x5', '\x39', '\x437', '\n', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x440', '\n', 
		':', '\x3', ';', '\x3', ';', '\x5', ';', '\x444', '\n', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\a', ';', '\x449', '\n', ';', '\f', ';', '\xE', 
		';', '\x44C', '\v', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', 
		'\x3', '<', '\a', '<', '\x453', '\n', '<', '\f', '<', '\xE', '<', '\x456', 
		'\v', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x45B', '\n', 
		'=', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', '\x3', 
		'?', '\x5', '?', '\x463', '\n', '?', '\x3', '?', '\x5', '?', '\x466', 
		'\n', '?', '\x3', '?', '\x3', '?', '\x5', '?', '\x46A', '\n', '?', '\x3', 
		'@', '\x3', '@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x5', '\x41', '\x478', '\n', '\x41', '\x3', '\x42', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x5', '\x42', '\x484', 
		'\n', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x48D', '\n', 
		'\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x496', '\n', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x49A', '\n', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x4A4', '\n', '\x44', 
		'\x3', '\x44', '\x5', '\x44', '\x4A7', '\n', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x5', '\x44', '\x4B0', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x5', '\x44', '\x4B9', '\n', '\x44', '\x3', '\x44', '\x5', '\x44', '\x4BC', 
		'\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x5', '\x44', '\x4C2', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', 
		'\x44', '\x4D0', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', 
		'\x4D4', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x5', '\x44', '\x4DF', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x5', '\x44', '\x4E4', '\n', '\x44', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x6', 'G', '\x4EF', '\n', 'G', '\r', 'G', 
		'\xE', 'G', '\x4F0', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x6', 'H', '\x4F6', 
		'\n', 'H', '\r', 'H', '\xE', 'H', '\x4F7', '\x3', 'I', '\x3', 'I', '\x3', 
		'I', '\x3', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'K', '\x3', 'K', '\x3', 
		'L', '\x3', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 'N', '\x5', 
		'N', '\x508', '\n', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'P', '\x3', 'P', 
		'\x3', 'Q', '\x3', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x5', 'R', 
		'\x513', '\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'S', '\x3', 'S', '\x3', 
		'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x5', 'V', '\x520', '\n', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'W', 
		'\x3', 'W', '\x3', 'W', '\x5', 'W', '\x527', '\n', 'W', '\x3', 'W', '\x3', 
		'W', '\x3', 'X', '\x3', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Z', '\x3', 
		'Z', '\x3', '[', '\x3', '[', '\x3', '\\', '\x3', '\\', '\x3', ']', '\x3', 
		']', '\x3', '^', '\x3', '^', '\x3', '_', '\x3', '_', '\x3', '`', '\x3', 
		'`', '\x3', '\x61', '\x3', '\x61', '\x3', '\x62', '\x3', '\x62', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x64', '\x3', '\x64', '\x3', '\x65', '\x3', 
		'\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', 
		'\x65', '\x5', '\x65', '\x54C', '\n', '\x65', '\x3', '\x65', '\x2', '\x3', 
		'*', '\x66', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 
		'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', 
		'\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x98', '\x9A', 
		'\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', '\xAA', '\xAC', 
		'\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', '\xBA', '\xBC', '\xBE', 
		'\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\x2', '\x1B', '\x3', '\x2', '\x86', 
		'\x87', '\x4', '\x2', '\x93', '\x93', '\xAC', '\xAC', '\x3', '\x2', '\n', 
		'\v', '\x4', '\x2', '=', '=', '\x8E', '\x8E', '\x4', '\x2', ':', ':', 
		'j', 'j', '\x4', '\x2', '<', '<', 'T', 'T', '\a', '\x2', '\x1B', '\x1B', 
		'J', 'J', 'S', 'S', '|', '|', '\x7F', '\x7F', '\x4', '\x2', '\t', '\t', 
		'\xE', '\xF', '\x3', '\x2', '\x10', '\x13', '\x3', '\x2', '\x14', '\x17', 
		'\x6', '\x2', 'O', 'O', '\x63', '\x63', '\x65', '\x65', 'x', 'x', '\x5', 
		'\x2', '\x1B', '\x1B', 'J', 'J', '\x7F', '\x7F', '\a', '\x2', '\x36', 
		'\x38', 'j', 'j', '\xAD', '\xAE', '\xBB', '\xBB', '\xBD', '\xBE', '\x4', 
		'\x2', '\x1F', '\x1F', '@', '@', '\x5', '\x2', '\x81', '\x81', '\x9B', 
		'\x9B', '\xB4', '\xB4', '\x4', '\x2', '\a', '\a', 'l', 'l', '\x3', '\x2', 
		'\xB1', '\xB2', '\x4', '\x2', '$', '$', '>', '>', '\x4', '\x2', '\x98', 
		'\x98', '\xA3', '\xA3', '\x4', '\x2', '\xA0', '\xA0', '\xA7', '\xA7', 
		'\x4', '\x2', '\xA1', '\xA1', '\xA8', '\xA9', '\x4', '\x2', '\xA2', '\xA2', 
		'\xA4', '\xA4', '\x4', '\x2', '\n', '\f', 'h', 'h', '\x4', '\x2', '\xBA', 
		'\xBA', '\xBD', '\xBD', '\x3', '\x2', '\x1B', '\xB5', '\x2', '\x5D9', 
		'\x2', '\xCE', '\x3', '\x2', '\x2', '\x2', '\x4', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\xD9', '\x3', '\x2', '\x2', '\x2', '\b', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\xFC', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x101', '\x3', '\x2', '\x2', '\x2', '\xE', '\x10A', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x133', '\x3', '\x2', '\x2', '\x2', '\x12', '\x13E', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x150', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x184', '\x3', '\x2', '\x2', '\x2', '\x18', '\x18A', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1CA', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x1CE', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\"', '\x1FC', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x211', '\x3', '\x2', '\x2', '\x2', '&', '\x215', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x220', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x242', '\x3', '\x2', '\x2', '\x2', ',', '\x267', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x278', '\x3', '\x2', '\x2', '\x2', '\x30', '\x28B', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x296', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x36', '\x29F', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x2A6', '\x3', '\x2', '\x2', '\x2', ':', '\x2B0', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x2C3', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x2C5', '\x3', '\x2', '\x2', '\x2', '@', '\x2C7', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\x44', '\x2F0', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x2F2', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x320', '\x3', '\x2', '\x2', '\x2', 'J', '\x32F', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x332', '\x3', '\x2', '\x2', '\x2', 'N', '\x338', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x360', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x362', '\x3', '\x2', '\x2', '\x2', 'T', '\x36F', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x375', '\x3', '\x2', '\x2', '\x2', 'X', '\x378', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x37C', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x3B0', '\x3', '\x2', '\x2', '\x2', '^', '\x3BB', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x3C9', '\x3', '\x2', '\x2', '\x2', '\x62', '\x3D8', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x3DE', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x3E6', '\x3', '\x2', '\x2', '\x2', 'h', '\x3E8', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x3F3', '\x3', '\x2', '\x2', '\x2', 'l', '\x3F9', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x411', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x42E', '\x3', '\x2', '\x2', '\x2', 'r', '\x438', '\x3', '\x2', 
		'\x2', '\x2', 't', '\x441', '\x3', '\x2', '\x2', '\x2', 'v', '\x44D', 
		'\x3', '\x2', '\x2', '\x2', 'x', '\x457', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x45C', '\x3', '\x2', '\x2', '\x2', '|', '\x45F', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x46B', '\x3', '\x2', '\x2', '\x2', '\x80', '\x477', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x483', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x48C', '\x3', '\x2', '\x2', '\x2', '\x86', '\x4E3', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x4E5', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x4E8', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x4EB', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x4F2', '\x3', '\x2', '\x2', '\x2', '\x90', '\x4F9', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x4FD', '\x3', '\x2', '\x2', '\x2', '\x94', '\x4FF', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x501', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x503', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x507', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x509', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x50B', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x50D', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\x512', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x516', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\x518', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x51A', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\x51F', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\x526', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x52A', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\x52C', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x52E', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\x530', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\x532', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x534', '\x3', '\x2', 
		'\x2', '\x2', '\xBA', '\x536', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x538', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\x53A', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\x53C', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x53E', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\x540', '\x3', '\x2', '\x2', '\x2', '\xC6', '\x542', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\x54B', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\xCD', '\x5', '\x6', '\x4', '\x2', '\xCB', '\xCD', '\x5', '\x4', 
		'\x3', '\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCB', 
		'\x3', '\x2', '\x2', '\x2', '\xCD', '\xD0', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCE', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\a', '\x2', '\x2', '\x3', 
		'\xD2', '\x3', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\a', '\xC2', 
		'\x2', '\x2', '\xD4', '\xD5', '\b', '\x3', '\x1', '\x2', '\xD5', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '\xD8', '\a', '\x3', '\x2', '\x2', 
		'\xD7', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xDB', '\x3', '\x2', 
		'\x2', '\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\xDC', '\x3', '\x2', '\x2', '\x2', 
		'\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xE5', '\x5', '\b', 
		'\x5', '\x2', '\xDD', '\xDF', '\a', '\x3', '\x2', '\x2', '\xDE', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		'\xE0', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\x3', '\x2', 
		'\x2', '\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE4', 
		'\x5', '\b', '\x5', '\x2', '\xE3', '\xDE', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', 
		'\x2', '\x2', '\xE5', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xEB', 
		'\x3', '\x2', '\x2', '\x2', '\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xEA', '\a', '\x3', '\x2', '\x2', '\xE9', '\xE8', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xE9', 
		'\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\a', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEB', '\x3', '\x2', 
		'\x2', '\x2', '\xEE', '\xF1', '\a', 'I', '\x2', '\x2', '\xEF', '\xF0', 
		'\a', 't', '\x2', '\x2', '\xF0', '\xF2', '\a', 'q', '\x2', '\x2', '\xF1', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xFA', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xFB', '\x5', '\xE', '\b', 
		'\x2', '\xF6', '\xFB', '\x5', '\x1E', '\x10', '\x2', '\xF7', '\xFB', '\x5', 
		' ', '\x11', '\x2', '\xF8', '\xFB', '\x5', '\x44', '#', '\x2', '\xF9', 
		'\xFB', '\x5', 'H', '%', '\x2', '\xFA', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xFA', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xF7', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xF9', 
		'\x3', '\x2', '\x2', '\x2', '\xFB', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\xFC', '\xFD', '\a', '\x95', '\x2', '\x2', '\xFD', '\xFE', '\x5', '*', 
		'\x16', '\x2', '\xFE', '\v', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x102', 
		'\x5', '\xAE', 'X', '\x2', '\x100', '\x102', '\x5', '*', '\x16', '\x2', 
		'\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\x105', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'\x104', '\a', '/', '\x2', '\x2', '\x104', '\x106', '\x5', '\xB0', 'Y', 
		'\x2', '\x105', '\x103', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x109', '\x5', '~', '@', '\x2', '\x108', '\x107', '\x3', '\x2', 
		'\x2', '\x2', '\x108', '\x109', '\x3', '\x2', '\x2', '\x2', '\x109', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x10A', '\x10C', '\a', '\x34', '\x2', '\x2', 
		'\x10B', '\x10D', '\t', '\x2', '\x2', '\x2', '\x10C', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x10C', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10D', 
		'\x10E', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x112', '\a', '\x85', '\x2', 
		'\x2', '\x10F', '\x110', '\a', 'R', '\x2', '\x2', '\x110', '\x111', '\a', 
		'h', '\x2', '\x2', '\x111', '\x113', '\a', 'H', '\x2', '\x2', '\x112', 
		'\x10F', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x117', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', 
		'\x5', '\xA6', 'T', '\x2', '\x115', '\x116', '\a', '\x4', '\x2', '\x2', 
		'\x116', '\x118', '\x3', '\x2', '\x2', '\x2', '\x117', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x118', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x119', '\x3', '\x2', '\x2', '\x2', '\x119', '\x131', '\x5', '\xA8', 
		'U', '\x2', '\x11A', '\x11B', '\a', '\x5', '\x2', '\x2', '\x11B', '\x120', 
		'\x5', '\x10', '\t', '\x2', '\x11C', '\x11D', '\a', '\a', '\x2', '\x2', 
		'\x11D', '\x11F', '\x5', '\x10', '\t', '\x2', '\x11E', '\x11C', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x122', '\x3', '\x2', '\x2', '\x2', '\x120', 
		'\x11E', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\x121', '\x127', '\x3', '\x2', '\x2', '\x2', '\x122', '\x120', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\a', '\a', '\x2', '\x2', 
		'\x124', '\x126', '\x5', '\x18', '\r', '\x2', '\x125', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\x129', '\x3', '\x2', '\x2', '\x2', '\x127', 
		'\x125', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', '\x3', '\x2', '\x2', 
		'\x2', '\x128', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x129', '\x127', 
		'\x3', '\x2', '\x2', '\x2', '\x12A', '\x12D', '\a', '\x6', '\x2', '\x2', 
		'\x12B', '\x12C', '\a', '\x97', '\x2', '\x2', '\x12C', '\x12E', '\a', 
		'\xBA', '\x2', '\x2', '\x12D', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12D', 
		'\x12E', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x12F', '\x130', '\a', '#', '\x2', '\x2', '\x130', '\x132', '\x5', 
		'H', '%', '\x2', '\x131', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x131', 
		'\x12F', '\x3', '\x2', '\x2', '\x2', '\x132', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x133', '\x135', '\x5', '\xAE', 'X', '\x2', '\x134', '\x136', 
		'\x5', '\x12', '\n', '\x2', '\x135', '\x134', '\x3', '\x2', '\x2', '\x2', 
		'\x135', '\x136', '\x3', '\x2', '\x2', '\x2', '\x136', '\x13A', '\x3', 
		'\x2', '\x2', '\x2', '\x137', '\x139', '\x5', '\x14', '\v', '\x2', '\x138', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13C', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x138', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', 
		'\x3', '\x2', '\x2', '\x2', '\x13B', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13F', '\x5', 
		'\xA0', 'Q', '\x2', '\x13E', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13F', 
		'\x140', '\x3', '\x2', '\x2', '\x2', '\x140', '\x13E', '\x3', '\x2', '\x2', 
		'\x2', '\x140', '\x141', '\x3', '\x2', '\x2', '\x2', '\x141', '\x14C', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\x143', '\a', '\x5', '\x2', '\x2', 
		'\x143', '\x144', '\x5', '\x16', '\f', '\x2', '\x144', '\x145', '\a', 
		'\x6', '\x2', '\x2', '\x145', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x147', '\a', '\x5', '\x2', '\x2', '\x147', '\x148', '\x5', '\x16', '\f', 
		'\x2', '\x148', '\x149', '\a', '\a', '\x2', '\x2', '\x149', '\x14A', '\x5', 
		'\x16', '\f', '\x2', '\x14A', '\x14B', '\a', '\x6', '\x2', '\x2', '\x14B', 
		'\x14D', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x142', '\x3', '\x2', '\x2', 
		'\x2', '\x14C', '\x146', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', 
		'\x3', '\x2', '\x2', '\x2', '\x14D', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x14E', '\x14F', '\a', '\x33', '\x2', '\x2', '\x14F', '\x151', '\x5', 
		'\xA0', 'Q', '\x2', '\x150', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x150', 
		'\x151', '\x3', '\x2', '\x2', '\x2', '\x151', '\x181', '\x3', '\x2', '\x2', 
		'\x2', '\x152', '\x153', '\a', 's', '\x2', '\x2', '\x153', '\x155', '\a', 
		'\x61', '\x2', '\x2', '\x154', '\x156', '\x5', '~', '@', '\x2', '\x155', 
		'\x154', '\x3', '\x2', '\x2', '\x2', '\x155', '\x156', '\x3', '\x2', '\x2', 
		'\x2', '\x156', '\x158', '\x3', '\x2', '\x2', '\x2', '\x157', '\x159', 
		'\x5', '\x1C', '\xF', '\x2', '\x158', '\x157', '\x3', '\x2', '\x2', '\x2', 
		'\x158', '\x159', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15B', '\x3', 
		'\x2', '\x2', '\x2', '\x15A', '\x15C', '\a', '&', '\x2', '\x2', '\x15B', 
		'\x15A', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', '\x3', '\x2', '\x2', 
		'\x2', '\x15C', '\x182', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', 
		'\a', 'h', '\x2', '\x2', '\x15E', '\x161', '\a', 'j', '\x2', '\x2', '\x15F', 
		'\x161', '\a', '\x8D', '\x2', '\x2', '\x160', '\x15D', '\x3', '\x2', '\x2', 
		'\x2', '\x160', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x161', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\x164', '\x5', '\x1C', '\xF', '\x2', 
		'\x163', '\x162', '\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\x3', 
		'\x2', '\x2', '\x2', '\x164', '\x182', '\x3', '\x2', '\x2', '\x2', '\x165', 
		'\x166', '\a', '.', '\x2', '\x2', '\x166', '\x167', '\a', '\x5', '\x2', 
		'\x2', '\x167', '\x168', '\x5', '*', '\x16', '\x2', '\x168', '\x169', 
		'\a', '\x6', '\x2', '\x2', '\x169', '\x182', '\x3', '\x2', '\x2', '\x2', 
		'\x16A', '\x171', '\a', ':', '\x2', '\x2', '\x16B', '\x172', '\x5', '\x16', 
		'\f', '\x2', '\x16C', '\x172', '\x5', '\x42', '\"', '\x2', '\x16D', '\x16E', 
		'\a', '\x5', '\x2', '\x2', '\x16E', '\x16F', '\x5', '*', '\x16', '\x2', 
		'\x16F', '\x170', '\a', '\x6', '\x2', '\x2', '\x170', '\x172', '\x3', 
		'\x2', '\x2', '\x2', '\x171', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x171', 
		'\x16C', '\x3', '\x2', '\x2', '\x2', '\x171', '\x16D', '\x3', '\x2', '\x2', 
		'\x2', '\x172', '\x182', '\x3', '\x2', '\x2', '\x2', '\x173', '\x174', 
		'\a', '/', '\x2', '\x2', '\x174', '\x182', '\x5', '\xB0', 'Y', '\x2', 
		'\x175', '\x182', '\x5', '\x1A', '\xE', '\x2', '\x176', '\x177', '\a', 
		'\xAA', '\x2', '\x2', '\x177', '\x179', '\a', '\xAB', '\x2', '\x2', '\x178', 
		'\x176', '\x3', '\x2', '\x2', '\x2', '\x178', '\x179', '\x3', '\x2', '\x2', 
		'\x2', '\x179', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17B', 
		'\a', '#', '\x2', '\x2', '\x17B', '\x17C', '\a', '\x5', '\x2', '\x2', 
		'\x17C', '\x17D', '\x5', '*', '\x16', '\x2', '\x17D', '\x17F', '\a', '\x6', 
		'\x2', '\x2', '\x17E', '\x180', '\t', '\x3', '\x2', '\x2', '\x17F', '\x17E', 
		'\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\x3', '\x2', '\x2', '\x2', 
		'\x180', '\x182', '\x3', '\x2', '\x2', '\x2', '\x181', '\x152', '\x3', 
		'\x2', '\x2', '\x2', '\x181', '\x160', '\x3', '\x2', '\x2', '\x2', '\x181', 
		'\x165', '\x3', '\x2', '\x2', '\x2', '\x181', '\x16A', '\x3', '\x2', '\x2', 
		'\x2', '\x181', '\x173', '\x3', '\x2', '\x2', '\x2', '\x181', '\x175', 
		'\x3', '\x2', '\x2', '\x2', '\x181', '\x178', '\x3', '\x2', '\x2', '\x2', 
		'\x182', '\x15', '\x3', '\x2', '\x2', '\x2', '\x183', '\x185', '\t', '\x4', 
		'\x2', '\x2', '\x184', '\x183', '\x3', '\x2', '\x2', '\x2', '\x184', '\x185', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x186', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x187', '\a', '\xBB', '\x2', '\x2', '\x187', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x188', '\x189', '\a', '\x33', '\x2', '\x2', '\x189', 
		'\x18B', '\x5', '\xA0', 'Q', '\x2', '\x18A', '\x188', '\x3', '\x2', '\x2', 
		'\x2', '\x18A', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x1A8', 
		'\x3', '\x2', '\x2', '\x2', '\x18C', '\x18D', '\a', 's', '\x2', '\x2', 
		'\x18D', '\x190', '\a', '\x61', '\x2', '\x2', '\x18E', '\x190', '\a', 
		'\x8D', '\x2', '\x2', '\x18F', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x18F', 
		'\x18E', '\x3', '\x2', '\x2', '\x2', '\x190', '\x191', '\x3', '\x2', '\x2', 
		'\x2', '\x191', '\x192', '\a', '\x5', '\x2', '\x2', '\x192', '\x197', 
		'\x5', '\f', '\a', '\x2', '\x193', '\x194', '\a', '\a', '\x2', '\x2', 
		'\x194', '\x196', '\x5', '\f', '\a', '\x2', '\x195', '\x193', '\x3', '\x2', 
		'\x2', '\x2', '\x196', '\x199', '\x3', '\x2', '\x2', '\x2', '\x197', '\x195', 
		'\x3', '\x2', '\x2', '\x2', '\x197', '\x198', '\x3', '\x2', '\x2', '\x2', 
		'\x198', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x199', '\x197', '\x3', 
		'\x2', '\x2', '\x2', '\x19A', '\x19C', '\a', '\x6', '\x2', '\x2', '\x19B', 
		'\x19D', '\x5', '\x1C', '\xF', '\x2', '\x19C', '\x19B', '\x3', '\x2', 
		'\x2', '\x2', '\x19C', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x1A9', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\x19F', '\a', '.', '\x2', '\x2', 
		'\x19F', '\x1A0', '\a', '\x5', '\x2', '\x2', '\x1A0', '\x1A1', '\x5', 
		'*', '\x16', '\x2', '\x1A1', '\x1A2', '\a', '\x6', '\x2', '\x2', '\x1A2', 
		'\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A4', '\a', 'L', '\x2', 
		'\x2', '\x1A4', '\x1A5', '\a', '\x61', '\x2', '\x2', '\x1A5', '\x1A6', 
		'\x5', 'h', '\x35', '\x2', '\x1A6', '\x1A7', '\x5', '\x1A', '\xE', '\x2', 
		'\x1A7', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x18F', '\x3', 
		'\x2', '\x2', '\x2', '\x1A8', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x1A8', 
		'\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x1AA', '\x1AB', '\a', 'w', '\x2', '\x2', '\x1AB', '\x1AD', '\x5', 
		'\xB2', 'Z', '\x2', '\x1AC', '\x1AE', '\x5', 'h', '\x35', '\x2', '\x1AD', 
		'\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\x3', '\x2', '\x2', 
		'\x2', '\x1AE', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B0', 
		'\a', 'm', '\x2', '\x2', '\x1B0', '\x1B7', '\t', '\x5', '\x2', '\x2', 
		'\x1B1', '\x1B2', '\a', '\x84', '\x2', '\x2', '\x1B2', '\x1B8', '\t', 
		'\x6', '\x2', '\x2', '\x1B3', '\x1B8', '\a', '+', '\x2', '\x2', '\x1B4', 
		'\x1B8', '\a', '}', '\x2', '\x2', '\x1B5', '\x1B6', '\a', 'g', '\x2', 
		'\x2', '\x1B6', '\x1B8', '\a', '\x1C', '\x2', '\x2', '\x1B7', '\x1B1', 
		'\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B3', '\x3', '\x2', '\x2', '\x2', 
		'\x1B7', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B5', '\x3', 
		'\x2', '\x2', '\x2', '\x1B8', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1B9', 
		'\x1BA', '\a', '\x65', '\x2', '\x2', '\x1BA', '\x1BC', '\x5', '\xA0', 
		'Q', '\x2', '\x1BB', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1B9', 
		'\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BF', '\x3', '\x2', '\x2', '\x2', 
		'\x1BD', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BE', '\x3', 
		'\x2', '\x2', '\x2', '\x1BE', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1BF', 
		'\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C2', '\a', 'h', '\x2', 
		'\x2', '\x1C1', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', 
		'\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C3', '\x3', '\x2', '\x2', '\x2', 
		'\x1C3', '\x1C6', '\a', ';', '\x2', '\x2', '\x1C4', '\x1C5', '\a', 'X', 
		'\x2', '\x2', '\x1C5', '\x1C7', '\t', '\a', '\x2', '\x2', '\x1C6', '\x1C4', 
		'\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1C7', '\x3', '\x2', '\x2', '\x2', 
		'\x1C7', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C1', '\x3', 
		'\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1C9', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CB', '\a', 'm', '\x2', 
		'\x2', '\x1CB', '\x1CC', '\a', '\x32', '\x2', '\x2', '\x1CC', '\x1CD', 
		'\t', '\b', '\x2', '\x2', '\x1CD', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x1CE', '\x1D0', '\a', '\x34', '\x2', '\x2', '\x1CF', '\x1D1', '\t', 
		'\x2', '\x2', '\x2', '\x1D0', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1D0', 
		'\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D2', '\x3', '\x2', '\x2', 
		'\x2', '\x1D2', '\x1D6', '\a', '\x92', '\x2', '\x2', '\x1D3', '\x1D4', 
		'\a', 'R', '\x2', '\x2', '\x1D4', '\x1D5', '\a', 'h', '\x2', '\x2', '\x1D5', 
		'\x1D7', '\a', 'H', '\x2', '\x2', '\x1D6', '\x1D3', '\x3', '\x2', '\x2', 
		'\x2', '\x1D6', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1DB', 
		'\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D9', '\x5', '\xA6', 'T', '\x2', 
		'\x1D9', '\x1DA', '\a', '\x4', '\x2', '\x2', '\x1DA', '\x1DC', '\x3', 
		'\x2', '\x2', '\x2', '\x1DB', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1DB', 
		'\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DD', '\x3', '\x2', '\x2', 
		'\x2', '\x1DD', '\x1DF', '\x5', '\xB6', '\\', '\x2', '\x1DE', '\x1E0', 
		'\x5', 'h', '\x35', '\x2', '\x1DF', '\x1DE', '\x3', '\x2', '\x2', '\x2', 
		'\x1DF', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E1', '\x3', 
		'\x2', '\x2', '\x2', '\x1E1', '\x1E2', '\a', '#', '\x2', '\x2', '\x1E2', 
		'\x1E3', '\x5', 'H', '%', '\x2', '\x1E3', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x1E4', '\x1E5', '\a', '\x34', '\x2', '\x2', '\x1E5', '\x1E6', 
		'\a', '\x93', '\x2', '\x2', '\x1E6', '\x1EA', '\a', '\x85', '\x2', '\x2', 
		'\x1E7', '\x1E8', '\a', 'R', '\x2', '\x2', '\x1E8', '\x1E9', '\a', 'h', 
		'\x2', '\x2', '\x1E9', '\x1EB', '\a', 'H', '\x2', '\x2', '\x1EA', '\x1E7', 
		'\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1EB', '\x3', '\x2', '\x2', '\x2', 
		'\x1EB', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1ED', '\x5', 
		'\xAA', 'V', '\x2', '\x1ED', '\x1EE', '\a', '\x8F', '\x2', '\x2', '\x1EE', 
		'\x1FA', '\x5', '\xB8', ']', '\x2', '\x1EF', '\x1F0', '\a', '\x5', '\x2', 
		'\x2', '\x1F0', '\x1F5', '\x5', '\x9A', 'N', '\x2', '\x1F1', '\x1F2', 
		'\a', '\a', '\x2', '\x2', '\x1F2', '\x1F4', '\x5', '\x9A', 'N', '\x2', 
		'\x1F3', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F7', '\x3', 
		'\x2', '\x2', '\x2', '\x1F5', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F5', 
		'\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F8', '\x3', '\x2', '\x2', 
		'\x2', '\x1F7', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F9', 
		'\a', '\x6', '\x2', '\x2', '\x1F9', '\x1FB', '\x3', '\x2', '\x2', '\x2', 
		'\x1FA', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1FA', '\x1FB', '\x3', 
		'\x2', '\x2', '\x2', '\x1FB', '!', '\x3', '\x2', '\x2', '\x2', '\x1FC', 
		'\x1FE', '\a', '\x96', '\x2', '\x2', '\x1FD', '\x1FF', '\a', 'v', '\x2', 
		'\x2', '\x1FE', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1FF', 
		'\x3', '\x2', '\x2', '\x2', '\x1FF', '\x200', '\x3', '\x2', '\x2', '\x2', 
		'\x200', '\x201', '\x5', '$', '\x13', '\x2', '\x201', '\x202', '\a', '#', 
		'\x2', '\x2', '\x202', '\x203', '\a', '\x5', '\x2', '\x2', '\x203', '\x204', 
		'\x5', 'H', '%', '\x2', '\x204', '\x20E', '\a', '\x6', '\x2', '\x2', '\x205', 
		'\x206', '\a', '\a', '\x2', '\x2', '\x206', '\x207', '\x5', '$', '\x13', 
		'\x2', '\x207', '\x208', '\a', '#', '\x2', '\x2', '\x208', '\x209', '\a', 
		'\x5', '\x2', '\x2', '\x209', '\x20A', '\x5', 'H', '%', '\x2', '\x20A', 
		'\x20B', '\a', '\x6', '\x2', '\x2', '\x20B', '\x20D', '\x3', '\x2', '\x2', 
		'\x2', '\x20C', '\x205', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x210', 
		'\x3', '\x2', '\x2', '\x2', '\x20E', '\x20C', '\x3', '\x2', '\x2', '\x2', 
		'\x20E', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x20F', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x210', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x211', '\x213', 
		'\x5', '\xA8', 'U', '\x2', '\x212', '\x214', '\x5', 'h', '\x35', '\x2', 
		'\x213', '\x212', '\x3', '\x2', '\x2', '\x2', '\x213', '\x214', '\x3', 
		'\x2', '\x2', '\x2', '\x214', '%', '\x3', '\x2', '\x2', '\x2', '\x215', 
		'\x216', '\x5', '$', '\x13', '\x2', '\x216', '\x217', '\a', '#', '\x2', 
		'\x2', '\x217', '\x218', '\a', '\x5', '\x2', '\x2', '\x218', '\x219', 
		'\x5', '\x92', 'J', '\x2', '\x219', '\x21B', '\a', '\x8C', '\x2', '\x2', 
		'\x21A', '\x21C', '\a', '\x1F', '\x2', '\x2', '\x21B', '\x21A', '\x3', 
		'\x2', '\x2', '\x2', '\x21B', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x21C', 
		'\x21D', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x21E', '\x5', '\x94', 
		'K', '\x2', '\x21E', '\x21F', '\a', '\x6', '\x2', '\x2', '\x21F', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\x220', '\x222', '\x5', '\xA8', 'U', '\x2', 
		'\x221', '\x223', '\x5', 'h', '\x35', '\x2', '\x222', '\x221', '\x3', 
		'\x2', '\x2', '\x2', '\x222', '\x223', '\x3', '\x2', '\x2', '\x2', '\x223', 
		'\x224', '\x3', '\x2', '\x2', '\x2', '\x224', '\x225', '\a', '#', '\x2', 
		'\x2', '\x225', '\x226', '\a', '\x5', '\x2', '\x2', '\x226', '\x227', 
		'\x5', 'H', '%', '\x2', '\x227', '\x228', '\a', '\x6', '\x2', '\x2', '\x228', 
		')', '\x3', '\x2', '\x2', '\x2', '\x229', '\x22A', '\b', '\x16', '\x1', 
		'\x2', '\x22A', '\x243', '\x5', '\x42', '\"', '\x2', '\x22B', '\x243', 
		'\a', '\xBC', '\x2', '\x2', '\x22C', '\x243', '\x5', '\xAC', 'W', '\x2', 
		'\x22D', '\x22E', '\x5', '\x96', 'L', '\x2', '\x22E', '\x22F', '\x5', 
		'*', '\x16', '\xF', '\x22F', '\x243', '\x3', '\x2', '\x2', '\x2', '\x230', 
		'\x243', '\x5', ',', '\x17', '\x2', '\x231', '\x232', '\a', '-', '\x2', 
		'\x2', '\x232', '\x233', '\a', '\x5', '\x2', '\x2', '\x233', '\x234', 
		'\x5', '*', '\x16', '\x2', '\x234', '\x235', '\a', '#', '\x2', '\x2', 
		'\x235', '\x236', '\x5', '\x12', '\n', '\x2', '\x236', '\x237', '\a', 
		'\x6', '\x2', '\x2', '\x237', '\x243', '\x3', '\x2', '\x2', '\x2', '\x238', 
		'\x243', '\x5', '\x38', '\x1D', '\x2', '\x239', '\x243', '\x5', '\x30', 
		'\x19', '\x2', '\x23A', '\x243', '\x5', '@', '!', '\x2', '\x23B', '\x23E', 
		'\a', '\x5', '\x2', '\x2', '\x23C', '\x23F', '\x5', '*', '\x16', '\x2', 
		'\x23D', '\x23F', '\x5', 'Z', '.', '\x2', '\x23E', '\x23C', '\x3', '\x2', 
		'\x2', '\x2', '\x23E', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x240', 
		'\x3', '\x2', '\x2', '\x2', '\x240', '\x241', '\a', '\x6', '\x2', '\x2', 
		'\x241', '\x243', '\x3', '\x2', '\x2', '\x2', '\x242', '\x229', '\x3', 
		'\x2', '\x2', '\x2', '\x242', '\x22B', '\x3', '\x2', '\x2', '\x2', '\x242', 
		'\x22C', '\x3', '\x2', '\x2', '\x2', '\x242', '\x22D', '\x3', '\x2', '\x2', 
		'\x2', '\x242', '\x230', '\x3', '\x2', '\x2', '\x2', '\x242', '\x231', 
		'\x3', '\x2', '\x2', '\x2', '\x242', '\x238', '\x3', '\x2', '\x2', '\x2', 
		'\x242', '\x239', '\x3', '\x2', '\x2', '\x2', '\x242', '\x23A', '\x3', 
		'\x2', '\x2', '\x2', '\x242', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x243', 
		'\x264', '\x3', '\x2', '\x2', '\x2', '\x244', '\x245', '\f', '\xE', '\x2', 
		'\x2', '\x245', '\x246', '\x5', '<', '\x1F', '\x2', '\x246', '\x247', 
		'\x5', '*', '\x16', '\xF', '\x247', '\x263', '\x3', '\x2', '\x2', '\x2', 
		'\x248', '\x24A', '\f', '\x5', '\x2', '\x2', '\x249', '\x24B', '\a', 'h', 
		'\x2', '\x2', '\x24A', '\x249', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x24B', 
		'\x3', '\x2', '\x2', '\x2', '\x24B', '\x24C', '\x3', '\x2', '\x2', '\x2', 
		'\x24C', '\x24D', '\a', ')', '\x2', '\x2', '\x24D', '\x24E', '\x5', '*', 
		'\x16', '\x2', '\x24E', '\x24F', '\a', '\"', '\x2', '\x2', '\x24F', '\x250', 
		'\x5', '*', '\x16', '\x6', '\x250', '\x263', '\x3', '\x2', '\x2', '\x2', 
		'\x251', '\x252', '\f', '\v', '\x2', '\x2', '\x252', '\x253', '\a', '/', 
		'\x2', '\x2', '\x253', '\x263', '\x5', '\xB0', 'Y', '\x2', '\x254', '\x255', 
		'\f', '\n', '\x2', '\x2', '\x255', '\x263', '\x5', ':', '\x1E', '\x2', 
		'\x256', '\x257', '\f', '\t', '\x2', '\x2', '\x257', '\x263', '\x5', '.', 
		'\x18', '\x2', '\x258', '\x25A', '\f', '\x4', '\x2', '\x2', '\x259', '\x25B', 
		'\a', 'h', '\x2', '\x2', '\x25A', '\x259', '\x3', '\x2', '\x2', '\x2', 
		'\x25A', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x25B', '\x25C', '\x3', 
		'\x2', '\x2', '\x2', '\x25C', '\x25D', '\x5', '>', ' ', '\x2', '\x25D', 
		'\x260', '\x5', '*', '\x16', '\x2', '\x25E', '\x25F', '\a', '\x45', '\x2', 
		'\x2', '\x25F', '\x261', '\x5', '*', '\x16', '\x2', '\x260', '\x25E', 
		'\x3', '\x2', '\x2', '\x2', '\x260', '\x261', '\x3', '\x2', '\x2', '\x2', 
		'\x261', '\x263', '\x3', '\x2', '\x2', '\x2', '\x262', '\x244', '\x3', 
		'\x2', '\x2', '\x2', '\x262', '\x248', '\x3', '\x2', '\x2', '\x2', '\x262', 
		'\x251', '\x3', '\x2', '\x2', '\x2', '\x262', '\x254', '\x3', '\x2', '\x2', 
		'\x2', '\x262', '\x256', '\x3', '\x2', '\x2', '\x2', '\x262', '\x258', 
		'\x3', '\x2', '\x2', '\x2', '\x263', '\x266', '\x3', '\x2', '\x2', '\x2', 
		'\x264', '\x262', '\x3', '\x2', '\x2', '\x2', '\x264', '\x265', '\x3', 
		'\x2', '\x2', '\x2', '\x265', '+', '\x3', '\x2', '\x2', '\x2', '\x266', 
		'\x264', '\x3', '\x2', '\x2', '\x2', '\x267', '\x268', '\x5', '\xA4', 
		'S', '\x2', '\x268', '\x26E', '\a', '\x5', '\x2', '\x2', '\x269', '\x26B', 
		'\a', '@', '\x2', '\x2', '\x26A', '\x269', '\x3', '\x2', '\x2', '\x2', 
		'\x26A', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x26B', '\x26C', '\x3', 
		'\x2', '\x2', '\x2', '\x26C', '\x26F', '\x5', 'Z', '.', '\x2', '\x26D', 
		'\x26F', '\a', '\t', '\x2', '\x2', '\x26E', '\x26A', '\x3', '\x2', '\x2', 
		'\x2', '\x26E', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x26F', 
		'\x3', '\x2', '\x2', '\x2', '\x26F', '\x270', '\x3', '\x2', '\x2', '\x2', 
		'\x270', '\x272', '\a', '\x6', '\x2', '\x2', '\x271', '\x273', '\x5', 
		'j', '\x36', '\x2', '\x272', '\x271', '\x3', '\x2', '\x2', '\x2', '\x272', 
		'\x273', '\x3', '\x2', '\x2', '\x2', '\x273', '\x275', '\x3', '\x2', '\x2', 
		'\x2', '\x274', '\x276', '\x5', 'n', '\x38', '\x2', '\x275', '\x274', 
		'\x3', '\x2', '\x2', '\x2', '\x275', '\x276', '\x3', '\x2', '\x2', '\x2', 
		'\x276', '-', '\x3', '\x2', '\x2', '\x2', '\x277', '\x279', '\a', 'h', 
		'\x2', '\x2', '\x278', '\x277', '\x3', '\x2', '\x2', '\x2', '\x278', '\x279', 
		'\x3', '\x2', '\x2', '\x2', '\x279', '\x27A', '\x3', '\x2', '\x2', '\x2', 
		'\x27A', '\x289', '\a', 'U', '\x2', '\x2', '\x27B', '\x27E', '\a', '\x5', 
		'\x2', '\x2', '\x27C', '\x27F', '\x5', 'H', '%', '\x2', '\x27D', '\x27F', 
		'\x5', 'Z', '.', '\x2', '\x27E', '\x27C', '\x3', '\x2', '\x2', '\x2', 
		'\x27E', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27F', '\x3', 
		'\x2', '\x2', '\x2', '\x27F', '\x280', '\x3', '\x2', '\x2', '\x2', '\x280', 
		'\x28A', '\a', '\x6', '\x2', '\x2', '\x281', '\x28A', '\x5', '\xAA', 'V', 
		'\x2', '\x282', '\x283', '\x5', '\xA2', 'R', '\x2', '\x283', '\x285', 
		'\a', '\x5', '\x2', '\x2', '\x284', '\x286', '\x5', 'Z', '.', '\x2', '\x285', 
		'\x284', '\x3', '\x2', '\x2', '\x2', '\x285', '\x286', '\x3', '\x2', '\x2', 
		'\x2', '\x286', '\x287', '\x3', '\x2', '\x2', '\x2', '\x287', '\x288', 
		'\a', '\x6', '\x2', '\x2', '\x288', '\x28A', '\x3', '\x2', '\x2', '\x2', 
		'\x289', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x289', '\x281', '\x3', 
		'\x2', '\x2', '\x2', '\x289', '\x282', '\x3', '\x2', '\x2', '\x2', '\x28A', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x28B', '\x28D', '\x5', '\x34', '\x1B', 
		'\x2', '\x28C', '\x28E', '\x5', '\x32', '\x1A', '\x2', '\x28D', '\x28C', 
		'\x3', '\x2', '\x2', '\x2', '\x28E', '\x28F', '\x3', '\x2', '\x2', '\x2', 
		'\x28F', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x28F', '\x290', '\x3', 
		'\x2', '\x2', '\x2', '\x290', '\x292', '\x3', '\x2', '\x2', '\x2', '\x291', 
		'\x293', '\x5', '\x36', '\x1C', '\x2', '\x292', '\x291', '\x3', '\x2', 
		'\x2', '\x2', '\x292', '\x293', '\x3', '\x2', '\x2', '\x2', '\x293', '\x294', 
		'\x3', '\x2', '\x2', '\x2', '\x294', '\x295', '\a', '\x44', '\x2', '\x2', 
		'\x295', '\x31', '\x3', '\x2', '\x2', '\x2', '\x296', '\x297', '\a', '\x94', 
		'\x2', '\x2', '\x297', '\x298', '\x5', '*', '\x16', '\x2', '\x298', '\x299', 
		'\a', '\x88', '\x2', '\x2', '\x299', '\x29A', '\x5', '*', '\x16', '\x2', 
		'\x29A', '\x33', '\x3', '\x2', '\x2', '\x2', '\x29B', '\x29D', '\a', ',', 
		'\x2', '\x2', '\x29C', '\x29E', '\x5', '*', '\x16', '\x2', '\x29D', '\x29C', 
		'\x3', '\x2', '\x2', '\x2', '\x29D', '\x29E', '\x3', '\x2', '\x2', '\x2', 
		'\x29E', '\x35', '\x3', '\x2', '\x2', '\x2', '\x29F', '\x2A0', '\a', '\x43', 
		'\x2', '\x2', '\x2A0', '\x2A1', '\x5', '*', '\x16', '\x2', '\x2A1', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A4', '\a', 'h', '\x2', '\x2', 
		'\x2A3', '\x2A2', '\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2A4', '\x3', 
		'\x2', '\x2', '\x2', '\x2A4', '\x2A5', '\x3', '\x2', '\x2', '\x2', '\x2A5', 
		'\x2A7', '\a', 'H', '\x2', '\x2', '\x2A6', '\x2A3', '\x3', '\x2', '\x2', 
		'\x2', '\x2A6', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2A7', '\x2A8', 
		'\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2A9', '\a', '\x5', '\x2', '\x2', 
		'\x2A9', '\x2AA', '\x5', 'H', '%', '\x2', '\x2AA', '\x2AB', '\a', '\x6', 
		'\x2', '\x2', '\x2AB', '\x39', '\x3', '\x2', '\x2', '\x2', '\x2AC', '\x2B1', 
		'\a', '_', '\x2', '\x2', '\x2AD', '\x2B1', '\a', 'i', '\x2', '\x2', '\x2AE', 
		'\x2AF', '\a', 'h', '\x2', '\x2', '\x2AF', '\x2B1', '\a', 'j', '\x2', 
		'\x2', '\x2B0', '\x2AC', '\x3', '\x2', '\x2', '\x2', '\x2B0', '\x2AD', 
		'\x3', '\x2', '\x2', '\x2', '\x2B0', '\x2AE', '\x3', '\x2', '\x2', '\x2', 
		'\x2B1', ';', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\x2C4', '\a', '\r', 
		'\x2', '\x2', '\x2B3', '\x2C4', '\t', '\t', '\x2', '\x2', '\x2B4', '\x2C4', 
		'\t', '\x4', '\x2', '\x2', '\x2B5', '\x2C4', '\t', '\n', '\x2', '\x2', 
		'\x2B6', '\x2C4', '\t', '\v', '\x2', '\x2', '\x2B7', '\x2C4', '\a', '\b', 
		'\x2', '\x2', '\x2B8', '\x2C4', '\a', '\x18', '\x2', '\x2', '\x2B9', '\x2C4', 
		'\a', '\x19', '\x2', '\x2', '\x2BA', '\x2C4', '\a', '\x1A', '\x2', '\x2', 
		'\x2BB', '\x2C4', '\a', 'U', '\x2', '\x2', '\x2BC', '\x2C4', '\a', '\"', 
		'\x2', '\x2', '\x2BD', '\x2C4', '\a', 'n', '\x2', '\x2', '\x2BE', '\x2C0', 
		'\a', '^', '\x2', '\x2', '\x2BF', '\x2C1', '\a', 'h', '\x2', '\x2', '\x2C0', 
		'\x2BF', '\x3', '\x2', '\x2', '\x2', '\x2C0', '\x2C1', '\x3', '\x2', '\x2', 
		'\x2', '\x2C1', '\x2C4', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C4', 
		'\x5', '>', ' ', '\x2', '\x2C3', '\x2B2', '\x3', '\x2', '\x2', '\x2', 
		'\x2C3', '\x2B3', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2B4', '\x3', 
		'\x2', '\x2', '\x2', '\x2C3', '\x2B5', '\x3', '\x2', '\x2', '\x2', '\x2C3', 
		'\x2B6', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2B7', '\x3', '\x2', '\x2', 
		'\x2', '\x2C3', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2B9', 
		'\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2BA', '\x3', '\x2', '\x2', '\x2', 
		'\x2C3', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2BC', '\x3', 
		'\x2', '\x2', '\x2', '\x2C3', '\x2BD', '\x3', '\x2', '\x2', '\x2', '\x2C3', 
		'\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2C2', '\x3', '\x2', '\x2', 
		'\x2', '\x2C4', '=', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2C6', '\t', 
		'\f', '\x2', '\x2', '\x2C6', '?', '\x3', '\x2', '\x2', '\x2', '\x2C7', 
		'\x2C8', '\a', 'u', '\x2', '\x2', '\x2C8', '\x2CD', '\a', '\x5', '\x2', 
		'\x2', '\x2C9', '\x2CE', '\a', 'S', '\x2', '\x2', '\x2CA', '\x2CB', '\t', 
		'\r', '\x2', '\x2', '\x2CB', '\x2CC', '\a', '\a', '\x2', '\x2', '\x2CC', 
		'\x2CE', '\x5', '\x98', 'M', '\x2', '\x2CD', '\x2C9', '\x3', '\x2', '\x2', 
		'\x2', '\x2CD', '\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2CE', '\x2CF', 
		'\x3', '\x2', '\x2', '\x2', '\x2CF', '\x2D0', '\a', '\x6', '\x2', '\x2', 
		'\x2D0', '\x41', '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2D2', '\t', '\xE', 
		'\x2', '\x2', '\x2D2', '\x43', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D5', 
		'\x5', '\"', '\x12', '\x2', '\x2D4', '\x2D3', '\x3', '\x2', '\x2', '\x2', 
		'\x2D4', '\x2D5', '\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2DB', '\x3', 
		'\x2', '\x2', '\x2', '\x2D6', '\x2DC', '\a', 'Z', '\x2', '\x2', '\x2D7', 
		'\x2DC', '\a', '|', '\x2', '\x2', '\x2D8', '\x2D9', '\a', 'Z', '\x2', 
		'\x2', '\x2D9', '\x2DA', '\a', 'n', '\x2', '\x2', '\x2DA', '\x2DC', '\t', 
		'\b', '\x2', '\x2', '\x2DB', '\x2D6', '\x3', '\x2', '\x2', '\x2', '\x2DB', 
		'\x2D7', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2D8', '\x3', '\x2', '\x2', 
		'\x2', '\x2DC', '\x2DD', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2DE', 
		'\a', ']', '\x2', '\x2', '\x2DE', '\x2E1', '\x5', '\xAA', 'V', '\x2', 
		'\x2DF', '\x2E0', '\a', '#', '\x2', '\x2', '\x2E0', '\x2E2', '\x5', '\xBA', 
		'^', '\x2', '\x2E1', '\x2DF', '\x3', '\x2', '\x2', '\x2', '\x2E1', '\x2E2', 
		'\x3', '\x2', '\x2', '\x2', '\x2E2', '\x2E4', '\x3', '\x2', '\x2', '\x2', 
		'\x2E3', '\x2E5', '\x5', 'h', '\x35', '\x2', '\x2E4', '\x2E3', '\x3', 
		'\x2', '\x2', '\x2', '\x2E4', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x2E5', 
		'\x2E9', '\x3', '\x2', '\x2', '\x2', '\x2E6', '\x2E7', '\a', '\x91', '\x2', 
		'\x2', '\x2E7', '\x2EA', '\x5', 'R', '*', '\x2', '\x2E8', '\x2EA', '\x5', 
		'H', '%', '\x2', '\x2E9', '\x2E6', '\x3', '\x2', '\x2', '\x2', '\x2E9', 
		'\x2E8', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2EC', '\x3', '\x2', '\x2', 
		'\x2', '\x2EB', '\x2ED', '\x5', '\x46', '$', '\x2', '\x2EC', '\x2EB', 
		'\x3', '\x2', '\x2', '\x2', '\x2EC', '\x2ED', '\x3', '\x2', '\x2', '\x2', 
		'\x2ED', '\x2F1', '\x3', '\x2', '\x2', '\x2', '\x2EE', '\x2EF', '\a', 
		':', '\x2', '\x2', '\x2EF', '\x2F1', '\a', '\x91', '\x2', '\x2', '\x2F0', 
		'\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2F0', '\x2EE', '\x3', '\x2', '\x2', 
		'\x2', '\x2F1', '\x45', '\x3', '\x2', '\x2', '\x2', '\x2F2', '\x2F3', 
		'\a', 'm', '\x2', '\x2', '\x2F3', '\x301', '\a', '\x32', '\x2', '\x2', 
		'\x2F4', '\x2F5', '\a', '\x5', '\x2', '\x2', '\x2F5', '\x2FA', '\x5', 
		'\f', '\a', '\x2', '\x2F6', '\x2F7', '\a', '\a', '\x2', '\x2', '\x2F7', 
		'\x2F9', '\x5', '\f', '\a', '\x2', '\x2F8', '\x2F6', '\x3', '\x2', '\x2', 
		'\x2', '\x2F9', '\x2FC', '\x3', '\x2', '\x2', '\x2', '\x2FA', '\x2F8', 
		'\x3', '\x2', '\x2', '\x2', '\x2FA', '\x2FB', '\x3', '\x2', '\x2', '\x2', 
		'\x2FB', '\x2FD', '\x3', '\x2', '\x2', '\x2', '\x2FC', '\x2FA', '\x3', 
		'\x2', '\x2', '\x2', '\x2FD', '\x2FF', '\a', '\x6', '\x2', '\x2', '\x2FE', 
		'\x300', '\x5', '\n', '\x6', '\x2', '\x2FF', '\x2FE', '\x3', '\x2', '\x2', 
		'\x2', '\x2FF', '\x300', '\x3', '\x2', '\x2', '\x2', '\x300', '\x302', 
		'\x3', '\x2', '\x2', '\x2', '\x301', '\x2F4', '\x3', '\x2', '\x2', '\x2', 
		'\x301', '\x302', '\x3', '\x2', '\x2', '\x2', '\x302', '\x303', '\x3', 
		'\x2', '\x2', '\x2', '\x303', '\x31D', '\a', '\xB8', '\x2', '\x2', '\x304', 
		'\x31E', '\a', '\xB9', '\x2', '\x2', '\x305', '\x306', '\a', '\x8E', '\x2', 
		'\x2', '\x306', '\x309', '\a', '\x84', '\x2', '\x2', '\x307', '\x30A', 
		'\x5', '\xAE', 'X', '\x2', '\x308', '\x30A', '\x5', 'h', '\x35', '\x2', 
		'\x309', '\x307', '\x3', '\x2', '\x2', '\x2', '\x309', '\x308', '\x3', 
		'\x2', '\x2', '\x2', '\x30A', '\x30B', '\x3', '\x2', '\x2', '\x2', '\x30B', 
		'\x30C', '\a', '\x18', '\x2', '\x2', '\x30C', '\x317', '\x5', '*', '\x16', 
		'\x2', '\x30D', '\x310', '\a', '\a', '\x2', '\x2', '\x30E', '\x311', '\x5', 
		'\xAE', 'X', '\x2', '\x30F', '\x311', '\x5', 'h', '\x35', '\x2', '\x310', 
		'\x30E', '\x3', '\x2', '\x2', '\x2', '\x310', '\x30F', '\x3', '\x2', '\x2', 
		'\x2', '\x311', '\x312', '\x3', '\x2', '\x2', '\x2', '\x312', '\x313', 
		'\a', '\x18', '\x2', '\x2', '\x313', '\x314', '\x5', '*', '\x16', '\x2', 
		'\x314', '\x316', '\x3', '\x2', '\x2', '\x2', '\x315', '\x30D', '\x3', 
		'\x2', '\x2', '\x2', '\x316', '\x319', '\x3', '\x2', '\x2', '\x2', '\x317', 
		'\x315', '\x3', '\x2', '\x2', '\x2', '\x317', '\x318', '\x3', '\x2', '\x2', 
		'\x2', '\x318', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x319', '\x317', 
		'\x3', '\x2', '\x2', '\x2', '\x31A', '\x31C', '\x5', '\n', '\x6', '\x2', 
		'\x31B', '\x31A', '\x3', '\x2', '\x2', '\x2', '\x31B', '\x31C', '\x3', 
		'\x2', '\x2', '\x2', '\x31C', '\x31E', '\x3', '\x2', '\x2', '\x2', '\x31D', 
		'\x304', '\x3', '\x2', '\x2', '\x2', '\x31D', '\x305', '\x3', '\x2', '\x2', 
		'\x2', '\x31E', 'G', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x321', '\x5', 
		't', ';', '\x2', '\x320', '\x31F', '\x3', '\x2', '\x2', '\x2', '\x320', 
		'\x321', '\x3', '\x2', '\x2', '\x2', '\x321', '\x322', '\x3', '\x2', '\x2', 
		'\x2', '\x322', '\x326', '\x5', 'P', ')', '\x2', '\x323', '\x325', '\x5', 
		'J', '&', '\x2', '\x324', '\x323', '\x3', '\x2', '\x2', '\x2', '\x325', 
		'\x328', '\x3', '\x2', '\x2', '\x2', '\x326', '\x324', '\x3', '\x2', '\x2', 
		'\x2', '\x326', '\x327', '\x3', '\x2', '\x2', '\x2', '\x327', '\x32A', 
		'\x3', '\x2', '\x2', '\x2', '\x328', '\x326', '\x3', '\x2', '\x2', '\x2', 
		'\x329', '\x32B', '\x5', 'v', '<', '\x2', '\x32A', '\x329', '\x3', '\x2', 
		'\x2', '\x2', '\x32A', '\x32B', '\x3', '\x2', '\x2', '\x2', '\x32B', '\x32D', 
		'\x3', '\x2', '\x2', '\x2', '\x32C', '\x32E', '\x5', 'x', '=', '\x2', 
		'\x32D', '\x32C', '\x3', '\x2', '\x2', '\x2', '\x32D', '\x32E', '\x3', 
		'\x2', '\x2', '\x2', '\x32E', 'I', '\x3', '\x2', '\x2', '\x2', '\x32F', 
		'\x330', '\x5', '\x66', '\x34', '\x2', '\x330', '\x331', '\x5', 'P', ')', 
		'\x2', '\x331', 'K', '\x3', '\x2', '\x2', '\x2', '\x332', '\x334', '\x5', 
		'\\', '/', '\x2', '\x333', '\x335', '\x5', 'N', '(', '\x2', '\x334', '\x333', 
		'\x3', '\x2', '\x2', '\x2', '\x335', '\x336', '\x3', '\x2', '\x2', '\x2', 
		'\x336', '\x334', '\x3', '\x2', '\x2', '\x2', '\x336', '\x337', '\x3', 
		'\x2', '\x2', '\x2', '\x337', 'M', '\x3', '\x2', '\x2', '\x2', '\x338', 
		'\x339', '\x5', '\x62', '\x32', '\x2', '\x339', '\x33B', '\x5', '\\', 
		'/', '\x2', '\x33A', '\x33C', '\x5', '\x64', '\x33', '\x2', '\x33B', '\x33A', 
		'\x3', '\x2', '\x2', '\x2', '\x33B', '\x33C', '\x3', '\x2', '\x2', '\x2', 
		'\x33C', 'O', '\x3', '\x2', '\x2', '\x2', '\x33D', '\x33F', '\a', '\x83', 
		'\x2', '\x2', '\x33E', '\x340', '\t', '\xF', '\x2', '\x2', '\x33F', '\x33E', 
		'\x3', '\x2', '\x2', '\x2', '\x33F', '\x340', '\x3', '\x2', '\x2', '\x2', 
		'\x340', '\x341', '\x3', '\x2', '\x2', '\x2', '\x341', '\x346', '\x5', 
		'`', '\x31', '\x2', '\x342', '\x343', '\a', '\a', '\x2', '\x2', '\x343', 
		'\x345', '\x5', '`', '\x31', '\x2', '\x344', '\x342', '\x3', '\x2', '\x2', 
		'\x2', '\x345', '\x348', '\x3', '\x2', '\x2', '\x2', '\x346', '\x344', 
		'\x3', '\x2', '\x2', '\x2', '\x346', '\x347', '\x3', '\x2', '\x2', '\x2', 
		'\x347', '\x34B', '\x3', '\x2', '\x2', '\x2', '\x348', '\x346', '\x3', 
		'\x2', '\x2', '\x2', '\x349', '\x34A', '\a', 'M', '\x2', '\x2', '\x34A', 
		'\x34C', '\x5', '^', '\x30', '\x2', '\x34B', '\x349', '\x3', '\x2', '\x2', 
		'\x2', '\x34B', '\x34C', '\x3', '\x2', '\x2', '\x2', '\x34C', '\x34E', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x34F', '\x5', '\n', '\x6', '\x2', 
		'\x34E', '\x34D', '\x3', '\x2', '\x2', '\x2', '\x34E', '\x34F', '\x3', 
		'\x2', '\x2', '\x2', '\x34F', '\x351', '\x3', '\x2', '\x2', '\x2', '\x350', 
		'\x352', '\x5', 'T', '+', '\x2', '\x351', '\x350', '\x3', '\x2', '\x2', 
		'\x2', '\x351', '\x352', '\x3', '\x2', '\x2', '\x2', '\x352', '\x35C', 
		'\x3', '\x2', '\x2', '\x2', '\x353', '\x354', '\a', '\xAF', '\x2', '\x2', 
		'\x354', '\x359', '\x5', 'X', '-', '\x2', '\x355', '\x356', '\a', '\a', 
		'\x2', '\x2', '\x356', '\x358', '\x5', 'X', '-', '\x2', '\x357', '\x355', 
		'\x3', '\x2', '\x2', '\x2', '\x358', '\x35B', '\x3', '\x2', '\x2', '\x2', 
		'\x359', '\x357', '\x3', '\x2', '\x2', '\x2', '\x359', '\x35A', '\x3', 
		'\x2', '\x2', '\x2', '\x35A', '\x35D', '\x3', '\x2', '\x2', '\x2', '\x35B', 
		'\x359', '\x3', '\x2', '\x2', '\x2', '\x35C', '\x353', '\x3', '\x2', '\x2', 
		'\x2', '\x35C', '\x35D', '\x3', '\x2', '\x2', '\x2', '\x35D', '\x361', 
		'\x3', '\x2', '\x2', '\x2', '\x35E', '\x35F', '\a', '\x91', '\x2', '\x2', 
		'\x35F', '\x361', '\x5', 'R', '*', '\x2', '\x360', '\x33D', '\x3', '\x2', 
		'\x2', '\x2', '\x360', '\x35E', '\x3', '\x2', '\x2', '\x2', '\x361', 'Q', 
		'\x3', '\x2', '\x2', '\x2', '\x362', '\x363', '\a', '\x5', '\x2', '\x2', 
		'\x363', '\x364', '\x5', 'Z', '.', '\x2', '\x364', '\x36C', '\a', '\x6', 
		'\x2', '\x2', '\x365', '\x366', '\a', '\a', '\x2', '\x2', '\x366', '\x367', 
		'\a', '\x5', '\x2', '\x2', '\x367', '\x368', '\x5', 'Z', '.', '\x2', '\x368', 
		'\x369', '\a', '\x6', '\x2', '\x2', '\x369', '\x36B', '\x3', '\x2', '\x2', 
		'\x2', '\x36A', '\x365', '\x3', '\x2', '\x2', '\x2', '\x36B', '\x36E', 
		'\x3', '\x2', '\x2', '\x2', '\x36C', '\x36A', '\x3', '\x2', '\x2', '\x2', 
		'\x36C', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x36D', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\x36E', '\x36C', '\x3', '\x2', '\x2', '\x2', '\x36F', '\x370', 
		'\a', 'P', '\x2', '\x2', '\x370', '\x371', '\a', '*', '\x2', '\x2', '\x371', 
		'\x373', '\x5', 'Z', '.', '\x2', '\x372', '\x374', '\x5', 'V', ',', '\x2', 
		'\x373', '\x372', '\x3', '\x2', '\x2', '\x2', '\x373', '\x374', '\x3', 
		'\x2', '\x2', '\x2', '\x374', 'U', '\x3', '\x2', '\x2', '\x2', '\x375', 
		'\x376', '\a', 'Q', '\x2', '\x2', '\x376', '\x377', '\x5', '*', '\x16', 
		'\x2', '\x377', 'W', '\x3', '\x2', '\x2', '\x2', '\x378', '\x379', '\x5', 
		'\xBC', '_', '\x2', '\x379', '\x37A', '\a', '#', '\x2', '\x2', '\x37A', 
		'\x37B', '\x5', 'l', '\x37', '\x2', '\x37B', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\x37C', '\x381', '\x5', '*', '\x16', '\x2', '\x37D', '\x37E', 
		'\a', '\a', '\x2', '\x2', '\x37E', '\x380', '\x5', '*', '\x16', '\x2', 
		'\x37F', '\x37D', '\x3', '\x2', '\x2', '\x2', '\x380', '\x383', '\x3', 
		'\x2', '\x2', '\x2', '\x381', '\x37F', '\x3', '\x2', '\x2', '\x2', '\x381', 
		'\x382', '\x3', '\x2', '\x2', '\x2', '\x382', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x383', '\x381', '\x3', '\x2', '\x2', '\x2', '\x384', '\x389', 
		'\x5', '\xAA', 'V', '\x2', '\x385', '\x387', '\a', '#', '\x2', '\x2', 
		'\x386', '\x385', '\x3', '\x2', '\x2', '\x2', '\x386', '\x387', '\x3', 
		'\x2', '\x2', '\x2', '\x387', '\x388', '\x3', '\x2', '\x2', '\x2', '\x388', 
		'\x38A', '\x5', '\xBA', '^', '\x2', '\x389', '\x386', '\x3', '\x2', '\x2', 
		'\x2', '\x389', '\x38A', '\x3', '\x2', '\x2', '\x2', '\x38A', '\x390', 
		'\x3', '\x2', '\x2', '\x2', '\x38B', '\x38C', '\a', 'W', '\x2', '\x2', 
		'\x38C', '\x38D', '\a', '*', '\x2', '\x2', '\x38D', '\x391', '\x5', '\xB4', 
		'[', '\x2', '\x38E', '\x38F', '\a', 'h', '\x2', '\x2', '\x38F', '\x391', 
		'\a', 'W', '\x2', '\x2', '\x390', '\x38B', '\x3', '\x2', '\x2', '\x2', 
		'\x390', '\x38E', '\x3', '\x2', '\x2', '\x2', '\x390', '\x391', '\x3', 
		'\x2', '\x2', '\x2', '\x391', '\x3B1', '\x3', '\x2', '\x2', '\x2', '\x392', 
		'\x393', '\x5', '\xA2', 'R', '\x2', '\x393', '\x394', '\a', '\x5', '\x2', 
		'\x2', '\x394', '\x399', '\x5', '*', '\x16', '\x2', '\x395', '\x396', 
		'\a', '\a', '\x2', '\x2', '\x396', '\x398', '\x5', '*', '\x16', '\x2', 
		'\x397', '\x395', '\x3', '\x2', '\x2', '\x2', '\x398', '\x39B', '\x3', 
		'\x2', '\x2', '\x2', '\x399', '\x397', '\x3', '\x2', '\x2', '\x2', '\x399', 
		'\x39A', '\x3', '\x2', '\x2', '\x2', '\x39A', '\x39C', '\x3', '\x2', '\x2', 
		'\x2', '\x39B', '\x399', '\x3', '\x2', '\x2', '\x2', '\x39C', '\x3A1', 
		'\a', '\x6', '\x2', '\x2', '\x39D', '\x39F', '\a', '#', '\x2', '\x2', 
		'\x39E', '\x39D', '\x3', '\x2', '\x2', '\x2', '\x39E', '\x39F', '\x3', 
		'\x2', '\x2', '\x2', '\x39F', '\x3A0', '\x3', '\x2', '\x2', '\x2', '\x3A0', 
		'\x3A2', '\x5', '\xBA', '^', '\x2', '\x3A1', '\x39E', '\x3', '\x2', '\x2', 
		'\x2', '\x3A1', '\x3A2', '\x3', '\x2', '\x2', '\x2', '\x3A2', '\x3B1', 
		'\x3', '\x2', '\x2', '\x2', '\x3A3', '\x3A4', '\a', '\x5', '\x2', '\x2', 
		'\x3A4', '\x3A5', '\x5', '^', '\x30', '\x2', '\x3A5', '\x3A6', '\a', '\x6', 
		'\x2', '\x2', '\x3A6', '\x3B1', '\x3', '\x2', '\x2', '\x2', '\x3A7', '\x3A8', 
		'\a', '\x5', '\x2', '\x2', '\x3A8', '\x3A9', '\x5', 'H', '%', '\x2', '\x3A9', 
		'\x3AE', '\a', '\x6', '\x2', '\x2', '\x3AA', '\x3AC', '\a', '#', '\x2', 
		'\x2', '\x3AB', '\x3AA', '\x3', '\x2', '\x2', '\x2', '\x3AB', '\x3AC', 
		'\x3', '\x2', '\x2', '\x2', '\x3AC', '\x3AD', '\x3', '\x2', '\x2', '\x2', 
		'\x3AD', '\x3AF', '\x5', '\xBA', '^', '\x2', '\x3AE', '\x3AB', '\x3', 
		'\x2', '\x2', '\x2', '\x3AE', '\x3AF', '\x3', '\x2', '\x2', '\x2', '\x3AF', 
		'\x3B1', '\x3', '\x2', '\x2', '\x2', '\x3B0', '\x384', '\x3', '\x2', '\x2', 
		'\x2', '\x3B0', '\x392', '\x3', '\x2', '\x2', '\x2', '\x3B0', '\x3A3', 
		'\x3', '\x2', '\x2', '\x2', '\x3B0', '\x3A7', '\x3', '\x2', '\x2', '\x2', 
		'\x3B1', ']', '\x3', '\x2', '\x2', '\x2', '\x3B2', '\x3B7', '\x5', '\\', 
		'/', '\x2', '\x3B3', '\x3B4', '\a', '\a', '\x2', '\x2', '\x3B4', '\x3B6', 
		'\x5', '\\', '/', '\x2', '\x3B5', '\x3B3', '\x3', '\x2', '\x2', '\x2', 
		'\x3B6', '\x3B9', '\x3', '\x2', '\x2', '\x2', '\x3B7', '\x3B5', '\x3', 
		'\x2', '\x2', '\x2', '\x3B7', '\x3B8', '\x3', '\x2', '\x2', '\x2', '\x3B8', 
		'\x3BC', '\x3', '\x2', '\x2', '\x2', '\x3B9', '\x3B7', '\x3', '\x2', '\x2', 
		'\x2', '\x3BA', '\x3BC', '\x5', 'L', '\'', '\x2', '\x3BB', '\x3B2', '\x3', 
		'\x2', '\x2', '\x2', '\x3BB', '\x3BA', '\x3', '\x2', '\x2', '\x2', '\x3BC', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x3BD', '\x3CA', '\a', '\t', '\x2', 
		'\x2', '\x3BE', '\x3BF', '\x5', '\xA8', 'U', '\x2', '\x3BF', '\x3C0', 
		'\a', '\x4', '\x2', '\x2', '\x3C0', '\x3C1', '\a', '\t', '\x2', '\x2', 
		'\x3C1', '\x3CA', '\x3', '\x2', '\x2', '\x2', '\x3C2', '\x3C7', '\x5', 
		'*', '\x16', '\x2', '\x3C3', '\x3C5', '\a', '#', '\x2', '\x2', '\x3C4', 
		'\x3C3', '\x3', '\x2', '\x2', '\x2', '\x3C4', '\x3C5', '\x3', '\x2', '\x2', 
		'\x2', '\x3C5', '\x3C6', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3C8', 
		'\x5', '\x9C', 'O', '\x2', '\x3C7', '\x3C4', '\x3', '\x2', '\x2', '\x2', 
		'\x3C7', '\x3C8', '\x3', '\x2', '\x2', '\x2', '\x3C8', '\x3CA', '\x3', 
		'\x2', '\x2', '\x2', '\x3C9', '\x3BD', '\x3', '\x2', '\x2', '\x2', '\x3C9', 
		'\x3BE', '\x3', '\x2', '\x2', '\x2', '\x3C9', '\x3C2', '\x3', '\x2', '\x2', 
		'\x2', '\x3CA', '\x61', '\x3', '\x2', '\x2', '\x2', '\x3CB', '\x3D9', 
		'\a', '\a', '\x2', '\x2', '\x3CC', '\x3CE', '\a', '\x66', '\x2', '\x2', 
		'\x3CD', '\x3CC', '\x3', '\x2', '\x2', '\x2', '\x3CD', '\x3CE', '\x3', 
		'\x2', '\x2', '\x2', '\x3CE', '\x3D5', '\x3', '\x2', '\x2', '\x2', '\x3CF', 
		'\x3D1', '\a', '\x62', '\x2', '\x2', '\x3D0', '\x3D2', '\a', 'p', '\x2', 
		'\x2', '\x3D1', '\x3D0', '\x3', '\x2', '\x2', '\x2', '\x3D1', '\x3D2', 
		'\x3', '\x2', '\x2', '\x2', '\x3D2', '\x3D6', '\x3', '\x2', '\x2', '\x2', 
		'\x3D3', '\x3D6', '\a', 'Y', '\x2', '\x2', '\x3D4', '\x3D6', '\a', '\x35', 
		'\x2', '\x2', '\x3D5', '\x3CF', '\x3', '\x2', '\x2', '\x2', '\x3D5', '\x3D3', 
		'\x3', '\x2', '\x2', '\x2', '\x3D5', '\x3D4', '\x3', '\x2', '\x2', '\x2', 
		'\x3D5', '\x3D6', '\x3', '\x2', '\x2', '\x2', '\x3D6', '\x3D7', '\x3', 
		'\x2', '\x2', '\x2', '\x3D7', '\x3D9', '\a', '`', '\x2', '\x2', '\x3D8', 
		'\x3CB', '\x3', '\x2', '\x2', '\x2', '\x3D8', '\x3CD', '\x3', '\x2', '\x2', 
		'\x2', '\x3D9', '\x63', '\x3', '\x2', '\x2', '\x2', '\x3DA', '\x3DB', 
		'\a', 'm', '\x2', '\x2', '\x3DB', '\x3DF', '\x5', '*', '\x16', '\x2', 
		'\x3DC', '\x3DD', '\a', '\x8F', '\x2', '\x2', '\x3DD', '\x3DF', '\x5', 
		'h', '\x35', '\x2', '\x3DE', '\x3DA', '\x3', '\x2', '\x2', '\x2', '\x3DE', 
		'\x3DC', '\x3', '\x2', '\x2', '\x2', '\x3DF', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x3E0', '\x3E2', '\a', '\x8C', '\x2', '\x2', '\x3E1', '\x3E3', 
		'\a', '\x1F', '\x2', '\x2', '\x3E2', '\x3E1', '\x3', '\x2', '\x2', '\x2', 
		'\x3E2', '\x3E3', '\x3', '\x2', '\x2', '\x2', '\x3E3', '\x3E7', '\x3', 
		'\x2', '\x2', '\x2', '\x3E4', '\x3E7', '\a', '\\', '\x2', '\x2', '\x3E5', 
		'\x3E7', '\a', '\x46', '\x2', '\x2', '\x3E6', '\x3E0', '\x3', '\x2', '\x2', 
		'\x2', '\x3E6', '\x3E4', '\x3', '\x2', '\x2', '\x2', '\x3E6', '\x3E5', 
		'\x3', '\x2', '\x2', '\x2', '\x3E7', 'g', '\x3', '\x2', '\x2', '\x2', 
		'\x3E8', '\x3E9', '\a', '\x5', '\x2', '\x2', '\x3E9', '\x3EE', '\x5', 
		'\xAE', 'X', '\x2', '\x3EA', '\x3EB', '\a', '\a', '\x2', '\x2', '\x3EB', 
		'\x3ED', '\x5', '\xAE', 'X', '\x2', '\x3EC', '\x3EA', '\x3', '\x2', '\x2', 
		'\x2', '\x3ED', '\x3F0', '\x3', '\x2', '\x2', '\x2', '\x3EE', '\x3EC', 
		'\x3', '\x2', '\x2', '\x2', '\x3EE', '\x3EF', '\x3', '\x2', '\x2', '\x2', 
		'\x3EF', '\x3F1', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3EE', '\x3', 
		'\x2', '\x2', '\x2', '\x3F1', '\x3F2', '\a', '\x6', '\x2', '\x2', '\x3F2', 
		'i', '\x3', '\x2', '\x2', '\x2', '\x3F3', '\x3F4', '\a', '\xB3', '\x2', 
		'\x2', '\x3F4', '\x3F5', '\a', '\x5', '\x2', '\x2', '\x3F5', '\x3F6', 
		'\a', '\x95', '\x2', '\x2', '\x3F6', '\x3F7', '\x5', '*', '\x16', '\x2', 
		'\x3F7', '\x3F8', '\a', '\x6', '\x2', '\x2', '\x3F8', 'k', '\x3', '\x2', 
		'\x2', '\x2', '\x3F9', '\x3FB', '\a', '\x5', '\x2', '\x2', '\x3FA', '\x3FC', 
		'\x5', '\xC0', '\x61', '\x2', '\x3FB', '\x3FA', '\x3', '\x2', '\x2', '\x2', 
		'\x3FB', '\x3FC', '\x3', '\x2', '\x2', '\x2', '\x3FC', '\x400', '\x3', 
		'\x2', '\x2', '\x2', '\x3FD', '\x3FE', '\a', '\x9A', '\x2', '\x2', '\x3FE', 
		'\x3FF', '\a', '*', '\x2', '\x2', '\x3FF', '\x401', '\x5', 'Z', '.', '\x2', 
		'\x400', '\x3FD', '\x3', '\x2', '\x2', '\x2', '\x400', '\x401', '\x3', 
		'\x2', '\x2', '\x2', '\x401', '\x402', '\x3', '\x2', '\x2', '\x2', '\x402', 
		'\x403', '\a', 'o', '\x2', '\x2', '\x403', '\x404', '\a', '*', '\x2', 
		'\x2', '\x404', '\x409', '\x5', '|', '?', '\x2', '\x405', '\x406', '\a', 
		'\a', '\x2', '\x2', '\x406', '\x408', '\x5', '|', '?', '\x2', '\x407', 
		'\x405', '\x3', '\x2', '\x2', '\x2', '\x408', '\x40B', '\x3', '\x2', '\x2', 
		'\x2', '\x409', '\x407', '\x3', '\x2', '\x2', '\x2', '\x409', '\x40A', 
		'\x3', '\x2', '\x2', '\x2', '\x40A', '\x40D', '\x3', '\x2', '\x2', '\x2', 
		'\x40B', '\x409', '\x3', '\x2', '\x2', '\x2', '\x40C', '\x40E', '\x5', 
		'p', '\x39', '\x2', '\x40D', '\x40C', '\x3', '\x2', '\x2', '\x2', '\x40D', 
		'\x40E', '\x3', '\x2', '\x2', '\x2', '\x40E', '\x40F', '\x3', '\x2', '\x2', 
		'\x2', '\x40F', '\x410', '\a', '\x6', '\x2', '\x2', '\x410', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x411', '\x42C', '\a', '\x99', '\x2', '\x2', '\x412', 
		'\x42D', '\x5', '\xBC', '_', '\x2', '\x413', '\x415', '\a', '\x5', '\x2', 
		'\x2', '\x414', '\x416', '\x5', '\xC0', '\x61', '\x2', '\x415', '\x414', 
		'\x3', '\x2', '\x2', '\x2', '\x415', '\x416', '\x3', '\x2', '\x2', '\x2', 
		'\x416', '\x41A', '\x3', '\x2', '\x2', '\x2', '\x417', '\x418', '\a', 
		'\x9A', '\x2', '\x2', '\x418', '\x419', '\a', '*', '\x2', '\x2', '\x419', 
		'\x41B', '\x5', 'Z', '.', '\x2', '\x41A', '\x417', '\x3', '\x2', '\x2', 
		'\x2', '\x41A', '\x41B', '\x3', '\x2', '\x2', '\x2', '\x41B', '\x426', 
		'\x3', '\x2', '\x2', '\x2', '\x41C', '\x41D', '\a', 'o', '\x2', '\x2', 
		'\x41D', '\x41E', '\a', '*', '\x2', '\x2', '\x41E', '\x423', '\x5', '|', 
		'?', '\x2', '\x41F', '\x420', '\a', '\a', '\x2', '\x2', '\x420', '\x422', 
		'\x5', '|', '?', '\x2', '\x421', '\x41F', '\x3', '\x2', '\x2', '\x2', 
		'\x422', '\x425', '\x3', '\x2', '\x2', '\x2', '\x423', '\x421', '\x3', 
		'\x2', '\x2', '\x2', '\x423', '\x424', '\x3', '\x2', '\x2', '\x2', '\x424', 
		'\x427', '\x3', '\x2', '\x2', '\x2', '\x425', '\x423', '\x3', '\x2', '\x2', 
		'\x2', '\x426', '\x41C', '\x3', '\x2', '\x2', '\x2', '\x426', '\x427', 
		'\x3', '\x2', '\x2', '\x2', '\x427', '\x429', '\x3', '\x2', '\x2', '\x2', 
		'\x428', '\x42A', '\x5', 'p', '\x39', '\x2', '\x429', '\x428', '\x3', 
		'\x2', '\x2', '\x2', '\x429', '\x42A', '\x3', '\x2', '\x2', '\x2', '\x42A', 
		'\x42B', '\x3', '\x2', '\x2', '\x2', '\x42B', '\x42D', '\a', '\x6', '\x2', 
		'\x2', '\x42C', '\x412', '\x3', '\x2', '\x2', '\x2', '\x42C', '\x413', 
		'\x3', '\x2', '\x2', '\x2', '\x42D', 'o', '\x3', '\x2', '\x2', '\x2', 
		'\x42E', '\x436', '\x5', 'r', ':', '\x2', '\x42F', '\x430', '\a', '\xB5', 
		'\x2', '\x2', '\x430', '\x431', '\a', 'g', '\x2', '\x2', '\x431', '\x437', 
		'\a', '\xB7', '\x2', '\x2', '\x432', '\x433', '\a', '\x9E', '\x2', '\x2', 
		'\x433', '\x437', '\a', '\x80', '\x2', '\x2', '\x434', '\x437', '\a', 
		'P', '\x2', '\x2', '\x435', '\x437', '\a', '\xB6', '\x2', '\x2', '\x436', 
		'\x42F', '\x3', '\x2', '\x2', '\x2', '\x436', '\x432', '\x3', '\x2', '\x2', 
		'\x2', '\x436', '\x434', '\x3', '\x2', '\x2', '\x2', '\x436', '\x435', 
		'\x3', '\x2', '\x2', '\x2', '\x436', '\x437', '\x3', '\x2', '\x2', '\x2', 
		'\x437', 'q', '\x3', '\x2', '\x2', '\x2', '\x438', '\x43F', '\t', '\x10', 
		'\x2', '\x2', '\x439', '\x440', '\x5', '\x84', '\x43', '\x2', '\x43A', 
		'\x43B', '\a', ')', '\x2', '\x2', '\x43B', '\x43C', '\x5', '\x80', '\x41', 
		'\x2', '\x43C', '\x43D', '\a', '\"', '\x2', '\x2', '\x43D', '\x43E', '\x5', 
		'\x82', '\x42', '\x2', '\x43E', '\x440', '\x3', '\x2', '\x2', '\x2', '\x43F', 
		'\x439', '\x3', '\x2', '\x2', '\x2', '\x43F', '\x43A', '\x3', '\x2', '\x2', 
		'\x2', '\x440', 's', '\x3', '\x2', '\x2', '\x2', '\x441', '\x443', '\a', 
		'\x96', '\x2', '\x2', '\x442', '\x444', '\a', 'v', '\x2', '\x2', '\x443', 
		'\x442', '\x3', '\x2', '\x2', '\x2', '\x443', '\x444', '\x3', '\x2', '\x2', 
		'\x2', '\x444', '\x445', '\x3', '\x2', '\x2', '\x2', '\x445', '\x44A', 
		'\x5', '(', '\x15', '\x2', '\x446', '\x447', '\a', '\a', '\x2', '\x2', 
		'\x447', '\x449', '\x5', '(', '\x15', '\x2', '\x448', '\x446', '\x3', 
		'\x2', '\x2', '\x2', '\x449', '\x44C', '\x3', '\x2', '\x2', '\x2', '\x44A', 
		'\x448', '\x3', '\x2', '\x2', '\x2', '\x44A', '\x44B', '\x3', '\x2', '\x2', 
		'\x2', '\x44B', 'u', '\x3', '\x2', '\x2', '\x2', '\x44C', '\x44A', '\x3', 
		'\x2', '\x2', '\x2', '\x44D', '\x44E', '\a', 'o', '\x2', '\x2', '\x44E', 
		'\x44F', '\a', '*', '\x2', '\x2', '\x44F', '\x454', '\x5', '|', '?', '\x2', 
		'\x450', '\x451', '\a', '\a', '\x2', '\x2', '\x451', '\x453', '\x5', '|', 
		'?', '\x2', '\x452', '\x450', '\x3', '\x2', '\x2', '\x2', '\x453', '\x456', 
		'\x3', '\x2', '\x2', '\x2', '\x454', '\x452', '\x3', '\x2', '\x2', '\x2', 
		'\x454', '\x455', '\x3', '\x2', '\x2', '\x2', '\x455', 'w', '\x3', '\x2', 
		'\x2', '\x2', '\x456', '\x454', '\x3', '\x2', '\x2', '\x2', '\x457', '\x458', 
		'\a', '\x64', '\x2', '\x2', '\x458', '\x45A', '\x5', '*', '\x16', '\x2', 
		'\x459', '\x45B', '\x5', 'z', '>', '\x2', '\x45A', '\x459', '\x3', '\x2', 
		'\x2', '\x2', '\x45A', '\x45B', '\x3', '\x2', '\x2', '\x2', '\x45B', 'y', 
		'\x3', '\x2', '\x2', '\x2', '\x45C', '\x45D', '\t', '\x11', '\x2', '\x2', 
		'\x45D', '\x45E', '\x5', '*', '\x16', '\x2', '\x45E', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x45F', '\x462', '\x5', '*', '\x16', '\x2', '\x460', '\x461', 
		'\a', '/', '\x2', '\x2', '\x461', '\x463', '\x5', '\xB0', 'Y', '\x2', 
		'\x462', '\x460', '\x3', '\x2', '\x2', '\x2', '\x462', '\x463', '\x3', 
		'\x2', '\x2', '\x2', '\x463', '\x465', '\x3', '\x2', '\x2', '\x2', '\x464', 
		'\x466', '\x5', '~', '@', '\x2', '\x465', '\x464', '\x3', '\x2', '\x2', 
		'\x2', '\x465', '\x466', '\x3', '\x2', '\x2', '\x2', '\x466', '\x469', 
		'\x3', '\x2', '\x2', '\x2', '\x467', '\x468', '\a', '\xB0', '\x2', '\x2', 
		'\x468', '\x46A', '\t', '\x12', '\x2', '\x2', '\x469', '\x467', '\x3', 
		'\x2', '\x2', '\x2', '\x469', '\x46A', '\x3', '\x2', '\x2', '\x2', '\x46A', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x46B', '\x46C', '\t', '\x13', '\x2', 
		'\x2', '\x46C', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x46D', '\x46E', 
		'\x5', '*', '\x16', '\x2', '\x46E', '\x46F', '\a', '\x9C', '\x2', '\x2', 
		'\x46F', '\x478', '\x3', '\x2', '\x2', '\x2', '\x470', '\x471', '\x5', 
		'*', '\x16', '\x2', '\x471', '\x472', '\a', '\x9F', '\x2', '\x2', '\x472', 
		'\x478', '\x3', '\x2', '\x2', '\x2', '\x473', '\x474', '\a', '\x9E', '\x2', 
		'\x2', '\x474', '\x478', '\a', '\x80', '\x2', '\x2', '\x475', '\x476', 
		'\a', '\x9D', '\x2', '\x2', '\x476', '\x478', '\a', '\x9C', '\x2', '\x2', 
		'\x477', '\x46D', '\x3', '\x2', '\x2', '\x2', '\x477', '\x470', '\x3', 
		'\x2', '\x2', '\x2', '\x477', '\x473', '\x3', '\x2', '\x2', '\x2', '\x477', 
		'\x475', '\x3', '\x2', '\x2', '\x2', '\x478', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x479', '\x47A', '\x5', '*', '\x16', '\x2', '\x47A', '\x47B', 
		'\a', '\x9C', '\x2', '\x2', '\x47B', '\x484', '\x3', '\x2', '\x2', '\x2', 
		'\x47C', '\x47D', '\x5', '*', '\x16', '\x2', '\x47D', '\x47E', '\a', '\x9F', 
		'\x2', '\x2', '\x47E', '\x484', '\x3', '\x2', '\x2', '\x2', '\x47F', '\x480', 
		'\a', '\x9E', '\x2', '\x2', '\x480', '\x484', '\a', '\x80', '\x2', '\x2', 
		'\x481', '\x482', '\a', '\x9D', '\x2', '\x2', '\x482', '\x484', '\a', 
		'\x9F', '\x2', '\x2', '\x483', '\x479', '\x3', '\x2', '\x2', '\x2', '\x483', 
		'\x47C', '\x3', '\x2', '\x2', '\x2', '\x483', '\x47F', '\x3', '\x2', '\x2', 
		'\x2', '\x483', '\x481', '\x3', '\x2', '\x2', '\x2', '\x484', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x485', '\x486', '\x5', '*', '\x16', '\x2', 
		'\x486', '\x487', '\a', '\x9C', '\x2', '\x2', '\x487', '\x48D', '\x3', 
		'\x2', '\x2', '\x2', '\x488', '\x489', '\a', '\x9D', '\x2', '\x2', '\x489', 
		'\x48D', '\a', '\x9C', '\x2', '\x2', '\x48A', '\x48B', '\a', '\x9E', '\x2', 
		'\x2', '\x48B', '\x48D', '\a', '\x80', '\x2', '\x2', '\x48C', '\x485', 
		'\x3', '\x2', '\x2', '\x2', '\x48C', '\x488', '\x3', '\x2', '\x2', '\x2', 
		'\x48C', '\x48A', '\x3', '\x2', '\x2', '\x2', '\x48D', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x48E', '\x48F', '\t', '\x14', '\x2', '\x2', '\x48F', 
		'\x490', '\a', '\x5', '\x2', '\x2', '\x490', '\x491', '\x5', '*', '\x16', 
		'\x2', '\x491', '\x492', '\a', '\x6', '\x2', '\x2', '\x492', '\x493', 
		'\a', '\x99', '\x2', '\x2', '\x493', '\x495', '\a', '\x5', '\x2', '\x2', 
		'\x494', '\x496', '\x5', '\x8C', 'G', '\x2', '\x495', '\x494', '\x3', 
		'\x2', '\x2', '\x2', '\x495', '\x496', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x497', '\x3', '\x2', '\x2', '\x2', '\x497', '\x499', '\x5', '\x90', 
		'I', '\x2', '\x498', '\x49A', '\x5', 'r', ':', '\x2', '\x499', '\x498', 
		'\x3', '\x2', '\x2', '\x2', '\x499', '\x49A', '\x3', '\x2', '\x2', '\x2', 
		'\x49A', '\x49B', '\x3', '\x2', '\x2', '\x2', '\x49B', '\x49C', '\a', 
		'\x6', '\x2', '\x2', '\x49C', '\x4E4', '\x3', '\x2', '\x2', '\x2', '\x49D', 
		'\x49E', '\t', '\x15', '\x2', '\x2', '\x49E', '\x49F', '\a', '\x5', '\x2', 
		'\x2', '\x49F', '\x4A0', '\a', '\x6', '\x2', '\x2', '\x4A0', '\x4A1', 
		'\a', '\x99', '\x2', '\x2', '\x4A1', '\x4A3', '\a', '\x5', '\x2', '\x2', 
		'\x4A2', '\x4A4', '\x5', '\x8C', 'G', '\x2', '\x4A3', '\x4A2', '\x3', 
		'\x2', '\x2', '\x2', '\x4A3', '\x4A4', '\x3', '\x2', '\x2', '\x2', '\x4A4', 
		'\x4A6', '\x3', '\x2', '\x2', '\x2', '\x4A5', '\x4A7', '\x5', '\x8E', 
		'H', '\x2', '\x4A6', '\x4A5', '\x3', '\x2', '\x2', '\x2', '\x4A6', '\x4A7', 
		'\x3', '\x2', '\x2', '\x2', '\x4A7', '\x4A8', '\x3', '\x2', '\x2', '\x2', 
		'\x4A8', '\x4E4', '\a', '\x6', '\x2', '\x2', '\x4A9', '\x4AA', '\t', '\x16', 
		'\x2', '\x2', '\x4AA', '\x4AB', '\a', '\x5', '\x2', '\x2', '\x4AB', '\x4AC', 
		'\a', '\x6', '\x2', '\x2', '\x4AC', '\x4AD', '\a', '\x99', '\x2', '\x2', 
		'\x4AD', '\x4AF', '\a', '\x5', '\x2', '\x2', '\x4AE', '\x4B0', '\x5', 
		'\x8C', 'G', '\x2', '\x4AF', '\x4AE', '\x3', '\x2', '\x2', '\x2', '\x4AF', 
		'\x4B0', '\x3', '\x2', '\x2', '\x2', '\x4B0', '\x4B1', '\x3', '\x2', '\x2', 
		'\x2', '\x4B1', '\x4B2', '\x5', '\x90', 'I', '\x2', '\x4B2', '\x4B3', 
		'\a', '\x6', '\x2', '\x2', '\x4B3', '\x4E4', '\x3', '\x2', '\x2', '\x2', 
		'\x4B4', '\x4B5', '\t', '\x17', '\x2', '\x2', '\x4B5', '\x4B6', '\a', 
		'\x5', '\x2', '\x2', '\x4B6', '\x4B8', '\x5', '*', '\x16', '\x2', '\x4B7', 
		'\x4B9', '\x5', '\x88', '\x45', '\x2', '\x4B8', '\x4B7', '\x3', '\x2', 
		'\x2', '\x2', '\x4B8', '\x4B9', '\x3', '\x2', '\x2', '\x2', '\x4B9', '\x4BB', 
		'\x3', '\x2', '\x2', '\x2', '\x4BA', '\x4BC', '\x5', '\x8A', '\x46', '\x2', 
		'\x4BB', '\x4BA', '\x3', '\x2', '\x2', '\x2', '\x4BB', '\x4BC', '\x3', 
		'\x2', '\x2', '\x2', '\x4BC', '\x4BD', '\x3', '\x2', '\x2', '\x2', '\x4BD', 
		'\x4BE', '\a', '\x6', '\x2', '\x2', '\x4BE', '\x4BF', '\a', '\x99', '\x2', 
		'\x2', '\x4BF', '\x4C1', '\a', '\x5', '\x2', '\x2', '\x4C0', '\x4C2', 
		'\x5', '\x8C', 'G', '\x2', '\x4C1', '\x4C0', '\x3', '\x2', '\x2', '\x2', 
		'\x4C1', '\x4C2', '\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4C3', '\x3', 
		'\x2', '\x2', '\x2', '\x4C3', '\x4C4', '\x5', '\x90', 'I', '\x2', '\x4C4', 
		'\x4C5', '\a', '\x6', '\x2', '\x2', '\x4C5', '\x4E4', '\x3', '\x2', '\x2', 
		'\x2', '\x4C6', '\x4C7', '\a', '\xA5', '\x2', '\x2', '\x4C7', '\x4C8', 
		'\a', '\x5', '\x2', '\x2', '\x4C8', '\x4C9', '\x5', '*', '\x16', '\x2', 
		'\x4C9', '\x4CA', '\a', '\a', '\x2', '\x2', '\x4CA', '\x4CB', '\x5', '\x16', 
		'\f', '\x2', '\x4CB', '\x4CC', '\a', '\x6', '\x2', '\x2', '\x4CC', '\x4CD', 
		'\a', '\x99', '\x2', '\x2', '\x4CD', '\x4CF', '\a', '\x5', '\x2', '\x2', 
		'\x4CE', '\x4D0', '\x5', '\x8C', 'G', '\x2', '\x4CF', '\x4CE', '\x3', 
		'\x2', '\x2', '\x2', '\x4CF', '\x4D0', '\x3', '\x2', '\x2', '\x2', '\x4D0', 
		'\x4D1', '\x3', '\x2', '\x2', '\x2', '\x4D1', '\x4D3', '\x5', '\x90', 
		'I', '\x2', '\x4D2', '\x4D4', '\x5', 'r', ':', '\x2', '\x4D3', '\x4D2', 
		'\x3', '\x2', '\x2', '\x2', '\x4D3', '\x4D4', '\x3', '\x2', '\x2', '\x2', 
		'\x4D4', '\x4D5', '\x3', '\x2', '\x2', '\x2', '\x4D5', '\x4D6', '\a', 
		'\x6', '\x2', '\x2', '\x4D6', '\x4E4', '\x3', '\x2', '\x2', '\x2', '\x4D7', 
		'\x4D8', '\a', '\xA6', '\x2', '\x2', '\x4D8', '\x4D9', '\a', '\x5', '\x2', 
		'\x2', '\x4D9', '\x4DA', '\x5', '*', '\x16', '\x2', '\x4DA', '\x4DB', 
		'\a', '\x6', '\x2', '\x2', '\x4DB', '\x4DC', '\a', '\x99', '\x2', '\x2', 
		'\x4DC', '\x4DE', '\a', '\x5', '\x2', '\x2', '\x4DD', '\x4DF', '\x5', 
		'\x8C', 'G', '\x2', '\x4DE', '\x4DD', '\x3', '\x2', '\x2', '\x2', '\x4DE', 
		'\x4DF', '\x3', '\x2', '\x2', '\x2', '\x4DF', '\x4E0', '\x3', '\x2', '\x2', 
		'\x2', '\x4E0', '\x4E1', '\x5', '\x90', 'I', '\x2', '\x4E1', '\x4E2', 
		'\a', '\x6', '\x2', '\x2', '\x4E2', '\x4E4', '\x3', '\x2', '\x2', '\x2', 
		'\x4E3', '\x48E', '\x3', '\x2', '\x2', '\x2', '\x4E3', '\x49D', '\x3', 
		'\x2', '\x2', '\x2', '\x4E3', '\x4A9', '\x3', '\x2', '\x2', '\x2', '\x4E3', 
		'\x4B4', '\x3', '\x2', '\x2', '\x2', '\x4E3', '\x4C6', '\x3', '\x2', '\x2', 
		'\x2', '\x4E3', '\x4D7', '\x3', '\x2', '\x2', '\x2', '\x4E4', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x4E5', '\x4E6', '\a', '\a', '\x2', '\x2', 
		'\x4E6', '\x4E7', '\x5', '\x16', '\f', '\x2', '\x4E7', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x4E8', '\x4E9', '\a', '\a', '\x2', '\x2', '\x4E9', 
		'\x4EA', '\x5', '\x16', '\f', '\x2', '\x4EA', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x4EB', '\x4EC', '\a', '\x9A', '\x2', '\x2', '\x4EC', '\x4EE', 
		'\a', '*', '\x2', '\x2', '\x4ED', '\x4EF', '\x5', '*', '\x16', '\x2', 
		'\x4EE', '\x4ED', '\x3', '\x2', '\x2', '\x2', '\x4EF', '\x4F0', '\x3', 
		'\x2', '\x2', '\x2', '\x4F0', '\x4EE', '\x3', '\x2', '\x2', '\x2', '\x4F0', 
		'\x4F1', '\x3', '\x2', '\x2', '\x2', '\x4F1', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x4F2', '\x4F3', '\a', 'o', '\x2', '\x2', '\x4F3', '\x4F5', '\a', 
		'*', '\x2', '\x2', '\x4F4', '\x4F6', '\x5', '*', '\x16', '\x2', '\x4F5', 
		'\x4F4', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4F7', '\x3', '\x2', '\x2', 
		'\x2', '\x4F7', '\x4F5', '\x3', '\x2', '\x2', '\x2', '\x4F7', '\x4F8', 
		'\x3', '\x2', '\x2', '\x2', '\x4F8', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x4F9', '\x4FA', '\a', 'o', '\x2', '\x2', '\x4FA', '\x4FB', '\a', '*', 
		'\x2', '\x2', '\x4FB', '\x4FC', '\x5', '\x90', 'I', '\x2', '\x4FC', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x4FD', '\x4FE', '\x5', 'H', '%', '\x2', 
		'\x4FE', '\x93', '\x3', '\x2', '\x2', '\x2', '\x4FF', '\x500', '\x5', 
		'H', '%', '\x2', '\x500', '\x95', '\x3', '\x2', '\x2', '\x2', '\x501', 
		'\x502', '\t', '\x18', '\x2', '\x2', '\x502', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x503', '\x504', '\a', '\xBD', '\x2', '\x2', '\x504', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x505', '\x508', '\x5', '*', '\x16', '\x2', 
		'\x506', '\x508', '\x5', '\x10', '\t', '\x2', '\x507', '\x505', '\x3', 
		'\x2', '\x2', '\x2', '\x507', '\x506', '\x3', '\x2', '\x2', '\x2', '\x508', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x509', '\x50A', '\t', '\x19', '\x2', 
		'\x2', '\x50A', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x50B', '\x50C', 
		'\t', '\x1A', '\x2', '\x2', '\x50C', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\x50D', '\x50E', '\x5', '\xC8', '\x65', '\x2', '\x50E', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\x50F', '\x510', '\x5', '\xA6', 'T', '\x2', '\x510', 
		'\x511', '\a', '\x4', '\x2', '\x2', '\x511', '\x513', '\x3', '\x2', '\x2', 
		'\x2', '\x512', '\x50F', '\x3', '\x2', '\x2', '\x2', '\x512', '\x513', 
		'\x3', '\x2', '\x2', '\x2', '\x513', '\x514', '\x3', '\x2', '\x2', '\x2', 
		'\x514', '\x515', '\x5', '\xC6', '\x64', '\x2', '\x515', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\x516', '\x517', '\x5', '\xC8', '\x65', '\x2', '\x517', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\x518', '\x519', '\x5', '\xC8', '\x65', 
		'\x2', '\x519', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x51A', '\x51B', 
		'\x5', '\xC8', '\x65', '\x2', '\x51B', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\x51C', '\x51D', '\x5', '\xA6', 'T', '\x2', '\x51D', '\x51E', '\a', '\x4', 
		'\x2', '\x2', '\x51E', '\x520', '\x3', '\x2', '\x2', '\x2', '\x51F', '\x51C', 
		'\x3', '\x2', '\x2', '\x2', '\x51F', '\x520', '\x3', '\x2', '\x2', '\x2', 
		'\x520', '\x521', '\x3', '\x2', '\x2', '\x2', '\x521', '\x522', '\x5', 
		'\xA8', 'U', '\x2', '\x522', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x523', 
		'\x524', '\x5', '\xAA', 'V', '\x2', '\x524', '\x525', '\a', '\x4', '\x2', 
		'\x2', '\x525', '\x527', '\x3', '\x2', '\x2', '\x2', '\x526', '\x523', 
		'\x3', '\x2', '\x2', '\x2', '\x526', '\x527', '\x3', '\x2', '\x2', '\x2', 
		'\x527', '\x528', '\x3', '\x2', '\x2', '\x2', '\x528', '\x529', '\x5', 
		'\xAE', 'X', '\x2', '\x529', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x52A', 
		'\x52B', '\x5', '\xC8', '\x65', '\x2', '\x52B', '\xAF', '\x3', '\x2', 
		'\x2', '\x2', '\x52C', '\x52D', '\x5', '\xC8', '\x65', '\x2', '\x52D', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\x52E', '\x52F', '\x5', '\xC8', '\x65', 
		'\x2', '\x52F', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x530', '\x531', 
		'\x5', '\xC8', '\x65', '\x2', '\x531', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\x532', '\x533', '\x5', '\xC8', '\x65', '\x2', '\x533', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\x534', '\x535', '\x5', '\xC8', '\x65', '\x2', '\x535', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\x536', '\x537', '\x5', '\xC8', '\x65', 
		'\x2', '\x537', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x538', '\x539', 
		'\x5', '\xC8', '\x65', '\x2', '\x539', '\xBD', '\x3', '\x2', '\x2', '\x2', 
		'\x53A', '\x53B', '\x5', '\xC8', '\x65', '\x2', '\x53B', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\x53C', '\x53D', '\x5', '\xC8', '\x65', '\x2', '\x53D', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\x53E', '\x53F', '\x5', '\xC8', '\x65', 
		'\x2', '\x53F', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x540', '\x541', 
		'\x5', '\xC8', '\x65', '\x2', '\x541', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\x542', '\x543', '\x5', '\xC8', '\x65', '\x2', '\x543', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\x544', '\x54C', '\a', '\xBA', '\x2', '\x2', '\x545', 
		'\x54C', '\x5', '\x9E', 'P', '\x2', '\x546', '\x54C', '\a', '\xBD', '\x2', 
		'\x2', '\x547', '\x548', '\a', '\x5', '\x2', '\x2', '\x548', '\x549', 
		'\x5', '\xC8', '\x65', '\x2', '\x549', '\x54A', '\a', '\x6', '\x2', '\x2', 
		'\x54A', '\x54C', '\x3', '\x2', '\x2', '\x2', '\x54B', '\x544', '\x3', 
		'\x2', '\x2', '\x2', '\x54B', '\x545', '\x3', '\x2', '\x2', '\x2', '\x54B', 
		'\x546', '\x3', '\x2', '\x2', '\x2', '\x54B', '\x547', '\x3', '\x2', '\x2', 
		'\x2', '\x54C', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xCC', '\xCE', 
		'\xD9', '\xE0', '\xE5', '\xEB', '\xF1', '\xF3', '\xFA', '\x101', '\x105', 
		'\x108', '\x10C', '\x112', '\x117', '\x120', '\x127', '\x12D', '\x131', 
		'\x135', '\x13A', '\x140', '\x14C', '\x150', '\x155', '\x158', '\x15B', 
		'\x160', '\x163', '\x171', '\x178', '\x17F', '\x181', '\x184', '\x18A', 
		'\x18F', '\x197', '\x19C', '\x1A8', '\x1AD', '\x1B7', '\x1BB', '\x1BD', 
		'\x1C1', '\x1C6', '\x1C8', '\x1D0', '\x1D6', '\x1DB', '\x1DF', '\x1EA', 
		'\x1F5', '\x1FA', '\x1FE', '\x20E', '\x213', '\x21B', '\x222', '\x23E', 
		'\x242', '\x24A', '\x25A', '\x260', '\x262', '\x264', '\x26A', '\x26E', 
		'\x272', '\x275', '\x278', '\x27E', '\x285', '\x289', '\x28F', '\x292', 
		'\x29D', '\x2A3', '\x2A6', '\x2B0', '\x2C0', '\x2C3', '\x2CD', '\x2D4', 
		'\x2DB', '\x2E1', '\x2E4', '\x2E9', '\x2EC', '\x2F0', '\x2FA', '\x2FF', 
		'\x301', '\x309', '\x310', '\x317', '\x31B', '\x31D', '\x320', '\x326', 
		'\x32A', '\x32D', '\x336', '\x33B', '\x33F', '\x346', '\x34B', '\x34E', 
		'\x351', '\x359', '\x35C', '\x360', '\x36C', '\x373', '\x381', '\x386', 
		'\x389', '\x390', '\x399', '\x39E', '\x3A1', '\x3AB', '\x3AE', '\x3B0', 
		'\x3B7', '\x3BB', '\x3C4', '\x3C7', '\x3C9', '\x3CD', '\x3D1', '\x3D5', 
		'\x3D8', '\x3DE', '\x3E2', '\x3E6', '\x3EE', '\x3FB', '\x400', '\x409', 
		'\x40D', '\x415', '\x41A', '\x423', '\x426', '\x429', '\x42C', '\x436', 
		'\x43F', '\x443', '\x44A', '\x454', '\x45A', '\x462', '\x465', '\x469', 
		'\x477', '\x483', '\x48C', '\x495', '\x499', '\x4A3', '\x4A6', '\x4AF', 
		'\x4B8', '\x4BB', '\x4C1', '\x4CF', '\x4D3', '\x4DE', '\x4E3', '\x4F0', 
		'\x4F7', '\x507', '\x512', '\x51F', '\x526', '\x54B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.Elastic.Parser
