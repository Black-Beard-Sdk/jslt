//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JsltParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.Json.Jslt.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class JsltParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SUBSCRIPT=1, WILDCARD_SUBSCRIPT=2, CURRENT_VALUE=3, COLON=4, SHARP=5, 
		URI_TYPE=6, TIME_TYPE=7, DATETIME_TYPE=8, STRING_TYPE=9, BOOLEAN_TYPE=10, 
		GUID_TYPE=11, WHEN_TYPE=12, INTEGER_TYPE=13, DECIMAL_TYPE=14, DEFAULT=15, 
		EQ=16, NE=17, GT=18, LT=19, LE=20, GE=21, NT=22, PLUS=23, MINUS=24, DIVID=25, 
		MODULO=26, POWER=27, AND=28, OR=29, AND_EXCLUSIVE=30, OR_EXCLUSIVE=31, 
		COALESCE=32, CHAIN=33, TRUE=34, FALSE=35, NULL=36, BRACE_LEFT=37, BRACE_RIGHT=38, 
		BRACKET_LEFT=39, BRACKET_RIGHT=40, COMMA=41, QUESTION_PAREN_LEFT=42, PAREN_LEFT=43, 
		PAREN_RIGHT=44, DOLLAR=45, STRING=46, MULTI_LINE_COMMENT=47, SINGLE_QUOTE_CODE_STRING=48, 
		NUMBER=49, INT=50, WS=51, ID=52, VARIABLE_NAME=53, IDLOWCASE=54, SINGLE_QUOTE_STRING=55, 
		CURRENT_INDENTIFIER_JSONPATH=56, CURRENT_LENGTH=57;
	public const int
		RULE_script = 0, RULE_json = 1, RULE_obj = 2, RULE_pair = 3, RULE_array = 4, 
		RULE_jsonValue = 5, RULE_jsonValueString = 6, RULE_jsonValueNumber = 7, 
		RULE_jsonValueInteger = 8, RULE_jsonValueBoolean = 9, RULE_jsonValueNull = 10, 
		RULE_jsonType = 11, RULE_jsonLtOperation = 12, RULE_jsonLtItem = 13, RULE_operation = 14, 
		RULE_variable = 15, RULE_jsonfunctionCall = 16, RULE_jsonfunctionName = 17, 
		RULE_jsonValueList = 18, RULE_jsonpath = 19, RULE_dotnotation_jsonpath = 20, 
		RULE_identifierWithQualifier = 21, RULE_identifierWithQualifierSub = 22, 
		RULE_query_expr = 23;
	public static readonly string[] ruleNames = {
		"script", "json", "obj", "pair", "array", "jsonValue", "jsonValueString", 
		"jsonValueNumber", "jsonValueInteger", "jsonValueBoolean", "jsonValueNull", 
		"jsonType", "jsonLtOperation", "jsonLtItem", "operation", "variable", 
		"jsonfunctionCall", "jsonfunctionName", "jsonValueList", "jsonpath", "dotnotation_jsonpath", 
		"identifierWithQualifier", "identifierWithQualifierSub", "query_expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'*'", "'@'", "':'", "'#'", "'@uri'", "'@time'", "'@datetime'", 
		"'@string'", "'@boolean'", "'@uuid'", "'@when'", "'@integer'", "'@decimal'", 
		"'default'", "'=='", "'!='", "'>'", "'<'", "'<='", "'>='", "'!'", "'+'", 
		"'-'", "'/'", "'%'", "'^'", "'&'", "'|'", "'&&'", "'||'", "'??'", "'->'", 
		"'true'", "'false'", "'null'", "'{'", "'}'", "'['", "']'", "','", "'?('", 
		"'('", "')'", "'$'", null, null, "'''", null, null, null, null, null, 
		null, null, null, "'@.length-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SUBSCRIPT", "WILDCARD_SUBSCRIPT", "CURRENT_VALUE", "COLON", "SHARP", 
		"URI_TYPE", "TIME_TYPE", "DATETIME_TYPE", "STRING_TYPE", "BOOLEAN_TYPE", 
		"GUID_TYPE", "WHEN_TYPE", "INTEGER_TYPE", "DECIMAL_TYPE", "DEFAULT", "EQ", 
		"NE", "GT", "LT", "LE", "GE", "NT", "PLUS", "MINUS", "DIVID", "MODULO", 
		"POWER", "AND", "OR", "AND_EXCLUSIVE", "OR_EXCLUSIVE", "COALESCE", "CHAIN", 
		"TRUE", "FALSE", "NULL", "BRACE_LEFT", "BRACE_RIGHT", "BRACKET_LEFT", 
		"BRACKET_RIGHT", "COMMA", "QUESTION_PAREN_LEFT", "PAREN_LEFT", "PAREN_RIGHT", 
		"DOLLAR", "STRING", "MULTI_LINE_COMMENT", "SINGLE_QUOTE_CODE_STRING", 
		"NUMBER", "INT", "WS", "ID", "VARIABLE_NAME", "IDLOWCASE", "SINGLE_QUOTE_STRING", 
		"CURRENT_INDENTIFIER_JSONPATH", "CURRENT_LENGTH"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JsltParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JsltParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JsltParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JsltParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ScriptContext : ParserRuleContext {
		public JsonContext json() {
			return GetRuleContext<JsonContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(JsltParser.Eof, 0); }
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; json();
			State = 49; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonContext : ParserRuleContext {
		public JsonValueContext jsonValue() {
			return GetRuleContext<JsonValueContext>(0);
		}
		public JsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonContext json() {
		JsonContext _localctx = new JsonContext(Context, State);
		EnterRule(_localctx, 2, RULE_json);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; jsonValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		public ITerminalNode BRACE_LEFT() { return GetToken(JsltParser.BRACE_LEFT, 0); }
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ITerminalNode BRACE_RIGHT() { return GetToken(JsltParser.BRACE_RIGHT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(JsltParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsltParser.COMMA, i);
		}
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 4, RULE_obj);
		int _la;
		try {
			State = 66;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53; Match(BRACE_LEFT);
				State = 54; pair();
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 55; Match(COMMA);
					State = 56; pair();
					}
					}
					State = 61;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 62; Match(BRACE_RIGHT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64; Match(BRACE_LEFT);
				State = 65; Match(BRACE_RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsltParser.STRING, 0); }
		public ITerminalNode COLON() { return GetToken(JsltParser.COLON, 0); }
		public JsonValueContext jsonValue() {
			return GetRuleContext<JsonValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 6, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(STRING);
			State = 69; Match(COLON);
			State = 70; jsonValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode BRACKET_LEFT() { return GetToken(JsltParser.BRACKET_LEFT, 0); }
		public JsonValueContext[] jsonValue() {
			return GetRuleContexts<JsonValueContext>();
		}
		public JsonValueContext jsonValue(int i) {
			return GetRuleContext<JsonValueContext>(i);
		}
		public ITerminalNode BRACKET_RIGHT() { return GetToken(JsltParser.BRACKET_RIGHT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(JsltParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsltParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 8, RULE_array);
		int _la;
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72; Match(BRACKET_LEFT);
				State = 73; jsonValue();
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 74; Match(COMMA);
					State = 75; jsonValue();
					}
					}
					State = 80;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 81; Match(BRACKET_RIGHT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83; Match(BRACKET_LEFT);
				State = 84; Match(BRACKET_RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueContext : ParserRuleContext {
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public JsonLtOperationContext jsonLtOperation() {
			return GetRuleContext<JsonLtOperationContext>(0);
		}
		public JsonValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueContext jsonValue() {
		JsonValueContext _localctx = new JsonValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_jsonValue);
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BRACE_LEFT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87; obj();
				}
				break;
			case BRACKET_LEFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88; array();
				}
				break;
			case NT:
			case TRUE:
			case FALSE:
			case NULL:
			case PAREN_LEFT:
			case DOLLAR:
			case STRING:
			case NUMBER:
			case INT:
			case ID:
			case VARIABLE_NAME:
				EnterOuterAlt(_localctx, 3);
				{
				State = 89; jsonLtOperation(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueStringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsltParser.STRING, 0); }
		public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public JsonValueStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueStringContext jsonValueString() {
		JsonValueStringContext _localctx = new JsonValueStringContext(Context, State);
		EnterRule(_localctx, 12, RULE_jsonValueString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(STRING);
			State = 94;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 93; jsonType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueNumberContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(JsltParser.NUMBER, 0); }
		public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public JsonValueNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueNumber; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueNumberContext jsonValueNumber() {
		JsonValueNumberContext _localctx = new JsonValueNumberContext(Context, State);
		EnterRule(_localctx, 14, RULE_jsonValueNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(NUMBER);
			State = 98;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 97; jsonType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueIntegerContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(JsltParser.INT, 0); }
		public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public JsonValueIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueInteger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueIntegerContext jsonValueInteger() {
		JsonValueIntegerContext _localctx = new JsonValueIntegerContext(Context, State);
		EnterRule(_localctx, 16, RULE_jsonValueInteger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(INT);
			State = 102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 101; jsonType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueBooleanContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(JsltParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(JsltParser.FALSE, 0); }
		public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public JsonValueBooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueBoolean; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueBooleanContext jsonValueBoolean() {
		JsonValueBooleanContext _localctx = new JsonValueBooleanContext(Context, State);
		EnterRule(_localctx, 18, RULE_jsonValueBoolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 105; jsonType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueNullContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(JsltParser.NULL, 0); }
		public JsonValueNullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueNull; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueNull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueNullContext jsonValueNull() {
		JsonValueNullContext _localctx = new JsonValueNullContext(Context, State);
		EnterRule(_localctx, 20, RULE_jsonValueNull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonTypeContext : ParserRuleContext {
		public ITerminalNode BOOLEAN_TYPE() { return GetToken(JsltParser.BOOLEAN_TYPE, 0); }
		public ITerminalNode URI_TYPE() { return GetToken(JsltParser.URI_TYPE, 0); }
		public ITerminalNode TIME_TYPE() { return GetToken(JsltParser.TIME_TYPE, 0); }
		public ITerminalNode DATETIME_TYPE() { return GetToken(JsltParser.DATETIME_TYPE, 0); }
		public ITerminalNode STRING_TYPE() { return GetToken(JsltParser.STRING_TYPE, 0); }
		public ITerminalNode GUID_TYPE() { return GetToken(JsltParser.GUID_TYPE, 0); }
		public ITerminalNode INTEGER_TYPE() { return GetToken(JsltParser.INTEGER_TYPE, 0); }
		public ITerminalNode DECIMAL_TYPE() { return GetToken(JsltParser.DECIMAL_TYPE, 0); }
		public ITerminalNode CURRENT_VALUE() { return GetToken(JsltParser.CURRENT_VALUE, 0); }
		public ITerminalNode IDLOWCASE() { return GetToken(JsltParser.IDLOWCASE, 0); }
		public JsonTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonTypeContext jsonType() {
		JsonTypeContext _localctx = new JsonTypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_jsonType);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN_TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; Match(BOOLEAN_TYPE);
				}
				break;
			case URI_TYPE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111; Match(URI_TYPE);
				}
				break;
			case TIME_TYPE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 112; Match(TIME_TYPE);
				}
				break;
			case DATETIME_TYPE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 113; Match(DATETIME_TYPE);
				}
				break;
			case STRING_TYPE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 114; Match(STRING_TYPE);
				}
				break;
			case GUID_TYPE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 115; Match(GUID_TYPE);
				}
				break;
			case INTEGER_TYPE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 116; Match(INTEGER_TYPE);
				}
				break;
			case DECIMAL_TYPE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 117; Match(DECIMAL_TYPE);
				}
				break;
			case CURRENT_VALUE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 118; Match(CURRENT_VALUE);
				State = 119; Match(IDLOWCASE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonLtOperationContext : ParserRuleContext {
		public JsonLtItemContext jsonLtItem() {
			return GetRuleContext<JsonLtItemContext>(0);
		}
		public ITerminalNode NT() { return GetToken(JsltParser.NT, 0); }
		public JsonLtOperationContext[] jsonLtOperation() {
			return GetRuleContexts<JsonLtOperationContext>();
		}
		public JsonLtOperationContext jsonLtOperation(int i) {
			return GetRuleContext<JsonLtOperationContext>(i);
		}
		public ITerminalNode PAREN_LEFT() { return GetToken(JsltParser.PAREN_LEFT, 0); }
		public ITerminalNode PAREN_RIGHT() { return GetToken(JsltParser.PAREN_RIGHT, 0); }
		public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public JsonLtOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonLtOperation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonLtOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonLtOperationContext jsonLtOperation() {
		return jsonLtOperation(0);
	}

	private JsonLtOperationContext jsonLtOperation(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		JsonLtOperationContext _localctx = new JsonLtOperationContext(Context, _parentState);
		JsonLtOperationContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_jsonLtOperation, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case NULL:
			case DOLLAR:
			case STRING:
			case NUMBER:
			case INT:
			case ID:
			case VARIABLE_NAME:
				{
				State = 123; jsonLtItem();
				}
				break;
			case NT:
				{
				State = 124; Match(NT);
				State = 125; jsonLtOperation(3);
				}
				break;
			case PAREN_LEFT:
				{
				State = 126; Match(PAREN_LEFT);
				State = 127; jsonLtOperation(0);
				State = 128; Match(PAREN_RIGHT);
				State = 130;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 129; jsonType();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 140;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JsonLtOperationContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_jsonLtOperation);
					State = 134;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 135; operation();
					State = 136; jsonLtOperation(2);
					}
					} 
				}
				State = 142;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class JsonLtItemContext : ParserRuleContext {
		public JsonfunctionCallContext jsonfunctionCall() {
			return GetRuleContext<JsonfunctionCallContext>(0);
		}
		public JsonValueBooleanContext jsonValueBoolean() {
			return GetRuleContext<JsonValueBooleanContext>(0);
		}
		public JsonValueStringContext jsonValueString() {
			return GetRuleContext<JsonValueStringContext>(0);
		}
		public JsonValueIntegerContext jsonValueInteger() {
			return GetRuleContext<JsonValueIntegerContext>(0);
		}
		public JsonValueNumberContext jsonValueNumber() {
			return GetRuleContext<JsonValueNumberContext>(0);
		}
		public JsonValueNullContext jsonValueNull() {
			return GetRuleContext<JsonValueNullContext>(0);
		}
		public JsonpathContext jsonpath() {
			return GetRuleContext<JsonpathContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public JsonLtItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonLtItem; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonLtItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonLtItemContext jsonLtItem() {
		JsonLtItemContext _localctx = new JsonLtItemContext(Context, State);
		EnterRule(_localctx, 26, RULE_jsonLtItem);
		try {
			State = 151;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 143; jsonfunctionCall();
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 144; jsonValueBoolean();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 145; jsonValueString();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 146; jsonValueInteger();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 147; jsonValueNumber();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 148; jsonValueNull();
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 7);
				{
				State = 149; jsonpath();
				}
				break;
			case VARIABLE_NAME:
				EnterOuterAlt(_localctx, 8);
				{
				State = 150; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(JsltParser.EQ, 0); }
		public ITerminalNode GE() { return GetToken(JsltParser.GE, 0); }
		public ITerminalNode GT() { return GetToken(JsltParser.GT, 0); }
		public ITerminalNode LE() { return GetToken(JsltParser.LE, 0); }
		public ITerminalNode LT() { return GetToken(JsltParser.LT, 0); }
		public ITerminalNode NE() { return GetToken(JsltParser.NE, 0); }
		public ITerminalNode PLUS() { return GetToken(JsltParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(JsltParser.MINUS, 0); }
		public ITerminalNode DIVID() { return GetToken(JsltParser.DIVID, 0); }
		public ITerminalNode MODULO() { return GetToken(JsltParser.MODULO, 0); }
		public ITerminalNode WILDCARD_SUBSCRIPT() { return GetToken(JsltParser.WILDCARD_SUBSCRIPT, 0); }
		public ITerminalNode POWER() { return GetToken(JsltParser.POWER, 0); }
		public ITerminalNode CHAIN() { return GetToken(JsltParser.CHAIN, 0); }
		public ITerminalNode AND() { return GetToken(JsltParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(JsltParser.OR, 0); }
		public ITerminalNode AND_EXCLUSIVE() { return GetToken(JsltParser.AND_EXCLUSIVE, 0); }
		public ITerminalNode OR_EXCLUSIVE() { return GetToken(JsltParser.OR_EXCLUSIVE, 0); }
		public ITerminalNode COALESCE() { return GetToken(JsltParser.COALESCE, 0); }
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 28, RULE_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WILDCARD_SUBSCRIPT) | (1L << EQ) | (1L << NE) | (1L << GT) | (1L << LT) | (1L << LE) | (1L << GE) | (1L << PLUS) | (1L << MINUS) | (1L << DIVID) | (1L << MODULO) | (1L << POWER) | (1L << AND) | (1L << OR) | (1L << AND_EXCLUSIVE) | (1L << OR_EXCLUSIVE) | (1L << COALESCE) | (1L << CHAIN))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode VARIABLE_NAME() { return GetToken(JsltParser.VARIABLE_NAME, 0); }
		public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 30, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(VARIABLE_NAME);
			State = 157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 156; jsonType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonfunctionCallContext : ParserRuleContext {
		public JsonfunctionNameContext jsonfunctionName() {
			return GetRuleContext<JsonfunctionNameContext>(0);
		}
		public ITerminalNode PAREN_LEFT() { return GetToken(JsltParser.PAREN_LEFT, 0); }
		public ITerminalNode PAREN_RIGHT() { return GetToken(JsltParser.PAREN_RIGHT, 0); }
		public JsonValueListContext jsonValueList() {
			return GetRuleContext<JsonValueListContext>(0);
		}
		public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public JsonfunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonfunctionCall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonfunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonfunctionCallContext jsonfunctionCall() {
		JsonfunctionCallContext _localctx = new JsonfunctionCallContext(Context, State);
		EnterRule(_localctx, 32, RULE_jsonfunctionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; jsonfunctionName();
			State = 160; Match(PAREN_LEFT);
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NT) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << BRACE_LEFT) | (1L << BRACKET_LEFT) | (1L << PAREN_LEFT) | (1L << DOLLAR) | (1L << STRING) | (1L << NUMBER) | (1L << INT) | (1L << ID) | (1L << VARIABLE_NAME))) != 0)) {
				{
				State = 161; jsonValueList();
				}
			}

			State = 164; Match(PAREN_RIGHT);
			State = 166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 165; jsonType();
				}
				break;
			}
			State = 169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 168; obj();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonfunctionNameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(JsltParser.ID, 0); }
		public JsonfunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonfunctionName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonfunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonfunctionNameContext jsonfunctionName() {
		JsonfunctionNameContext _localctx = new JsonfunctionNameContext(Context, State);
		EnterRule(_localctx, 34, RULE_jsonfunctionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueListContext : ParserRuleContext {
		public JsonValueContext[] jsonValue() {
			return GetRuleContexts<JsonValueContext>();
		}
		public JsonValueContext jsonValue(int i) {
			return GetRuleContext<JsonValueContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JsltParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsltParser.COMMA, i);
		}
		public JsonValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueListContext jsonValueList() {
		JsonValueListContext _localctx = new JsonValueListContext(Context, State);
		EnterRule(_localctx, 36, RULE_jsonValueList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; jsonValue();
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 174; Match(COMMA);
				State = 175; jsonValue();
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonpathContext : ParserRuleContext {
		public Dotnotation_jsonpathContext dotnotation_jsonpath() {
			return GetRuleContext<Dotnotation_jsonpathContext>(0);
		}
		public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public JsonpathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonpath; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonpath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonpathContext jsonpath() {
		JsonpathContext _localctx = new JsonpathContext(Context, State);
		EnterRule(_localctx, 38, RULE_jsonpath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; dotnotation_jsonpath();
			State = 183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 182; jsonType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dotnotation_jsonpathContext : ParserRuleContext {
		public ITerminalNode DOLLAR() { return GetToken(JsltParser.DOLLAR, 0); }
		public IdentifierWithQualifierContext[] identifierWithQualifier() {
			return GetRuleContexts<IdentifierWithQualifierContext>();
		}
		public IdentifierWithQualifierContext identifierWithQualifier(int i) {
			return GetRuleContext<IdentifierWithQualifierContext>(i);
		}
		public ITerminalNode[] SUBSCRIPT() { return GetTokens(JsltParser.SUBSCRIPT); }
		public ITerminalNode SUBSCRIPT(int i) {
			return GetToken(JsltParser.SUBSCRIPT, i);
		}
		public Dotnotation_jsonpathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotnotation_jsonpath; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotnotation_jsonpath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dotnotation_jsonpathContext dotnotation_jsonpath() {
		Dotnotation_jsonpathContext _localctx = new Dotnotation_jsonpathContext(Context, State);
		EnterRule(_localctx, 40, RULE_dotnotation_jsonpath);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(DOLLAR);
			State = 203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 186; Match(SUBSCRIPT);
					}
					}
					State = 189;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SUBSCRIPT );
				State = 191; identifierWithQualifier();
				State = 200;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 193;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 192; Match(SUBSCRIPT);
							}
							}
							State = 195;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==SUBSCRIPT );
						State = 197; identifierWithQualifier();
						}
						} 
					}
					State = 202;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierWithQualifierContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(JsltParser.ID, 0); }
		public ITerminalNode BRACKET_LEFT() { return GetToken(JsltParser.BRACKET_LEFT, 0); }
		public ITerminalNode BRACKET_RIGHT() { return GetToken(JsltParser.BRACKET_RIGHT, 0); }
		public IdentifierWithQualifierSubContext identifierWithQualifierSub() {
			return GetRuleContext<IdentifierWithQualifierSubContext>(0);
		}
		public IdentifierWithQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierWithQualifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierWithQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierWithQualifierContext identifierWithQualifier() {
		IdentifierWithQualifierContext _localctx = new IdentifierWithQualifierContext(Context, State);
		EnterRule(_localctx, 42, RULE_identifierWithQualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(ID);
			State = 211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 206; Match(BRACKET_LEFT);
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION_PAREN_LEFT || _la==INT) {
					{
					State = 207; identifierWithQualifierSub();
					}
				}

				State = 210; Match(BRACKET_RIGHT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierWithQualifierSubContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(JsltParser.INT, 0); }
		public ITerminalNode QUESTION_PAREN_LEFT() { return GetToken(JsltParser.QUESTION_PAREN_LEFT, 0); }
		public Query_exprContext query_expr() {
			return GetRuleContext<Query_exprContext>(0);
		}
		public ITerminalNode PAREN_RIGHT() { return GetToken(JsltParser.PAREN_RIGHT, 0); }
		public IdentifierWithQualifierSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierWithQualifierSub; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierWithQualifierSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierWithQualifierSubContext identifierWithQualifierSub() {
		IdentifierWithQualifierSubContext _localctx = new IdentifierWithQualifierSubContext(Context, State);
		EnterRule(_localctx, 44, RULE_identifierWithQualifierSub);
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 213; Match(INT);
				}
				break;
			case QUESTION_PAREN_LEFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214; Match(QUESTION_PAREN_LEFT);
				State = 215; query_expr(0);
				State = 216; Match(PAREN_RIGHT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_exprContext : ParserRuleContext {
		public ITerminalNode WILDCARD_SUBSCRIPT() { return GetToken(JsltParser.WILDCARD_SUBSCRIPT, 0); }
		public ITerminalNode CURRENT_INDENTIFIER_JSONPATH() { return GetToken(JsltParser.CURRENT_INDENTIFIER_JSONPATH, 0); }
		public ITerminalNode GT() { return GetToken(JsltParser.GT, 0); }
		public ITerminalNode INT() { return GetToken(JsltParser.INT, 0); }
		public ITerminalNode LT() { return GetToken(JsltParser.LT, 0); }
		public ITerminalNode CURRENT_LENGTH() { return GetToken(JsltParser.CURRENT_LENGTH, 0); }
		public ITerminalNode EQ() { return GetToken(JsltParser.EQ, 0); }
		public ITerminalNode SINGLE_QUOTE_STRING() { return GetToken(JsltParser.SINGLE_QUOTE_STRING, 0); }
		public Query_exprContext[] query_expr() {
			return GetRuleContexts<Query_exprContext>();
		}
		public Query_exprContext query_expr(int i) {
			return GetRuleContext<Query_exprContext>(i);
		}
		public ITerminalNode[] AND_EXCLUSIVE() { return GetTokens(JsltParser.AND_EXCLUSIVE); }
		public ITerminalNode AND_EXCLUSIVE(int i) {
			return GetToken(JsltParser.AND_EXCLUSIVE, i);
		}
		public ITerminalNode[] OR_EXCLUSIVE() { return GetTokens(JsltParser.OR_EXCLUSIVE); }
		public ITerminalNode OR_EXCLUSIVE(int i) {
			return GetToken(JsltParser.OR_EXCLUSIVE, i);
		}
		public Query_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_exprContext query_expr() {
		return query_expr(0);
	}

	private Query_exprContext query_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Query_exprContext _localctx = new Query_exprContext(Context, _parentState);
		Query_exprContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_query_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 221; Match(WILDCARD_SUBSCRIPT);
				}
				break;
			case 2:
				{
				State = 222; Match(CURRENT_INDENTIFIER_JSONPATH);
				}
				break;
			case 3:
				{
				State = 223; Match(CURRENT_INDENTIFIER_JSONPATH);
				State = 224; Match(GT);
				State = 225; Match(INT);
				}
				break;
			case 4:
				{
				State = 226; Match(CURRENT_INDENTIFIER_JSONPATH);
				State = 227; Match(LT);
				State = 228; Match(INT);
				}
				break;
			case 5:
				{
				State = 229; Match(CURRENT_LENGTH);
				State = 230; Match(INT);
				}
				break;
			case 6:
				{
				State = 231; Match(CURRENT_INDENTIFIER_JSONPATH);
				State = 232; Match(EQ);
				State = 233; Match(INT);
				}
				break;
			case 7:
				{
				State = 234; Match(CURRENT_INDENTIFIER_JSONPATH);
				State = 235; Match(EQ);
				State = 236; Match(SINGLE_QUOTE_STRING);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 255;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 253;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						_localctx = new Query_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_query_expr);
						State = 239;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 242;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 240; Match(AND_EXCLUSIVE);
								State = 241; query_expr(0);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 244;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case 2:
						{
						_localctx = new Query_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_query_expr);
						State = 246;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 249;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 247; Match(OR_EXCLUSIVE);
								State = 248; query_expr(0);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 251;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					}
					} 
				}
				State = 257;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return jsonLtOperation_sempred((JsonLtOperationContext)_localctx, predIndex);
		case 23: return query_expr_sempred((Query_exprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool jsonLtOperation_sempred(JsonLtOperationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool query_expr_sempred(Query_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ';', '\x105', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', '<', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '?', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x45', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\a', '\x6', 'O', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 
		'R', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', 'X', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', ']', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x61', 
		'\n', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x65', '\n', '\t', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', 'i', '\n', '\n', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', 'm', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '{', '\n', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x85', '\n', 
		'\xE', '\x5', '\xE', '\x87', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x8D', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '\x90', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\x9A', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xA0', '\n', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xA5', '\n', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xA9', '\n', '\x12', '\x3', 
		'\x12', '\x5', '\x12', '\xAC', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\xB3', '\n', 
		'\x14', '\f', '\x14', '\xE', '\x14', '\xB6', '\v', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x5', '\x15', '\xBA', '\n', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x6', '\x16', '\xBE', '\n', '\x16', '\r', '\x16', '\xE', '\x16', 
		'\xBF', '\x3', '\x16', '\x3', '\x16', '\x6', '\x16', '\xC4', '\n', '\x16', 
		'\r', '\x16', '\xE', '\x16', '\xC5', '\x3', '\x16', '\a', '\x16', '\xC9', 
		'\n', '\x16', '\f', '\x16', '\xE', '\x16', '\xCC', '\v', '\x16', '\x5', 
		'\x16', '\xCE', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\xD3', '\n', '\x17', '\x3', '\x17', '\x5', '\x17', '\xD6', 
		'\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\xDD', '\n', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\xF0', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x6', '\x19', '\xF5', '\n', '\x19', '\r', '\x19', '\xE', 
		'\x19', '\xF6', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x6', '\x19', 
		'\xFC', '\n', '\x19', '\r', '\x19', '\xE', '\x19', '\xFD', '\a', '\x19', 
		'\x100', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x103', '\v', '\x19', 
		'\x3', '\x19', '\x2', '\x4', '\x1A', '\x30', '\x1A', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x2', 
		'\x4', '\x3', '\x2', '$', '%', '\x5', '\x2', '\x4', '\x4', '\x12', '\x17', 
		'\x19', '#', '\x2', '\x120', '\x2', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x35', '\x3', '\x2', '\x2', '\x2', '\x6', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x46', '\x3', '\x2', '\x2', '\x2', '\n', 'W', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\\', '\x3', '\x2', '\x2', '\x2', '\xE', '^', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x66', '\x3', '\x2', '\x2', '\x2', '\x14', 'j', '\x3', '\x2', 
		'\x2', '\x2', '\x16', 'n', '\x3', '\x2', '\x2', '\x2', '\x18', 'z', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x86', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x9D', '\x3', '\x2', '\x2', '\x2', '\"', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '$', '\xAD', '\x3', '\x2', '\x2', '\x2', '&', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '(', '\xB7', '\x3', '\x2', '\x2', '\x2', '*', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', ',', '\xCF', '\x3', '\x2', '\x2', '\x2', '.', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\x30', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x33', '\x5', '\x4', '\x3', '\x2', '\x33', '\x34', '\a', 
		'\x2', '\x2', '\x3', '\x34', '\x3', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x36', '\x5', '\f', '\a', '\x2', '\x36', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x38', '\a', '\'', '\x2', '\x2', '\x38', '=', '\x5', '\b', 
		'\x5', '\x2', '\x39', ':', '\a', '+', '\x2', '\x2', ':', '<', '\x5', '\b', 
		'\x5', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', '<', '?', '\x3', 
		'\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', 
		'\x2', '\x2', '\x2', '>', '@', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x41', '\a', '(', '\x2', '\x2', '\x41', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\a', '\'', '\x2', '\x2', 
		'\x43', '\x45', '\a', '(', '\x2', '\x2', '\x44', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x45', '\a', 
		'\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\a', '\x30', '\x2', '\x2', 'G', 
		'H', '\a', '\x6', '\x2', '\x2', 'H', 'I', '\x5', '\f', '\a', '\x2', 'I', 
		'\t', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', ')', '\x2', '\x2', 'K', 
		'P', '\x5', '\f', '\a', '\x2', 'L', 'M', '\a', '+', '\x2', '\x2', 'M', 
		'O', '\x5', '\f', '\a', '\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 'O', 
		'R', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\x3', '\x2', '\x2', '\x2', 
		'R', 'P', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '*', '\x2', '\x2', 
		'T', 'X', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', ')', '\x2', '\x2', 
		'V', 'X', '\a', '*', '\x2', '\x2', 'W', 'J', '\x3', '\x2', '\x2', '\x2', 
		'W', 'U', '\x3', '\x2', '\x2', '\x2', 'X', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'Y', ']', '\x5', '\x6', '\x4', '\x2', 'Z', ']', '\x5', '\n', '\x6', 
		'\x2', '[', ']', '\x5', '\x1A', '\xE', '\x2', '\\', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', '[', '\x3', 
		'\x2', '\x2', '\x2', ']', '\r', '\x3', '\x2', '\x2', '\x2', '^', '`', 
		'\a', '\x30', '\x2', '\x2', '_', '\x61', '\x5', '\x18', '\r', '\x2', '`', 
		'_', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '\xF', '\x3', '\x2', '\x2', '\x2', '\x62', '\x64', '\a', '\x33', 
		'\x2', '\x2', '\x63', '\x65', '\x5', '\x18', '\r', '\x2', '\x64', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x11', '\x3', '\x2', '\x2', '\x2', '\x66', 'h', '\a', '\x34', 
		'\x2', '\x2', 'g', 'i', '\x5', '\x18', '\r', '\x2', 'h', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', '\x13', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'l', '\t', '\x2', '\x2', '\x2', 'k', 'm', '\x5', 
		'\x18', '\r', '\x2', 'l', 'k', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', 
		'\x2', '\x2', '\x2', 'm', '\x15', '\x3', '\x2', '\x2', '\x2', 'n', 'o', 
		'\a', '&', '\x2', '\x2', 'o', '\x17', '\x3', '\x2', '\x2', '\x2', 'p', 
		'{', '\a', '\f', '\x2', '\x2', 'q', '{', '\a', '\b', '\x2', '\x2', 'r', 
		'{', '\a', '\t', '\x2', '\x2', 's', '{', '\a', '\n', '\x2', '\x2', 't', 
		'{', '\a', '\v', '\x2', '\x2', 'u', '{', '\a', '\r', '\x2', '\x2', 'v', 
		'{', '\a', '\xF', '\x2', '\x2', 'w', '{', '\a', '\x10', '\x2', '\x2', 
		'x', 'y', '\a', '\x5', '\x2', '\x2', 'y', '{', '\a', '\x38', '\x2', '\x2', 
		'z', 'p', '\x3', '\x2', '\x2', '\x2', 'z', 'q', '\x3', '\x2', '\x2', '\x2', 
		'z', 'r', '\x3', '\x2', '\x2', '\x2', 'z', 's', '\x3', '\x2', '\x2', '\x2', 
		'z', 't', '\x3', '\x2', '\x2', '\x2', 'z', 'u', '\x3', '\x2', '\x2', '\x2', 
		'z', 'v', '\x3', '\x2', '\x2', '\x2', 'z', 'w', '\x3', '\x2', '\x2', '\x2', 
		'z', 'x', '\x3', '\x2', '\x2', '\x2', '{', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '|', '}', '\b', '\xE', '\x1', '\x2', '}', '\x87', '\x5', '\x1C', 
		'\xF', '\x2', '~', '\x7F', '\a', '\x18', '\x2', '\x2', '\x7F', '\x87', 
		'\x5', '\x1A', '\xE', '\x5', '\x80', '\x81', '\a', '-', '\x2', '\x2', 
		'\x81', '\x82', '\x5', '\x1A', '\xE', '\x2', '\x82', '\x84', '\a', '.', 
		'\x2', '\x2', '\x83', '\x85', '\x5', '\x18', '\r', '\x2', '\x84', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x87', '\x3', '\x2', '\x2', '\x2', '\x86', '|', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '~', '\x3', '\x2', '\x2', '\x2', '\x86', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x87', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x89', '\f', '\x3', '\x2', '\x2', '\x89', '\x8A', '\x5', '\x1E', 
		'\x10', '\x2', '\x8A', '\x8B', '\x5', '\x1A', '\xE', '\x4', '\x8B', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', '\x90', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x9A', '\x5', '\"', '\x12', '\x2', '\x92', '\x9A', '\x5', '\x14', 
		'\v', '\x2', '\x93', '\x9A', '\x5', '\xE', '\b', '\x2', '\x94', '\x9A', 
		'\x5', '\x12', '\n', '\x2', '\x95', '\x9A', '\x5', '\x10', '\t', '\x2', 
		'\x96', '\x9A', '\x5', '\x16', '\f', '\x2', '\x97', '\x9A', '\x5', '(', 
		'\x15', '\x2', '\x98', '\x9A', '\x5', ' ', '\x11', '\x2', '\x99', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x99', '\x92', '\x3', '\x2', '\x2', '\x2', 
		'\x99', '\x93', '\x3', '\x2', '\x2', '\x2', '\x99', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\x99', '\x95', '\x3', '\x2', '\x2', '\x2', '\x99', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x99', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x9C', '\t', '\x3', '\x2', '\x2', '\x9C', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x9D', '\x9F', '\a', '\x37', '\x2', '\x2', 
		'\x9E', '\xA0', '\x5', '\x18', '\r', '\x2', '\x9F', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '!', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\x5', '$', '\x13', '\x2', 
		'\xA2', '\xA4', '\a', '-', '\x2', '\x2', '\xA3', '\xA5', '\x5', '&', '\x14', 
		'\x2', '\xA4', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA8', '\a', '.', '\x2', '\x2', '\xA7', '\xA9', '\x5', '\x18', '\r', 
		'\x2', '\xA8', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xAC', '\x5', '\x6', '\x4', '\x2', '\xAB', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x36', '\x2', '\x2', '\xAE', 
		'%', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB4', '\x5', '\f', '\a', '\x2', 
		'\xB0', '\xB1', '\a', '+', '\x2', '\x2', '\xB1', '\xB3', '\x5', '\f', 
		'\a', '\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB6', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\xB2', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB9', 
		'\x5', '*', '\x16', '\x2', '\xB8', '\xBA', '\x5', '\x18', '\r', '\x2', 
		'\xB9', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', '\x2', 
		'\x2', '\x2', '\xBA', ')', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xCD', 
		'\a', '/', '\x2', '\x2', '\xBC', '\xBE', '\a', '\x3', '\x2', '\x2', '\xBD', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xCA', '\x5', ',', '\x17', '\x2', '\xC2', '\xC4', '\a', '\x3', '\x2', 
		'\x2', '\xC3', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\xC5', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xC9', '\x5', ',', '\x17', '\x2', '\xC8', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xC8', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', '+', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xD5', '\a', '\x36', '\x2', '\x2', '\xD0', '\xD2', '\a', 
		')', '\x2', '\x2', '\xD1', '\xD3', '\x5', '.', '\x18', '\x2', '\xD2', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD6', '\a', 
		'*', '\x2', '\x2', '\xD5', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD5', 
		'\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '-', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xDD', '\a', '\x34', '\x2', '\x2', '\xD8', '\xD9', '\a', 
		',', '\x2', '\x2', '\xD9', '\xDA', '\x5', '\x30', '\x19', '\x2', '\xDA', 
		'\xDB', '\a', '.', '\x2', '\x2', '\xDB', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xD8', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '/', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xDF', '\b', '\x19', '\x1', '\x2', '\xDF', '\xF0', '\a', '\x4', '\x2', 
		'\x2', '\xE0', '\xF0', '\a', ':', '\x2', '\x2', '\xE1', '\xE2', '\a', 
		':', '\x2', '\x2', '\xE2', '\xE3', '\a', '\x14', '\x2', '\x2', '\xE3', 
		'\xF0', '\a', '\x34', '\x2', '\x2', '\xE4', '\xE5', '\a', ':', '\x2', 
		'\x2', '\xE5', '\xE6', '\a', '\x15', '\x2', '\x2', '\xE6', '\xF0', '\a', 
		'\x34', '\x2', '\x2', '\xE7', '\xE8', '\a', ';', '\x2', '\x2', '\xE8', 
		'\xF0', '\a', '\x34', '\x2', '\x2', '\xE9', '\xEA', '\a', ':', '\x2', 
		'\x2', '\xEA', '\xEB', '\a', '\x12', '\x2', '\x2', '\xEB', '\xF0', '\a', 
		'\x34', '\x2', '\x2', '\xEC', '\xED', '\a', ':', '\x2', '\x2', '\xED', 
		'\xEE', '\a', '\x12', '\x2', '\x2', '\xEE', '\xF0', '\a', '\x39', '\x2', 
		'\x2', '\xEF', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\x101', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xF4', '\f', '\v', '\x2', '\x2', '\xF2', '\xF3', '\a', ' ', '\x2', '\x2', 
		'\xF3', '\xF5', '\x5', '\x30', '\x19', '\x2', '\xF4', '\xF2', '\x3', '\x2', 
		'\x2', '\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF4', 
		'\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', '\x2', 
		'\xF7', '\x100', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xFB', '\f', '\n', 
		'\x2', '\x2', '\xF9', '\xFA', '\a', '!', '\x2', '\x2', '\xFA', '\xFC', 
		'\x5', '\x30', '\x19', '\x2', '\xFB', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\xFC', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFB', '\x3', '\x2', 
		'\x2', '\x2', '\xFD', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\xFF', '\xF1', '\x3', '\x2', '\x2', '\x2', 
		'\xFF', '\xF8', '\x3', '\x2', '\x2', '\x2', '\x100', '\x103', '\x3', '\x2', 
		'\x2', '\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x101', '\x3', '\x2', '\x2', '\x2', '\"', '=', '\x44', 'P', 
		'W', '\\', '`', '\x64', 'h', 'l', 'z', '\x84', '\x86', '\x8E', '\x99', 
		'\x9F', '\xA4', '\xA8', '\xAB', '\xB4', '\xB9', '\xBF', '\xC5', '\xCA', 
		'\xCD', '\xD2', '\xD5', '\xDC', '\xEF', '\xF6', '\xFD', '\xFF', '\x101',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.Json.Jslt.Parser
