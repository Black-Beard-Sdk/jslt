//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JsltParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.Json.Jslt.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class JsltParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CURRENT_VALUE=1, RECURSIVE_DESCENT=2, ROOT_VALUE=3, SUBSCRIPT=4, WILDCARD_SUBSCRIPT=5, 
		PIPE=6, AND=7, EQ=8, GE=9, GT=10, LE=11, LT=12, NE=13, NOT=14, OR=15, 
		NEW=16, TRUE=17, FALSE=18, NULL=19, BRACE_LEFT=20, BRACE_RIGHT=21, BRACKET_LEFT=22, 
		BRACKET_RIGHT=23, COLON=24, COMMA=25, PAREN_LEFT=26, PAREN_RIGHT=27, QUESTION=28, 
		STRING=29, MULTI_LINE_COMMENT=30, CODE_STRING=31, QUOTE_CODE_STRING=32, 
		NUMBER=33, INT=34, WS=35, ID=36, LANGUAGE=37;
	public const int
		RULE_script = 0, RULE_json = 1, RULE_obj = 2, RULE_pair = 3, RULE_array = 4, 
		RULE_jsonValue = 5, RULE_jsonValueString = 6, RULE_jsonValueCodeString = 7, 
		RULE_jsonValueNumber = 8, RULE_jsonValueInteger = 9, RULE_jsonValueBoolean = 10, 
		RULE_jsonValueNull = 11, RULE_jsonCtor = 12, RULE_jsonValueList = 13, 
		RULE_jsonLt = 14, RULE_jsonLtItem = 15, RULE_jsonpath = 16, RULE_subscript = 17, 
		RULE_subscriptables = 18, RULE_subscriptableBareword = 19, RULE_subscriptable = 20, 
		RULE_sliceable = 21, RULE_expression = 22, RULE_andExpression = 23, RULE_orExpression = 24, 
		RULE_notExpression = 25;
	public static readonly string[] ruleNames = {
		"script", "json", "obj", "pair", "array", "jsonValue", "jsonValueString", 
		"jsonValueCodeString", "jsonValueNumber", "jsonValueInteger", "jsonValueBoolean", 
		"jsonValueNull", "jsonCtor", "jsonValueList", "jsonLt", "jsonLtItem", 
		"jsonpath", "subscript", "subscriptables", "subscriptableBareword", "subscriptable", 
		"sliceable", "expression", "andExpression", "orExpression", "notExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'@'", "'..'", "'$'", "'.'", "'*'", "'|'", "'and'", "'='", "'>='", 
		"'>'", "'<='", "'<'", "'!='", "'not'", "'or'", "'new'", "'true'", "'false'", 
		"'null'", "'{'", "'}'", "'['", "']'", "':'", "','", "'('", "')'", "'?'", 
		null, null, null, "'''''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CURRENT_VALUE", "RECURSIVE_DESCENT", "ROOT_VALUE", "SUBSCRIPT", 
		"WILDCARD_SUBSCRIPT", "PIPE", "AND", "EQ", "GE", "GT", "LE", "LT", "NE", 
		"NOT", "OR", "NEW", "TRUE", "FALSE", "NULL", "BRACE_LEFT", "BRACE_RIGHT", 
		"BRACKET_LEFT", "BRACKET_RIGHT", "COLON", "COMMA", "PAREN_LEFT", "PAREN_RIGHT", 
		"QUESTION", "STRING", "MULTI_LINE_COMMENT", "CODE_STRING", "QUOTE_CODE_STRING", 
		"NUMBER", "INT", "WS", "ID", "LANGUAGE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JsltParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JsltParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JsltParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JsltParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ScriptContext : ParserRuleContext {
		public JsonContext json() {
			return GetRuleContext<JsonContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(JsltParser.Eof, 0); }
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; json();
			State = 53; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonContext : ParserRuleContext {
		public JsonValueContext jsonValue() {
			return GetRuleContext<JsonValueContext>(0);
		}
		public JsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonContext json() {
		JsonContext _localctx = new JsonContext(Context, State);
		EnterRule(_localctx, 2, RULE_json);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; jsonValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		public ITerminalNode BRACE_LEFT() { return GetToken(JsltParser.BRACE_LEFT, 0); }
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ITerminalNode BRACE_RIGHT() { return GetToken(JsltParser.BRACE_RIGHT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(JsltParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsltParser.COMMA, i);
		}
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 4, RULE_obj);
		int _la;
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57; Match(BRACE_LEFT);
				State = 58; pair();
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 59; Match(COMMA);
					State = 60; pair();
					}
					}
					State = 65;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 66; Match(BRACE_RIGHT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 68; Match(BRACE_LEFT);
				State = 69; Match(BRACE_RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsltParser.STRING, 0); }
		public ITerminalNode COLON() { return GetToken(JsltParser.COLON, 0); }
		public JsonValueContext jsonValue() {
			return GetRuleContext<JsonValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 6, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(STRING);
			State = 73; Match(COLON);
			State = 74; jsonValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode BRACKET_LEFT() { return GetToken(JsltParser.BRACKET_LEFT, 0); }
		public JsonValueContext[] jsonValue() {
			return GetRuleContexts<JsonValueContext>();
		}
		public JsonValueContext jsonValue(int i) {
			return GetRuleContext<JsonValueContext>(i);
		}
		public ITerminalNode BRACKET_RIGHT() { return GetToken(JsltParser.BRACKET_RIGHT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(JsltParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsltParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 8, RULE_array);
		int _la;
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 76; Match(BRACKET_LEFT);
				State = 77; jsonValue();
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 78; Match(COMMA);
					State = 79; jsonValue();
					}
					}
					State = 84;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 85; Match(BRACKET_RIGHT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; Match(BRACKET_LEFT);
				State = 88; Match(BRACKET_RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueContext : ParserRuleContext {
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public JsonValueBooleanContext jsonValueBoolean() {
			return GetRuleContext<JsonValueBooleanContext>(0);
		}
		public JsonValueStringContext jsonValueString() {
			return GetRuleContext<JsonValueStringContext>(0);
		}
		public JsonValueIntegerContext jsonValueInteger() {
			return GetRuleContext<JsonValueIntegerContext>(0);
		}
		public JsonValueNumberContext jsonValueNumber() {
			return GetRuleContext<JsonValueNumberContext>(0);
		}
		public JsonValueNullContext jsonValueNull() {
			return GetRuleContext<JsonValueNullContext>(0);
		}
		public JsonLtContext jsonLt() {
			return GetRuleContext<JsonLtContext>(0);
		}
		public JsonValueCodeStringContext jsonValueCodeString() {
			return GetRuleContext<JsonValueCodeStringContext>(0);
		}
		public JsonValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueContext jsonValue() {
		JsonValueContext _localctx = new JsonValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_jsonValue);
		try {
			State = 100;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BRACE_LEFT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91; obj();
				}
				break;
			case BRACKET_LEFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 92; array();
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 93; jsonValueBoolean();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 94; jsonValueString();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 95; jsonValueInteger();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 96; jsonValueNumber();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 97; jsonValueNull();
				}
				break;
			case ROOT_VALUE:
			case NEW:
				EnterOuterAlt(_localctx, 8);
				{
				State = 98; jsonLt();
				}
				break;
			case CODE_STRING:
				EnterOuterAlt(_localctx, 9);
				{
				State = 99; jsonValueCodeString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueStringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsltParser.STRING, 0); }
		public JsonValueStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueStringContext jsonValueString() {
		JsonValueStringContext _localctx = new JsonValueStringContext(Context, State);
		EnterRule(_localctx, 12, RULE_jsonValueString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueCodeStringContext : ParserRuleContext {
		public ITerminalNode CODE_STRING() { return GetToken(JsltParser.CODE_STRING, 0); }
		public JsonValueCodeStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueCodeString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueCodeString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueCodeStringContext jsonValueCodeString() {
		JsonValueCodeStringContext _localctx = new JsonValueCodeStringContext(Context, State);
		EnterRule(_localctx, 14, RULE_jsonValueCodeString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(CODE_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueNumberContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(JsltParser.NUMBER, 0); }
		public JsonValueNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueNumber; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueNumberContext jsonValueNumber() {
		JsonValueNumberContext _localctx = new JsonValueNumberContext(Context, State);
		EnterRule(_localctx, 16, RULE_jsonValueNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueIntegerContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(JsltParser.INT, 0); }
		public JsonValueIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueInteger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueIntegerContext jsonValueInteger() {
		JsonValueIntegerContext _localctx = new JsonValueIntegerContext(Context, State);
		EnterRule(_localctx, 18, RULE_jsonValueInteger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueBooleanContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(JsltParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(JsltParser.FALSE, 0); }
		public JsonValueBooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueBoolean; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueBooleanContext jsonValueBoolean() {
		JsonValueBooleanContext _localctx = new JsonValueBooleanContext(Context, State);
		EnterRule(_localctx, 20, RULE_jsonValueBoolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueNullContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(JsltParser.NULL, 0); }
		public JsonValueNullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueNull; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueNull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueNullContext jsonValueNull() {
		JsonValueNullContext _localctx = new JsonValueNullContext(Context, State);
		EnterRule(_localctx, 22, RULE_jsonValueNull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonCtorContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(JsltParser.NEW, 0); }
		public ITerminalNode ID() { return GetToken(JsltParser.ID, 0); }
		public ITerminalNode PAREN_LEFT() { return GetToken(JsltParser.PAREN_LEFT, 0); }
		public ITerminalNode PAREN_RIGHT() { return GetToken(JsltParser.PAREN_RIGHT, 0); }
		public JsonValueListContext jsonValueList() {
			return GetRuleContext<JsonValueListContext>(0);
		}
		public JsonCtorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonCtor; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonCtor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonCtorContext jsonCtor() {
		JsonCtorContext _localctx = new JsonCtorContext(Context, State);
		EnterRule(_localctx, 24, RULE_jsonCtor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; Match(NEW);
			State = 115; Match(ID);
			State = 116; Match(PAREN_LEFT);
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROOT_VALUE) | (1L << NEW) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << BRACE_LEFT) | (1L << BRACKET_LEFT) | (1L << STRING) | (1L << CODE_STRING) | (1L << NUMBER) | (1L << INT))) != 0)) {
				{
				State = 117; jsonValueList();
				}
			}

			State = 120; Match(PAREN_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueListContext : ParserRuleContext {
		public JsonValueContext[] jsonValue() {
			return GetRuleContexts<JsonValueContext>();
		}
		public JsonValueContext jsonValue(int i) {
			return GetRuleContext<JsonValueContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JsltParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsltParser.COMMA, i);
		}
		public JsonValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueListContext jsonValueList() {
		JsonValueListContext _localctx = new JsonValueListContext(Context, State);
		EnterRule(_localctx, 26, RULE_jsonValueList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; jsonValue();
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 123; Match(COMMA);
				State = 124; jsonValue();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonLtContext : ParserRuleContext {
		public JsonLtItemContext[] jsonLtItem() {
			return GetRuleContexts<JsonLtItemContext>();
		}
		public JsonLtItemContext jsonLtItem(int i) {
			return GetRuleContext<JsonLtItemContext>(i);
		}
		public ITerminalNode[] PIPE() { return GetTokens(JsltParser.PIPE); }
		public ITerminalNode PIPE(int i) {
			return GetToken(JsltParser.PIPE, i);
		}
		public JsonLtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonLt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonLt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonLtContext jsonLt() {
		JsonLtContext _localctx = new JsonLtContext(Context, State);
		EnterRule(_localctx, 28, RULE_jsonLt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; jsonLtItem();
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PIPE) {
				{
				{
				State = 131; Match(PIPE);
				State = 132; jsonLtItem();
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonLtItemContext : ParserRuleContext {
		public JsonpathContext jsonpath() {
			return GetRuleContext<JsonpathContext>(0);
		}
		public JsonCtorContext jsonCtor() {
			return GetRuleContext<JsonCtorContext>(0);
		}
		public JsonLtItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonLtItem; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonLtItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonLtItemContext jsonLtItem() {
		JsonLtItemContext _localctx = new JsonLtItemContext(Context, State);
		EnterRule(_localctx, 30, RULE_jsonLtItem);
		try {
			State = 140;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ROOT_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 138; jsonpath();
				}
				break;
			case NEW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139; jsonCtor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonpathContext : ParserRuleContext {
		public ITerminalNode ROOT_VALUE() { return GetToken(JsltParser.ROOT_VALUE, 0); }
		public SubscriptContext subscript() {
			return GetRuleContext<SubscriptContext>(0);
		}
		public JsonpathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonpath; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonpath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonpathContext jsonpath() {
		JsonpathContext _localctx = new JsonpathContext(Context, State);
		EnterRule(_localctx, 32, RULE_jsonpath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(ROOT_VALUE);
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RECURSIVE_DESCENT) | (1L << SUBSCRIPT) | (1L << BRACKET_LEFT))) != 0)) {
				{
				State = 143; subscript();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public ITerminalNode RECURSIVE_DESCENT() { return GetToken(JsltParser.RECURSIVE_DESCENT, 0); }
		public SubscriptableBarewordContext subscriptableBareword() {
			return GetRuleContext<SubscriptableBarewordContext>(0);
		}
		public SubscriptablesContext subscriptables() {
			return GetRuleContext<SubscriptablesContext>(0);
		}
		public SubscriptContext subscript() {
			return GetRuleContext<SubscriptContext>(0);
		}
		public ITerminalNode SUBSCRIPT() { return GetToken(JsltParser.SUBSCRIPT, 0); }
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 34, RULE_subscript);
		int _la;
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RECURSIVE_DESCENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146; Match(RECURSIVE_DESCENT);
				State = 149;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case WILDCARD_SUBSCRIPT:
				case ID:
					{
					State = 147; subscriptableBareword();
					}
					break;
				case BRACKET_LEFT:
					{
					State = 148; subscriptables();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RECURSIVE_DESCENT) | (1L << SUBSCRIPT) | (1L << BRACKET_LEFT))) != 0)) {
					{
					State = 151; subscript();
					}
				}

				}
				break;
			case SUBSCRIPT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154; Match(SUBSCRIPT);
				State = 155; subscriptableBareword();
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RECURSIVE_DESCENT) | (1L << SUBSCRIPT) | (1L << BRACKET_LEFT))) != 0)) {
					{
					State = 156; subscript();
					}
				}

				}
				break;
			case BRACKET_LEFT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 159; subscriptables();
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RECURSIVE_DESCENT) | (1L << SUBSCRIPT) | (1L << BRACKET_LEFT))) != 0)) {
					{
					State = 160; subscript();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptablesContext : ParserRuleContext {
		public ITerminalNode BRACKET_LEFT() { return GetToken(JsltParser.BRACKET_LEFT, 0); }
		public SubscriptableContext[] subscriptable() {
			return GetRuleContexts<SubscriptableContext>();
		}
		public SubscriptableContext subscriptable(int i) {
			return GetRuleContext<SubscriptableContext>(i);
		}
		public ITerminalNode BRACKET_RIGHT() { return GetToken(JsltParser.BRACKET_RIGHT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(JsltParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsltParser.COMMA, i);
		}
		public SubscriptablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptables; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptablesContext subscriptables() {
		SubscriptablesContext _localctx = new SubscriptablesContext(Context, State);
		EnterRule(_localctx, 36, RULE_subscriptables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(BRACKET_LEFT);
			State = 166; subscriptable();
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 167; Match(COMMA);
				State = 168; subscriptable();
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 174; Match(BRACKET_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptableBarewordContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(JsltParser.ID, 0); }
		public ITerminalNode WILDCARD_SUBSCRIPT() { return GetToken(JsltParser.WILDCARD_SUBSCRIPT, 0); }
		public SubscriptableBarewordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptableBareword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptableBareword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptableBarewordContext subscriptableBareword() {
		SubscriptableBarewordContext _localctx = new SubscriptableBarewordContext(Context, State);
		EnterRule(_localctx, 38, RULE_subscriptableBareword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			_la = TokenStream.LA(1);
			if ( !(_la==WILDCARD_SUBSCRIPT || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptableContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsltParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(JsltParser.NUMBER, 0); }
		public SliceableContext sliceable() {
			return GetRuleContext<SliceableContext>(0);
		}
		public ITerminalNode WILDCARD_SUBSCRIPT() { return GetToken(JsltParser.WILDCARD_SUBSCRIPT, 0); }
		public ITerminalNode QUESTION() { return GetToken(JsltParser.QUESTION, 0); }
		public ITerminalNode PAREN_LEFT() { return GetToken(JsltParser.PAREN_LEFT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PAREN_RIGHT() { return GetToken(JsltParser.PAREN_RIGHT, 0); }
		public SubscriptableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptableContext subscriptable() {
		SubscriptableContext _localctx = new SubscriptableContext(Context, State);
		EnterRule(_localctx, 40, RULE_subscriptable);
		int _la;
		try {
			State = 192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 178; Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NUMBER) {
					{
					State = 179; Match(NUMBER);
					}
				}

				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 182; sliceable();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 185; sliceable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 186; Match(WILDCARD_SUBSCRIPT);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 187; Match(QUESTION);
				State = 188; Match(PAREN_LEFT);
				State = 189; expression();
				State = 190; Match(PAREN_RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceableContext : ParserRuleContext {
		public ITerminalNode[] COLON() { return GetTokens(JsltParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(JsltParser.COLON, i);
		}
		public ITerminalNode[] NUMBER() { return GetTokens(JsltParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(JsltParser.NUMBER, i);
		}
		public SliceableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceableContext sliceable() {
		SliceableContext _localctx = new SliceableContext(Context, State);
		EnterRule(_localctx, 42, RULE_sliceable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; Match(COLON);
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBER) {
				{
				State = 195; Match(NUMBER);
				}
			}

			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 198; Match(COLON);
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NUMBER) {
					{
					State = 199; Match(NUMBER);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; andExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public OrExpressionContext orExpression() {
			return GetRuleContext<OrExpressionContext>(0);
		}
		public ITerminalNode AND() { return GetToken(JsltParser.AND, 0); }
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; orExpression();
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 207; Match(AND);
				State = 208; andExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExpressionContext : ParserRuleContext {
		public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		public ITerminalNode OR() { return GetToken(JsltParser.OR, 0); }
		public OrExpressionContext orExpression() {
			return GetRuleContext<OrExpressionContext>(0);
		}
		public OrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExpressionContext orExpression() {
		OrExpressionContext _localctx = new OrExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_orExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211; notExpression();
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 212; Match(OR);
				State = 213; orExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExpressionContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(JsltParser.NOT, 0); }
		public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		public ITerminalNode PAREN_LEFT() { return GetToken(JsltParser.PAREN_LEFT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PAREN_RIGHT() { return GetToken(JsltParser.PAREN_RIGHT, 0); }
		public ITerminalNode ROOT_VALUE() { return GetToken(JsltParser.ROOT_VALUE, 0); }
		public ITerminalNode CURRENT_VALUE() { return GetToken(JsltParser.CURRENT_VALUE, 0); }
		public SubscriptContext subscript() {
			return GetRuleContext<SubscriptContext>(0);
		}
		public JsonValueContext jsonValue() {
			return GetRuleContext<JsonValueContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(JsltParser.EQ, 0); }
		public ITerminalNode NE() { return GetToken(JsltParser.NE, 0); }
		public ITerminalNode LT() { return GetToken(JsltParser.LT, 0); }
		public ITerminalNode LE() { return GetToken(JsltParser.LE, 0); }
		public ITerminalNode GT() { return GetToken(JsltParser.GT, 0); }
		public ITerminalNode GE() { return GetToken(JsltParser.GE, 0); }
		public NotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionContext notExpression() {
		NotExpressionContext _localctx = new NotExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_notExpression);
		int _la;
		try {
			State = 230;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216; Match(NOT);
				State = 217; notExpression();
				}
				break;
			case PAREN_LEFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218; Match(PAREN_LEFT);
				State = 219; expression();
				State = 220; Match(PAREN_RIGHT);
				}
				break;
			case CURRENT_VALUE:
			case ROOT_VALUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 222;
				_la = TokenStream.LA(1);
				if ( !(_la==CURRENT_VALUE || _la==ROOT_VALUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RECURSIVE_DESCENT) | (1L << SUBSCRIPT) | (1L << BRACKET_LEFT))) != 0)) {
					{
					State = 223; subscript();
					}
				}

				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << GE) | (1L << GT) | (1L << LE) | (1L << LT) | (1L << NE))) != 0)) {
					{
					State = 226;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << GE) | (1L << GT) | (1L << LE) | (1L << LT) | (1L << NE))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 227; jsonValue();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\'', '\xEB', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\a', '\x4', '@', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x43', 
		'\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', 'I', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 
		'S', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'V', '\v', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\\', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'g', 
		'\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', 'y', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x80', '\n', '\xF', '\f', 
		'\xF', '\xE', '\xF', '\x83', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\a', '\x10', '\x88', '\n', '\x10', '\f', '\x10', '\xE', 
		'\x10', '\x8B', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\x8F', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x93', 
		'\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\x98', '\n', '\x13', '\x3', '\x13', '\x5', '\x13', '\x9B', '\n', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xA0', '\n', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xA4', '\n', '\x13', 
		'\x5', '\x13', '\xA6', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\a', '\x14', '\xAC', '\n', '\x14', '\f', '\x14', 
		'\xE', '\x14', '\xAF', '\v', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xB7', 
		'\n', '\x16', '\x3', '\x16', '\x5', '\x16', '\xBA', '\n', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x5', '\x16', '\xC3', '\n', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x5', '\x17', '\xC7', '\n', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\xCB', '\n', '\x17', '\x5', '\x17', '\xCD', '\n', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\xD4', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\xD9', '\n', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x5', '\x1B', '\xE3', '\n', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\xE7', '\n', '\x1B', '\x5', '\x1B', '\xE9', 
		'\n', '\x1B', '\x3', '\x1B', '\x2', '\x2', '\x1C', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x2', '\x6', '\x3', '\x2', '\x13', '\x14', '\x4', '\x2', '\a', 
		'\a', '&', '&', '\x4', '\x2', '\x3', '\x3', '\x5', '\x5', '\x3', '\x2', 
		'\n', '\xF', '\x2', '\xF7', '\x2', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x39', '\x3', '\x2', '\x2', '\x2', '\x6', 'H', '\x3', '\x2', '\x2', 
		'\x2', '\b', 'J', '\x3', '\x2', '\x2', '\x2', '\n', '[', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x66', '\x3', '\x2', '\x2', '\x2', '\xE', 'h', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'j', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'l', '\x3', '\x2', '\x2', '\x2', '\x14', 'n', '\x3', '\x2', '\x2', '\x2', 
		'\x16', 'p', '\x3', '\x2', '\x2', '\x2', '\x18', 'r', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', 't', '\x3', '\x2', '\x2', '\x2', '\x1C', '|', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x84', '\x3', '\x2', '\x2', '\x2', ' ', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'$', '\xA5', '\x3', '\x2', '\x2', '\x2', '&', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '(', '\xB2', '\x3', '\x2', '\x2', '\x2', '*', '\xC2', '\x3', '\x2', 
		'\x2', '\x2', ',', '\xC4', '\x3', '\x2', '\x2', '\x2', '.', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\xD0', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\x34', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x37', '\x5', '\x4', '\x3', '\x2', '\x37', '\x38', '\a', 
		'\x2', '\x2', '\x3', '\x38', '\x3', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\x5', '\f', '\a', '\x2', ':', '\x5', '\x3', '\x2', '\x2', '\x2', 
		';', '<', '\a', '\x16', '\x2', '\x2', '<', '\x41', '\x5', '\b', '\x5', 
		'\x2', '=', '>', '\a', '\x1B', '\x2', '\x2', '>', '@', '\x5', '\b', '\x5', 
		'\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', '@', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\a', '\x17', 
		'\x2', '\x2', '\x45', 'I', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\a', 
		'\x16', '\x2', '\x2', 'G', 'I', '\a', '\x17', '\x2', '\x2', 'H', ';', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 'I', 
		'\a', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', '\x1F', '\x2', '\x2', 
		'K', 'L', '\a', '\x1A', '\x2', '\x2', 'L', 'M', '\x5', '\f', '\a', '\x2', 
		'M', '\t', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '\x18', '\x2', 
		'\x2', 'O', 'T', '\x5', '\f', '\a', '\x2', 'P', 'Q', '\a', '\x1B', '\x2', 
		'\x2', 'Q', 'S', '\x5', '\f', '\a', '\x2', 'R', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'V', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\x19', '\x2', 
		'\x2', 'X', '\\', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '\x18', 
		'\x2', '\x2', 'Z', '\\', '\a', '\x19', '\x2', '\x2', '[', 'N', '\x3', 
		'\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '\\', '\v', 
		'\x3', '\x2', '\x2', '\x2', ']', 'g', '\x5', '\x6', '\x4', '\x2', '^', 
		'g', '\x5', '\n', '\x6', '\x2', '_', 'g', '\x5', '\x16', '\f', '\x2', 
		'`', 'g', '\x5', '\xE', '\b', '\x2', '\x61', 'g', '\x5', '\x14', '\v', 
		'\x2', '\x62', 'g', '\x5', '\x12', '\n', '\x2', '\x63', 'g', '\x5', '\x18', 
		'\r', '\x2', '\x64', 'g', '\x5', '\x1E', '\x10', '\x2', '\x65', 'g', '\x5', 
		'\x10', '\t', '\x2', '\x66', ']', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'^', '\x3', '\x2', '\x2', '\x2', '\x66', '_', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '`', '\x3', '\x2', '\x2', '\x2', '\x66', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x62', '\x3', '\x2', '\x2', '\x2', '\x66', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x65', '\x3', '\x2', '\x2', '\x2', 'g', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'i', '\a', '\x1F', '\x2', '\x2', 'i', '\xF', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'k', '\a', '!', '\x2', '\x2', 'k', '\x11', '\x3', '\x2', 
		'\x2', '\x2', 'l', 'm', '\a', '#', '\x2', '\x2', 'm', '\x13', '\x3', '\x2', 
		'\x2', '\x2', 'n', 'o', '\a', '$', '\x2', '\x2', 'o', '\x15', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'q', '\t', '\x2', '\x2', '\x2', 'q', '\x17', '\x3', 
		'\x2', '\x2', '\x2', 'r', 's', '\a', '\x15', '\x2', '\x2', 's', '\x19', 
		'\x3', '\x2', '\x2', '\x2', 't', 'u', '\a', '\x12', '\x2', '\x2', 'u', 
		'v', '\a', '&', '\x2', '\x2', 'v', 'x', '\a', '\x1C', '\x2', '\x2', 'w', 
		'y', '\x5', '\x1C', '\xF', '\x2', 'x', 'w', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 
		'z', '{', '\a', '\x1D', '\x2', '\x2', '{', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '|', '\x81', '\x5', '\f', '\a', '\x2', '}', '~', '\a', '\x1B', 
		'\x2', '\x2', '~', '\x80', '\x5', '\f', '\a', '\x2', '\x7F', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x83', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x83', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x89', '\x5', ' ', '\x11', '\x2', '\x85', 
		'\x86', '\a', '\b', '\x2', '\x2', '\x86', '\x88', '\x5', ' ', '\x11', 
		'\x2', '\x87', '\x85', '\x3', '\x2', '\x2', '\x2', '\x88', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x87', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8F', '\x5', 
		'\"', '\x12', '\x2', '\x8D', '\x8F', '\x5', '\x1A', '\xE', '\x2', '\x8E', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '!', '\x3', '\x2', '\x2', '\x2', '\x90', '\x92', '\a', 
		'\x5', '\x2', '\x2', '\x91', '\x93', '\x5', '$', '\x13', '\x2', '\x92', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '#', '\x3', '\x2', '\x2', '\x2', '\x94', '\x97', '\a', 
		'\x4', '\x2', '\x2', '\x95', '\x98', '\x5', '(', '\x15', '\x2', '\x96', 
		'\x98', '\x5', '&', '\x14', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x9B', '\x5', '$', '\x13', '\x2', '\x9A', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\xA6', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\a', 
		'\x6', '\x2', '\x2', '\x9D', '\x9F', '\x5', '(', '\x15', '\x2', '\x9E', 
		'\xA0', '\x5', '$', '\x13', '\x2', '\x9F', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\xA1', '\xA3', '\x5', '&', '\x14', '\x2', '\xA2', 
		'\xA4', '\x5', '$', '\x13', '\x2', '\xA3', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\x94', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '%', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\a', 
		'\x18', '\x2', '\x2', '\xA8', '\xAD', '\x5', '*', '\x16', '\x2', '\xA9', 
		'\xAA', '\a', '\x1B', '\x2', '\x2', '\xAA', '\xAC', '\x5', '*', '\x16', 
		'\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\a', 
		'\x19', '\x2', '\x2', '\xB1', '\'', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB3', '\t', '\x3', '\x2', '\x2', '\xB3', ')', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\xC3', '\a', '\x1F', '\x2', '\x2', '\xB5', '\xB7', '\a', '#', 
		'\x2', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xB7', '\xB9', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\xBA', '\x5', ',', '\x17', '\x2', '\xB9', '\xB8', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\xBB', '\xC3', '\x5', ',', '\x17', '\x2', 
		'\xBC', '\xC3', '\a', '\a', '\x2', '\x2', '\xBD', '\xBE', '\a', '\x1E', 
		'\x2', '\x2', '\xBE', '\xBF', '\a', '\x1C', '\x2', '\x2', '\xBF', '\xC0', 
		'\x5', '.', '\x18', '\x2', '\xC0', '\xC1', '\a', '\x1D', '\x2', '\x2', 
		'\xC1', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\xBC', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xC3', '+', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\xC6', '\a', '\x1A', '\x2', '\x2', '\xC5', '\xC7', 
		'\a', '#', '\x2', '\x2', '\xC6', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xCA', '\a', '\x1A', '\x2', '\x2', '\xC9', '\xCB', '\a', 
		'#', '\x2', '\x2', '\xCA', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xCB', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '-', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'\xCF', '\x5', '\x30', '\x19', '\x2', '\xCF', '/', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xD3', '\x5', '\x32', '\x1A', '\x2', '\xD1', '\xD2', '\a', 
		'\t', '\x2', '\x2', '\xD2', '\xD4', '\x5', '\x30', '\x19', '\x2', '\xD3', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\x31', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD8', '\x5', 
		'\x34', '\x1B', '\x2', '\xD6', '\xD7', '\a', '\x11', '\x2', '\x2', '\xD7', 
		'\xD9', '\x5', '\x32', '\x1A', '\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD9', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xDB', '\a', '\x10', '\x2', '\x2', '\xDB', 
		'\xE9', '\x5', '\x34', '\x1B', '\x2', '\xDC', '\xDD', '\a', '\x1C', '\x2', 
		'\x2', '\xDD', '\xDE', '\x5', '.', '\x18', '\x2', '\xDE', '\xDF', '\a', 
		'\x1D', '\x2', '\x2', '\xDF', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE0', 
		'\xE2', '\t', '\x4', '\x2', '\x2', '\xE1', '\xE3', '\x5', '$', '\x13', 
		'\x2', '\xE2', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xE5', '\t', '\x5', '\x2', '\x2', '\xE5', '\xE7', '\x5', '\f', '\a', 
		'\x2', '\xE6', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE9', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x41', 'H', 'T', '[', '\x66', 'x', '\x81', 
		'\x89', '\x8E', '\x92', '\x97', '\x9A', '\x9F', '\xA3', '\xA5', '\xAD', 
		'\xB6', '\xB9', '\xC2', '\xC6', '\xCA', '\xCC', '\xD3', '\xD8', '\xE2', 
		'\xE6', '\xE8',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.Json.Jslt.Parser
