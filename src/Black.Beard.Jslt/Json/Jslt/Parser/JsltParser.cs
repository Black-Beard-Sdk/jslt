//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JsltParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.Json.Jslt.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class JsltParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CURRENT_VALUE=1, RECURSIVE_DESCENT=2, ROOT_VALUE=3, SUBSCRIPT=4, WILDCARD_SUBSCRIPT=5, 
		PIPE=6, URI=7, DATE=8, TIME=9, DATETIME=10, AND=11, EQ=12, GE=13, GT=14, 
		LE=15, LT=16, NE=17, NOT=18, OR=19, NEW=20, TRUE=21, FALSE=22, NULL=23, 
		BRACE_LEFT=24, BRACE_RIGHT=25, BRACKET_LEFT=26, BRACKET_RIGHT=27, COLON=28, 
		COMMA=29, PAREN_LEFT=30, PAREN_RIGHT=31, QUESTION=32, STRING=33, MULTI_LINE_COMMENT=34, 
		CODE_STRING=35, QUOTE_CODE_STRING=36, NUMBER=37, INT=38, WS=39, ID=40, 
		LANGUAGE=41;
	public const int
		RULE_script = 0, RULE_json = 1, RULE_obj = 2, RULE_pair = 3, RULE_array = 4, 
		RULE_jsonValue = 5, RULE_jsonValueString = 6, RULE_jsonValueCodeString = 7, 
		RULE_jsonValueNumber = 8, RULE_jsonValueInteger = 9, RULE_jsonValueBoolean = 10, 
		RULE_jsonValueNull = 11, RULE_jsonCtor = 12, RULE_jsonValueList = 13, 
		RULE_jsonType = 14, RULE_jsonLt = 15, RULE_jsonLtItem = 16, RULE_jsonpath = 17, 
		RULE_subscript = 18, RULE_subscriptables = 19, RULE_subscriptableBareword = 20, 
		RULE_subscriptable = 21, RULE_sliceable = 22, RULE_expression = 23, RULE_andExpression = 24, 
		RULE_orExpression = 25, RULE_notExpression = 26;
	public static readonly string[] ruleNames = {
		"script", "json", "obj", "pair", "array", "jsonValue", "jsonValueString", 
		"jsonValueCodeString", "jsonValueNumber", "jsonValueInteger", "jsonValueBoolean", 
		"jsonValueNull", "jsonCtor", "jsonValueList", "jsonType", "jsonLt", "jsonLtItem", 
		"jsonpath", "subscript", "subscriptables", "subscriptableBareword", "subscriptable", 
		"sliceable", "expression", "andExpression", "orExpression", "notExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'@'", "'..'", "'$'", "'.'", "'*'", "'|'", "'uri'", "'date'", "'time'", 
		"'datetime'", "'and'", "'='", "'>='", "'>'", "'<='", "'<'", "'!='", "'not'", 
		"'or'", "'new'", "'true'", "'false'", "'null'", "'{'", "'}'", "'['", "']'", 
		"':'", "','", "'('", "')'", "'?'", null, null, null, "'''''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CURRENT_VALUE", "RECURSIVE_DESCENT", "ROOT_VALUE", "SUBSCRIPT", 
		"WILDCARD_SUBSCRIPT", "PIPE", "URI", "DATE", "TIME", "DATETIME", "AND", 
		"EQ", "GE", "GT", "LE", "LT", "NE", "NOT", "OR", "NEW", "TRUE", "FALSE", 
		"NULL", "BRACE_LEFT", "BRACE_RIGHT", "BRACKET_LEFT", "BRACKET_RIGHT", 
		"COLON", "COMMA", "PAREN_LEFT", "PAREN_RIGHT", "QUESTION", "STRING", "MULTI_LINE_COMMENT", 
		"CODE_STRING", "QUOTE_CODE_STRING", "NUMBER", "INT", "WS", "ID", "LANGUAGE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JsltParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JsltParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JsltParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JsltParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ScriptContext : ParserRuleContext {
		public JsonContext json() {
			return GetRuleContext<JsonContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(JsltParser.Eof, 0); }
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; json();
			State = 55; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonContext : ParserRuleContext {
		public JsonValueContext jsonValue() {
			return GetRuleContext<JsonValueContext>(0);
		}
		public JsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonContext json() {
		JsonContext _localctx = new JsonContext(Context, State);
		EnterRule(_localctx, 2, RULE_json);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; jsonValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		public ITerminalNode BRACE_LEFT() { return GetToken(JsltParser.BRACE_LEFT, 0); }
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ITerminalNode BRACE_RIGHT() { return GetToken(JsltParser.BRACE_RIGHT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(JsltParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsltParser.COMMA, i);
		}
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 4, RULE_obj);
		int _la;
		try {
			State = 72;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59; Match(BRACE_LEFT);
				State = 60; pair();
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 61; Match(COMMA);
					State = 62; pair();
					}
					}
					State = 67;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 68; Match(BRACE_RIGHT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70; Match(BRACE_LEFT);
				State = 71; Match(BRACE_RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsltParser.STRING, 0); }
		public ITerminalNode COLON() { return GetToken(JsltParser.COLON, 0); }
		public JsonValueContext jsonValue() {
			return GetRuleContext<JsonValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 6, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(STRING);
			State = 75; Match(COLON);
			State = 76; jsonValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode BRACKET_LEFT() { return GetToken(JsltParser.BRACKET_LEFT, 0); }
		public JsonValueContext[] jsonValue() {
			return GetRuleContexts<JsonValueContext>();
		}
		public JsonValueContext jsonValue(int i) {
			return GetRuleContext<JsonValueContext>(i);
		}
		public ITerminalNode BRACKET_RIGHT() { return GetToken(JsltParser.BRACKET_RIGHT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(JsltParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsltParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 8, RULE_array);
		int _la;
		try {
			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 78; Match(BRACKET_LEFT);
				State = 79; jsonValue();
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 80; Match(COMMA);
					State = 81; jsonValue();
					}
					}
					State = 86;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 87; Match(BRACKET_RIGHT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89; Match(BRACKET_LEFT);
				State = 90; Match(BRACKET_RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueContext : ParserRuleContext {
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public JsonValueBooleanContext jsonValueBoolean() {
			return GetRuleContext<JsonValueBooleanContext>(0);
		}
		public JsonValueStringContext jsonValueString() {
			return GetRuleContext<JsonValueStringContext>(0);
		}
		public JsonValueIntegerContext jsonValueInteger() {
			return GetRuleContext<JsonValueIntegerContext>(0);
		}
		public JsonValueNumberContext jsonValueNumber() {
			return GetRuleContext<JsonValueNumberContext>(0);
		}
		public JsonValueNullContext jsonValueNull() {
			return GetRuleContext<JsonValueNullContext>(0);
		}
		public JsonLtContext jsonLt() {
			return GetRuleContext<JsonLtContext>(0);
		}
		public JsonValueCodeStringContext jsonValueCodeString() {
			return GetRuleContext<JsonValueCodeStringContext>(0);
		}
		public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public JsonValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueContext jsonValue() {
		JsonValueContext _localctx = new JsonValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_jsonValue);
		try {
			State = 103;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BRACE_LEFT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93; obj();
				}
				break;
			case BRACKET_LEFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; array();
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 95; jsonValueBoolean();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 96; jsonValueString();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 97; jsonValueInteger();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 98; jsonValueNumber();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 99; jsonValueNull();
				}
				break;
			case ROOT_VALUE:
			case NEW:
				EnterOuterAlt(_localctx, 8);
				{
				State = 100; jsonLt();
				}
				break;
			case CODE_STRING:
				EnterOuterAlt(_localctx, 9);
				{
				State = 101; jsonValueCodeString();
				}
				break;
			case CURRENT_VALUE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 102; jsonType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueStringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsltParser.STRING, 0); }
		public JsonValueStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueStringContext jsonValueString() {
		JsonValueStringContext _localctx = new JsonValueStringContext(Context, State);
		EnterRule(_localctx, 12, RULE_jsonValueString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueCodeStringContext : ParserRuleContext {
		public ITerminalNode CODE_STRING() { return GetToken(JsltParser.CODE_STRING, 0); }
		public JsonValueCodeStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueCodeString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueCodeString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueCodeStringContext jsonValueCodeString() {
		JsonValueCodeStringContext _localctx = new JsonValueCodeStringContext(Context, State);
		EnterRule(_localctx, 14, RULE_jsonValueCodeString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(CODE_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueNumberContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(JsltParser.NUMBER, 0); }
		public JsonValueNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueNumber; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueNumberContext jsonValueNumber() {
		JsonValueNumberContext _localctx = new JsonValueNumberContext(Context, State);
		EnterRule(_localctx, 16, RULE_jsonValueNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueIntegerContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(JsltParser.INT, 0); }
		public JsonValueIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueInteger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueIntegerContext jsonValueInteger() {
		JsonValueIntegerContext _localctx = new JsonValueIntegerContext(Context, State);
		EnterRule(_localctx, 18, RULE_jsonValueInteger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueBooleanContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(JsltParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(JsltParser.FALSE, 0); }
		public JsonValueBooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueBoolean; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueBooleanContext jsonValueBoolean() {
		JsonValueBooleanContext _localctx = new JsonValueBooleanContext(Context, State);
		EnterRule(_localctx, 20, RULE_jsonValueBoolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueNullContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(JsltParser.NULL, 0); }
		public JsonValueNullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueNull; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueNull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueNullContext jsonValueNull() {
		JsonValueNullContext _localctx = new JsonValueNullContext(Context, State);
		EnterRule(_localctx, 22, RULE_jsonValueNull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonCtorContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(JsltParser.NEW, 0); }
		public ITerminalNode ID() { return GetToken(JsltParser.ID, 0); }
		public ITerminalNode PAREN_LEFT() { return GetToken(JsltParser.PAREN_LEFT, 0); }
		public ITerminalNode PAREN_RIGHT() { return GetToken(JsltParser.PAREN_RIGHT, 0); }
		public JsonValueListContext jsonValueList() {
			return GetRuleContext<JsonValueListContext>(0);
		}
		public JsonCtorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonCtor; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonCtor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonCtorContext jsonCtor() {
		JsonCtorContext _localctx = new JsonCtorContext(Context, State);
		EnterRule(_localctx, 24, RULE_jsonCtor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(NEW);
			State = 118; Match(ID);
			State = 119; Match(PAREN_LEFT);
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CURRENT_VALUE) | (1L << ROOT_VALUE) | (1L << NEW) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << BRACE_LEFT) | (1L << BRACKET_LEFT) | (1L << STRING) | (1L << CODE_STRING) | (1L << NUMBER) | (1L << INT))) != 0)) {
				{
				State = 120; jsonValueList();
				}
			}

			State = 123; Match(PAREN_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueListContext : ParserRuleContext {
		public JsonValueContext[] jsonValue() {
			return GetRuleContexts<JsonValueContext>();
		}
		public JsonValueContext jsonValue(int i) {
			return GetRuleContext<JsonValueContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JsltParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsltParser.COMMA, i);
		}
		public JsonValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueListContext jsonValueList() {
		JsonValueListContext _localctx = new JsonValueListContext(Context, State);
		EnterRule(_localctx, 26, RULE_jsonValueList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; jsonValue();
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 126; Match(COMMA);
				State = 127; jsonValue();
				}
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonTypeContext : ParserRuleContext {
		public ITerminalNode CURRENT_VALUE() { return GetToken(JsltParser.CURRENT_VALUE, 0); }
		public ITerminalNode URI() { return GetToken(JsltParser.URI, 0); }
		public ITerminalNode DATE() { return GetToken(JsltParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(JsltParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(JsltParser.DATETIME, 0); }
		public JsonTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonTypeContext jsonType() {
		JsonTypeContext _localctx = new JsonTypeContext(Context, State);
		EnterRule(_localctx, 28, RULE_jsonType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(CURRENT_VALUE);
			State = 134;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << URI) | (1L << DATE) | (1L << TIME) | (1L << DATETIME))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonLtContext : ParserRuleContext {
		public JsonLtItemContext[] jsonLtItem() {
			return GetRuleContexts<JsonLtItemContext>();
		}
		public JsonLtItemContext jsonLtItem(int i) {
			return GetRuleContext<JsonLtItemContext>(i);
		}
		public ITerminalNode[] PIPE() { return GetTokens(JsltParser.PIPE); }
		public ITerminalNode PIPE(int i) {
			return GetToken(JsltParser.PIPE, i);
		}
		public JsonLtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonLt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonLt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonLtContext jsonLt() {
		JsonLtContext _localctx = new JsonLtContext(Context, State);
		EnterRule(_localctx, 30, RULE_jsonLt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; jsonLtItem();
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PIPE) {
				{
				{
				State = 137; Match(PIPE);
				State = 138; jsonLtItem();
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonLtItemContext : ParserRuleContext {
		public JsonpathContext jsonpath() {
			return GetRuleContext<JsonpathContext>(0);
		}
		public JsonCtorContext jsonCtor() {
			return GetRuleContext<JsonCtorContext>(0);
		}
		public JsonLtItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonLtItem; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonLtItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonLtItemContext jsonLtItem() {
		JsonLtItemContext _localctx = new JsonLtItemContext(Context, State);
		EnterRule(_localctx, 32, RULE_jsonLtItem);
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ROOT_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 144; jsonpath();
				}
				break;
			case NEW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 145; jsonCtor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonpathContext : ParserRuleContext {
		public ITerminalNode ROOT_VALUE() { return GetToken(JsltParser.ROOT_VALUE, 0); }
		public SubscriptContext subscript() {
			return GetRuleContext<SubscriptContext>(0);
		}
		public JsonpathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonpath; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonpath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonpathContext jsonpath() {
		JsonpathContext _localctx = new JsonpathContext(Context, State);
		EnterRule(_localctx, 34, RULE_jsonpath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(ROOT_VALUE);
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RECURSIVE_DESCENT) | (1L << SUBSCRIPT) | (1L << BRACKET_LEFT))) != 0)) {
				{
				State = 149; subscript();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public ITerminalNode RECURSIVE_DESCENT() { return GetToken(JsltParser.RECURSIVE_DESCENT, 0); }
		public SubscriptableBarewordContext subscriptableBareword() {
			return GetRuleContext<SubscriptableBarewordContext>(0);
		}
		public SubscriptablesContext subscriptables() {
			return GetRuleContext<SubscriptablesContext>(0);
		}
		public SubscriptContext subscript() {
			return GetRuleContext<SubscriptContext>(0);
		}
		public ITerminalNode SUBSCRIPT() { return GetToken(JsltParser.SUBSCRIPT, 0); }
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 36, RULE_subscript);
		int _la;
		try {
			State = 169;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RECURSIVE_DESCENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 152; Match(RECURSIVE_DESCENT);
				State = 155;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case WILDCARD_SUBSCRIPT:
				case ID:
					{
					State = 153; subscriptableBareword();
					}
					break;
				case BRACKET_LEFT:
					{
					State = 154; subscriptables();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RECURSIVE_DESCENT) | (1L << SUBSCRIPT) | (1L << BRACKET_LEFT))) != 0)) {
					{
					State = 157; subscript();
					}
				}

				}
				break;
			case SUBSCRIPT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 160; Match(SUBSCRIPT);
				State = 161; subscriptableBareword();
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RECURSIVE_DESCENT) | (1L << SUBSCRIPT) | (1L << BRACKET_LEFT))) != 0)) {
					{
					State = 162; subscript();
					}
				}

				}
				break;
			case BRACKET_LEFT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 165; subscriptables();
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RECURSIVE_DESCENT) | (1L << SUBSCRIPT) | (1L << BRACKET_LEFT))) != 0)) {
					{
					State = 166; subscript();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptablesContext : ParserRuleContext {
		public ITerminalNode BRACKET_LEFT() { return GetToken(JsltParser.BRACKET_LEFT, 0); }
		public SubscriptableContext[] subscriptable() {
			return GetRuleContexts<SubscriptableContext>();
		}
		public SubscriptableContext subscriptable(int i) {
			return GetRuleContext<SubscriptableContext>(i);
		}
		public ITerminalNode BRACKET_RIGHT() { return GetToken(JsltParser.BRACKET_RIGHT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(JsltParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsltParser.COMMA, i);
		}
		public SubscriptablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptables; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptablesContext subscriptables() {
		SubscriptablesContext _localctx = new SubscriptablesContext(Context, State);
		EnterRule(_localctx, 38, RULE_subscriptables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(BRACKET_LEFT);
			State = 172; subscriptable();
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 173; Match(COMMA);
				State = 174; subscriptable();
				}
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 180; Match(BRACKET_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptableBarewordContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(JsltParser.ID, 0); }
		public ITerminalNode WILDCARD_SUBSCRIPT() { return GetToken(JsltParser.WILDCARD_SUBSCRIPT, 0); }
		public SubscriptableBarewordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptableBareword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptableBareword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptableBarewordContext subscriptableBareword() {
		SubscriptableBarewordContext _localctx = new SubscriptableBarewordContext(Context, State);
		EnterRule(_localctx, 40, RULE_subscriptableBareword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			_la = TokenStream.LA(1);
			if ( !(_la==WILDCARD_SUBSCRIPT || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptableContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsltParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(JsltParser.NUMBER, 0); }
		public SliceableContext sliceable() {
			return GetRuleContext<SliceableContext>(0);
		}
		public ITerminalNode WILDCARD_SUBSCRIPT() { return GetToken(JsltParser.WILDCARD_SUBSCRIPT, 0); }
		public ITerminalNode QUESTION() { return GetToken(JsltParser.QUESTION, 0); }
		public ITerminalNode PAREN_LEFT() { return GetToken(JsltParser.PAREN_LEFT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PAREN_RIGHT() { return GetToken(JsltParser.PAREN_RIGHT, 0); }
		public SubscriptableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptableContext subscriptable() {
		SubscriptableContext _localctx = new SubscriptableContext(Context, State);
		EnterRule(_localctx, 42, RULE_subscriptable);
		int _la;
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 184; Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NUMBER) {
					{
					State = 185; Match(NUMBER);
					}
				}

				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 188; sliceable();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 191; sliceable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 192; Match(WILDCARD_SUBSCRIPT);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 193; Match(QUESTION);
				State = 194; Match(PAREN_LEFT);
				State = 195; expression();
				State = 196; Match(PAREN_RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceableContext : ParserRuleContext {
		public ITerminalNode[] COLON() { return GetTokens(JsltParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(JsltParser.COLON, i);
		}
		public ITerminalNode[] NUMBER() { return GetTokens(JsltParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(JsltParser.NUMBER, i);
		}
		public SliceableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceableContext sliceable() {
		SliceableContext _localctx = new SliceableContext(Context, State);
		EnterRule(_localctx, 44, RULE_sliceable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(COLON);
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBER) {
				{
				State = 201; Match(NUMBER);
				}
			}

			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 204; Match(COLON);
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NUMBER) {
					{
					State = 205; Match(NUMBER);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; andExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public OrExpressionContext orExpression() {
			return GetRuleContext<OrExpressionContext>(0);
		}
		public ITerminalNode AND() { return GetToken(JsltParser.AND, 0); }
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; orExpression();
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 213; Match(AND);
				State = 214; andExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExpressionContext : ParserRuleContext {
		public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		public ITerminalNode OR() { return GetToken(JsltParser.OR, 0); }
		public OrExpressionContext orExpression() {
			return GetRuleContext<OrExpressionContext>(0);
		}
		public OrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExpressionContext orExpression() {
		OrExpressionContext _localctx = new OrExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_orExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; notExpression();
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 218; Match(OR);
				State = 219; orExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExpressionContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(JsltParser.NOT, 0); }
		public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		public ITerminalNode PAREN_LEFT() { return GetToken(JsltParser.PAREN_LEFT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PAREN_RIGHT() { return GetToken(JsltParser.PAREN_RIGHT, 0); }
		public ITerminalNode ROOT_VALUE() { return GetToken(JsltParser.ROOT_VALUE, 0); }
		public ITerminalNode CURRENT_VALUE() { return GetToken(JsltParser.CURRENT_VALUE, 0); }
		public SubscriptContext subscript() {
			return GetRuleContext<SubscriptContext>(0);
		}
		public JsonValueContext jsonValue() {
			return GetRuleContext<JsonValueContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(JsltParser.EQ, 0); }
		public ITerminalNode NE() { return GetToken(JsltParser.NE, 0); }
		public ITerminalNode LT() { return GetToken(JsltParser.LT, 0); }
		public ITerminalNode LE() { return GetToken(JsltParser.LE, 0); }
		public ITerminalNode GT() { return GetToken(JsltParser.GT, 0); }
		public ITerminalNode GE() { return GetToken(JsltParser.GE, 0); }
		public NotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionContext notExpression() {
		NotExpressionContext _localctx = new NotExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_notExpression);
		int _la;
		try {
			State = 236;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 222; Match(NOT);
				State = 223; notExpression();
				}
				break;
			case PAREN_LEFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 224; Match(PAREN_LEFT);
				State = 225; expression();
				State = 226; Match(PAREN_RIGHT);
				}
				break;
			case CURRENT_VALUE:
			case ROOT_VALUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 228;
				_la = TokenStream.LA(1);
				if ( !(_la==CURRENT_VALUE || _la==ROOT_VALUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RECURSIVE_DESCENT) | (1L << SUBSCRIPT) | (1L << BRACKET_LEFT))) != 0)) {
					{
					State = 229; subscript();
					}
				}

				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << GE) | (1L << GT) | (1L << LE) | (1L << LT) | (1L << NE))) != 0)) {
					{
					State = 232;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << GE) | (1L << GT) | (1L << LE) | (1L << LT) | (1L << NE))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 233; jsonValue();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '+', '\xF1', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x42', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', '\x45', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'K', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'U', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', 'X', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '^', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'j', '\n', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'|', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\a', '\xF', '\x83', '\n', '\xF', '\f', '\xF', '\xE', '\xF', 
		'\x86', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x8E', '\n', '\x11', 
		'\f', '\x11', '\xE', '\x11', '\x91', '\v', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x5', '\x12', '\x95', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x99', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\x9E', '\n', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\xA1', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\xA6', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\xAA', '\n', '\x14', '\x5', '\x14', '\xAC', '\n', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\xB2', '\n', 
		'\x15', '\f', '\x15', '\xE', '\x15', '\xB5', '\v', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\xBD', '\n', '\x17', '\x3', '\x17', '\x5', '\x17', '\xC0', 
		'\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\xC9', '\n', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\xCD', '\n', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\xD1', '\n', '\x18', '\x5', 
		'\x18', '\xD3', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\xDA', '\n', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\xDF', '\n', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\xE9', '\n', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\xED', '\n', '\x1C', 
		'\x5', '\x1C', '\xEF', '\n', '\x1C', '\x3', '\x1C', '\x2', '\x2', '\x1D', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x2', '\a', '\x3', '\x2', '\x17', 
		'\x18', '\x3', '\x2', '\t', '\f', '\x4', '\x2', '\a', '\a', '*', '*', 
		'\x4', '\x2', '\x3', '\x3', '\x5', '\x5', '\x3', '\x2', '\xE', '\x13', 
		'\x2', '\xFD', '\x2', '\x38', '\x3', '\x2', '\x2', '\x2', '\x4', ';', 
		'\x3', '\x2', '\x2', '\x2', '\x6', 'J', '\x3', '\x2', '\x2', '\x2', '\b', 
		'L', '\x3', '\x2', '\x2', '\x2', '\n', ']', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'i', '\x3', '\x2', '\x2', '\x2', '\xE', 'k', '\x3', '\x2', '\x2', 
		'\x2', '\x10', 'm', '\x3', '\x2', '\x2', '\x2', '\x12', 'o', '\x3', '\x2', 
		'\x2', '\x2', '\x14', 'q', '\x3', '\x2', '\x2', '\x2', '\x16', 's', '\x3', 
		'\x2', '\x2', '\x2', '\x18', 'u', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'w', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x87', '\x3', '\x2', '\x2', '\x2', ' ', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x94', '\x3', '\x2', '\x2', '\x2', '$', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '&', '\xAB', '\x3', '\x2', '\x2', '\x2', '(', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '*', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', ',', '\xC8', '\x3', '\x2', '\x2', '\x2', '.', '\xCA', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\xD4', '\x3', '\x2', '\x2', '\x2', '\x32', '\xD6', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\xDB', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\xEE', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x5', '\x4', 
		'\x3', '\x2', '\x39', ':', '\a', '\x2', '\x2', '\x3', ':', '\x3', '\x3', 
		'\x2', '\x2', '\x2', ';', '<', '\x5', '\f', '\a', '\x2', '<', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '=', '>', '\a', '\x1A', '\x2', '\x2', '>', '\x43', 
		'\x5', '\b', '\x5', '\x2', '?', '@', '\a', '\x1F', '\x2', '\x2', '@', 
		'\x42', '\x5', '\b', '\x5', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x45', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'G', '\a', '\x1B', '\x2', '\x2', 'G', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'H', 'I', '\a', '\x1A', '\x2', '\x2', 'I', 'K', '\a', '\x1B', '\x2', 
		'\x2', 'J', '=', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', 
		'\x2', 'K', '\a', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '#', '\x2', 
		'\x2', 'M', 'N', '\a', '\x1E', '\x2', '\x2', 'N', 'O', '\x5', '\f', '\a', 
		'\x2', 'O', '\t', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\a', '\x1C', 
		'\x2', '\x2', 'Q', 'V', '\x5', '\f', '\a', '\x2', 'R', 'S', '\a', '\x1F', 
		'\x2', '\x2', 'S', 'U', '\x5', '\f', '\a', '\x2', 'T', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'X', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', 'Y', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '\x1D', 
		'\x2', '\x2', 'Z', '^', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\a', '\x1C', 
		'\x2', '\x2', '\\', '^', '\a', '\x1D', '\x2', '\x2', ']', 'P', '\x3', 
		'\x2', '\x2', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', '^', '\v', 
		'\x3', '\x2', '\x2', '\x2', '_', 'j', '\x5', '\x6', '\x4', '\x2', '`', 
		'j', '\x5', '\n', '\x6', '\x2', '\x61', 'j', '\x5', '\x16', '\f', '\x2', 
		'\x62', 'j', '\x5', '\xE', '\b', '\x2', '\x63', 'j', '\x5', '\x14', '\v', 
		'\x2', '\x64', 'j', '\x5', '\x12', '\n', '\x2', '\x65', 'j', '\x5', '\x18', 
		'\r', '\x2', '\x66', 'j', '\x5', ' ', '\x11', '\x2', 'g', 'j', '\x5', 
		'\x10', '\t', '\x2', 'h', 'j', '\x5', '\x1E', '\x10', '\x2', 'i', '_', 
		'\x3', '\x2', '\x2', '\x2', 'i', '`', '\x3', '\x2', '\x2', '\x2', 'i', 
		'\x61', '\x3', '\x2', '\x2', '\x2', 'i', '\x62', '\x3', '\x2', '\x2', 
		'\x2', 'i', '\x63', '\x3', '\x2', '\x2', '\x2', 'i', '\x64', '\x3', '\x2', 
		'\x2', '\x2', 'i', '\x65', '\x3', '\x2', '\x2', '\x2', 'i', '\x66', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'j', '\r', '\x3', '\x2', '\x2', '\x2', 'k', 'l', 
		'\a', '#', '\x2', '\x2', 'l', '\xF', '\x3', '\x2', '\x2', '\x2', 'm', 
		'n', '\a', '%', '\x2', '\x2', 'n', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\a', '\'', '\x2', '\x2', 'p', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\a', '(', '\x2', '\x2', 'r', '\x15', '\x3', '\x2', '\x2', 
		'\x2', 's', 't', '\t', '\x2', '\x2', '\x2', 't', '\x17', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'v', '\a', '\x19', '\x2', '\x2', 'v', '\x19', '\x3', 
		'\x2', '\x2', '\x2', 'w', 'x', '\a', '\x16', '\x2', '\x2', 'x', 'y', '\a', 
		'*', '\x2', '\x2', 'y', '{', '\a', ' ', '\x2', '\x2', 'z', '|', '\x5', 
		'\x1C', '\xF', '\x2', '{', 'z', '\x3', '\x2', '\x2', '\x2', '{', '|', 
		'\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', 
		'~', '\a', '!', '\x2', '\x2', '~', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', '\x84', '\x5', '\f', '\a', '\x2', '\x80', '\x81', '\a', '\x1F', 
		'\x2', '\x2', '\x81', '\x83', '\x5', '\f', '\a', '\x2', '\x82', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x86', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\a', '\x3', '\x2', '\x2', 
		'\x88', '\x89', '\t', '\x3', '\x2', '\x2', '\x89', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x8F', '\x5', '\"', '\x12', '\x2', '\x8B', '\x8C', 
		'\a', '\b', '\x2', '\x2', '\x8C', '\x8E', '\x5', '\"', '\x12', '\x2', 
		'\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '!', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x95', '\x5', '$', '\x13', 
		'\x2', '\x93', '\x95', '\x5', '\x1A', '\xE', '\x2', '\x94', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x93', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x96', '\x98', '\a', '\x5', '\x2', '\x2', 
		'\x97', '\x99', '\x5', '&', '\x14', '\x2', '\x98', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '%', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x9D', '\a', '\x4', '\x2', '\x2', 
		'\x9B', '\x9E', '\x5', '*', '\x16', '\x2', '\x9C', '\x9E', '\x5', '(', 
		'\x15', '\x2', '\x9D', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\x9F', '\xA1', '\x5', '&', '\x14', '\x2', '\xA0', '\x9F', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xAC', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\a', '\x6', '\x2', '\x2', 
		'\xA3', '\xA5', '\x5', '*', '\x16', '\x2', '\xA4', '\xA6', '\x5', '&', 
		'\x14', '\x2', '\xA5', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\xA7', '\xA9', '\x5', '(', '\x15', '\x2', '\xA8', '\xAA', '\x5', '&', 
		'\x14', '\x2', '\xA9', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\xAB', '\x9A', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xAC', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x1C', '\x2', '\x2', 
		'\xAE', '\xB3', '\x5', ',', '\x17', '\x2', '\xAF', '\xB0', '\a', '\x1F', 
		'\x2', '\x2', '\xB0', '\xB2', '\x5', ',', '\x17', '\x2', '\xB1', '\xAF', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', '\x1D', '\x2', '\x2', 
		'\xB7', ')', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\t', '\x4', 
		'\x2', '\x2', '\xB9', '+', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xC9', 
		'\a', '#', '\x2', '\x2', '\xBB', '\xBD', '\a', '\'', '\x2', '\x2', '\xBC', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xC0', '\x5', 
		'.', '\x18', '\x2', '\xBF', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xC9', '\x5', '.', '\x18', '\x2', '\xC2', '\xC9', '\a', 
		'\a', '\x2', '\x2', '\xC3', '\xC4', '\a', '\"', '\x2', '\x2', '\xC4', 
		'\xC5', '\a', ' ', '\x2', '\x2', '\xC5', '\xC6', '\x5', '\x30', '\x19', 
		'\x2', '\xC6', '\xC7', '\a', '!', '\x2', '\x2', '\xC7', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '-', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xCC', '\a', '\x1E', '\x2', '\x2', '\xCB', '\xCD', '\a', '\'', '\x2', 
		'\x2', '\xCC', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'\xD0', '\a', '\x1E', '\x2', '\x2', '\xCF', '\xD1', '\a', '\'', '\x2', 
		'\x2', '\xD0', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '/', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\x5', 
		'\x32', '\x1A', '\x2', '\xD5', '\x31', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD9', '\x5', '\x34', '\x1B', '\x2', '\xD7', '\xD8', '\a', '\r', '\x2', 
		'\x2', '\xD8', '\xDA', '\x5', '\x32', '\x1A', '\x2', '\xD9', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDE', '\x5', '\x36', '\x1C', 
		'\x2', '\xDC', '\xDD', '\a', '\x15', '\x2', '\x2', '\xDD', '\xDF', '\x5', 
		'\x34', '\x1B', '\x2', '\xDE', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', '\xE1', '\a', '\x14', '\x2', '\x2', '\xE1', '\xEF', '\x5', 
		'\x36', '\x1C', '\x2', '\xE2', '\xE3', '\a', ' ', '\x2', '\x2', '\xE3', 
		'\xE4', '\x5', '\x30', '\x19', '\x2', '\xE4', '\xE5', '\a', '!', '\x2', 
		'\x2', '\xE5', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE8', '\t', 
		'\x5', '\x2', '\x2', '\xE7', '\xE9', '\x5', '&', '\x14', '\x2', '\xE8', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\t', 
		'\x6', '\x2', '\x2', '\xEB', '\xED', '\x5', '\f', '\a', '\x2', '\xEC', 
		'\xEA', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\xEE', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xEE', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\xEF', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x43', 'J', 'V', ']', 'i', '{', '\x84', '\x8F', '\x94', 
		'\x98', '\x9D', '\xA0', '\xA5', '\xA9', '\xAB', '\xB3', '\xBC', '\xBF', 
		'\xC8', '\xCC', '\xD0', '\xD2', '\xD9', '\xDE', '\xE8', '\xEC', '\xEE',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.Json.Jslt.Parser
