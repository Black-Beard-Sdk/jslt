//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JsltParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.Json.Jslt.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class JsltParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SUBSCRIPT=1, WILDCARD_SUBSCRIPT=2, CURRENT_VALUE=3, COLON=4, URI=5, TIME=6, 
		DATETIME=7, STRING_=8, GUID=9, WHEN=10, CASE=11, DEFAULT=12, EQ=13, NE=14, 
		GT=15, LT=16, LE=17, GE=18, NT=19, PLUS=20, MINUS=21, DIVID=22, MODULO=23, 
		POWER=24, AND=25, OR=26, AND_EXCLUSIVE=27, OR_EXCLUSIVE=28, CHAIN=29, 
		TRUE=30, FALSE=31, NULL=32, BRACE_LEFT=33, BRACE_RIGHT=34, BRACKET_LEFT=35, 
		BRACKET_RIGHT=36, COMMA=37, PAREN_LEFT=38, PAREN_RIGHT=39, STRING=40, 
		MULTI_LINE_COMMENT=41, NUMBER=42, INT=43, WS=44, ID=45, DOT_ID=46;
	public const int
		RULE_script = 0, RULE_json = 1, RULE_obj = 2, RULE_pair = 3, RULE_array = 4, 
		RULE_jsonValue = 5, RULE_jsonValueString = 6, RULE_jsonValueNumber = 7, 
		RULE_jsonValueInteger = 8, RULE_jsonValueBoolean = 9, RULE_jsonValueNull = 10, 
		RULE_jsonType = 11, RULE_jsonLtOperation = 12, RULE_jsonLtItem = 13, RULE_operation = 14, 
		RULE_jsonfunctionCall = 15, RULE_jsonValueList = 16;
	public static readonly string[] ruleNames = {
		"script", "json", "obj", "pair", "array", "jsonValue", "jsonValueString", 
		"jsonValueNumber", "jsonValueInteger", "jsonValueBoolean", "jsonValueNull", 
		"jsonType", "jsonLtOperation", "jsonLtItem", "operation", "jsonfunctionCall", 
		"jsonValueList"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'*'", "'@'", "':'", "'uri'", "'time'", "'datetime'", "'string'", 
		"'uuid'", "'when'", "'case'", "'default'", "'=='", "'!='", "'>'", "'<'", 
		"'<='", "'>='", "'!'", "'+'", "'-'", "'/'", "'%'", "'^'", "'&'", "'|'", 
		"'&&'", "'||'", "'->'", "'true'", "'false'", "'null'", "'{'", "'}'", "'['", 
		"']'", "','", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SUBSCRIPT", "WILDCARD_SUBSCRIPT", "CURRENT_VALUE", "COLON", "URI", 
		"TIME", "DATETIME", "STRING_", "GUID", "WHEN", "CASE", "DEFAULT", "EQ", 
		"NE", "GT", "LT", "LE", "GE", "NT", "PLUS", "MINUS", "DIVID", "MODULO", 
		"POWER", "AND", "OR", "AND_EXCLUSIVE", "OR_EXCLUSIVE", "CHAIN", "TRUE", 
		"FALSE", "NULL", "BRACE_LEFT", "BRACE_RIGHT", "BRACKET_LEFT", "BRACKET_RIGHT", 
		"COMMA", "PAREN_LEFT", "PAREN_RIGHT", "STRING", "MULTI_LINE_COMMENT", 
		"NUMBER", "INT", "WS", "ID", "DOT_ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JsltParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JsltParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JsltParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JsltParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ScriptContext : ParserRuleContext {
		public JsonContext json() {
			return GetRuleContext<JsonContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(JsltParser.Eof, 0); }
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; json();
			State = 35; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonContext : ParserRuleContext {
		public JsonValueContext jsonValue() {
			return GetRuleContext<JsonValueContext>(0);
		}
		public JsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonContext json() {
		JsonContext _localctx = new JsonContext(Context, State);
		EnterRule(_localctx, 2, RULE_json);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; jsonValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		public ITerminalNode BRACE_LEFT() { return GetToken(JsltParser.BRACE_LEFT, 0); }
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ITerminalNode BRACE_RIGHT() { return GetToken(JsltParser.BRACE_RIGHT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(JsltParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsltParser.COMMA, i);
		}
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 4, RULE_obj);
		int _la;
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 39; Match(BRACE_LEFT);
				State = 40; pair();
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 41; Match(COMMA);
					State = 42; pair();
					}
					}
					State = 47;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 48; Match(BRACE_RIGHT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 50; Match(BRACE_LEFT);
				State = 51; Match(BRACE_RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsltParser.STRING, 0); }
		public ITerminalNode COLON() { return GetToken(JsltParser.COLON, 0); }
		public JsonValueContext jsonValue() {
			return GetRuleContext<JsonValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 6, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(STRING);
			State = 55; Match(COLON);
			State = 56; jsonValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode BRACKET_LEFT() { return GetToken(JsltParser.BRACKET_LEFT, 0); }
		public JsonValueContext[] jsonValue() {
			return GetRuleContexts<JsonValueContext>();
		}
		public JsonValueContext jsonValue(int i) {
			return GetRuleContext<JsonValueContext>(i);
		}
		public ITerminalNode BRACKET_RIGHT() { return GetToken(JsltParser.BRACKET_RIGHT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(JsltParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsltParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 8, RULE_array);
		int _la;
		try {
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58; Match(BRACKET_LEFT);
				State = 59; jsonValue();
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 60; Match(COMMA);
					State = 61; jsonValue();
					}
					}
					State = 66;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 67; Match(BRACKET_RIGHT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69; Match(BRACKET_LEFT);
				State = 70; Match(BRACKET_RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueContext : ParserRuleContext {
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public JsonLtOperationContext jsonLtOperation() {
			return GetRuleContext<JsonLtOperationContext>(0);
		}
		public JsonValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueContext jsonValue() {
		JsonValueContext _localctx = new JsonValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_jsonValue);
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BRACE_LEFT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 73; obj();
				}
				break;
			case BRACKET_LEFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 74; array();
				}
				break;
			case CURRENT_VALUE:
			case NT:
			case TRUE:
			case FALSE:
			case NULL:
			case PAREN_LEFT:
			case STRING:
			case NUMBER:
			case INT:
			case DOT_ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 75; jsonLtOperation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueStringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsltParser.STRING, 0); }
		public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public JsonValueStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueStringContext jsonValueString() {
		JsonValueStringContext _localctx = new JsonValueStringContext(Context, State);
		EnterRule(_localctx, 12, RULE_jsonValueString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(STRING);
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CURRENT_VALUE) {
				{
				State = 79; jsonType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueNumberContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(JsltParser.NUMBER, 0); }
		public JsonValueNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueNumber; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueNumberContext jsonValueNumber() {
		JsonValueNumberContext _localctx = new JsonValueNumberContext(Context, State);
		EnterRule(_localctx, 14, RULE_jsonValueNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueIntegerContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(JsltParser.INT, 0); }
		public JsonValueIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueInteger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueIntegerContext jsonValueInteger() {
		JsonValueIntegerContext _localctx = new JsonValueIntegerContext(Context, State);
		EnterRule(_localctx, 16, RULE_jsonValueInteger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueBooleanContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(JsltParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(JsltParser.FALSE, 0); }
		public JsonValueBooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueBoolean; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueBooleanContext jsonValueBoolean() {
		JsonValueBooleanContext _localctx = new JsonValueBooleanContext(Context, State);
		EnterRule(_localctx, 18, RULE_jsonValueBoolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueNullContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(JsltParser.NULL, 0); }
		public JsonValueNullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueNull; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueNull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueNullContext jsonValueNull() {
		JsonValueNullContext _localctx = new JsonValueNullContext(Context, State);
		EnterRule(_localctx, 20, RULE_jsonValueNull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonTypeContext : ParserRuleContext {
		public ITerminalNode CURRENT_VALUE() { return GetToken(JsltParser.CURRENT_VALUE, 0); }
		public ITerminalNode URI() { return GetToken(JsltParser.URI, 0); }
		public ITerminalNode TIME() { return GetToken(JsltParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(JsltParser.DATETIME, 0); }
		public ITerminalNode STRING_() { return GetToken(JsltParser.STRING_, 0); }
		public ITerminalNode GUID() { return GetToken(JsltParser.GUID, 0); }
		public JsonTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonTypeContext jsonType() {
		JsonTypeContext _localctx = new JsonTypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_jsonType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(CURRENT_VALUE);
			State = 91;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << URI) | (1L << TIME) | (1L << DATETIME) | (1L << STRING_) | (1L << GUID))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonLtOperationContext : ParserRuleContext {
		public JsonLtItemContext jsonLtItem() {
			return GetRuleContext<JsonLtItemContext>(0);
		}
		public ITerminalNode NT() { return GetToken(JsltParser.NT, 0); }
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public JsonLtOperationContext jsonLtOperation() {
			return GetRuleContext<JsonLtOperationContext>(0);
		}
		public ITerminalNode PAREN_LEFT() { return GetToken(JsltParser.PAREN_LEFT, 0); }
		public ITerminalNode PAREN_RIGHT() { return GetToken(JsltParser.PAREN_RIGHT, 0); }
		public JsonLtOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonLtOperation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonLtOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonLtOperationContext jsonLtOperation() {
		JsonLtOperationContext _localctx = new JsonLtOperationContext(Context, State);
		EnterRule(_localctx, 24, RULE_jsonLtOperation);
		int _la;
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_VALUE:
			case NT:
			case TRUE:
			case FALSE:
			case NULL:
			case STRING:
			case NUMBER:
			case INT:
			case DOT_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NT) {
					{
					State = 93; Match(NT);
					}
				}

				State = 96; jsonLtItem();
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WILDCARD_SUBSCRIPT) | (1L << EQ) | (1L << NE) | (1L << GT) | (1L << LT) | (1L << LE) | (1L << GE) | (1L << PLUS) | (1L << MINUS) | (1L << DIVID) | (1L << MODULO) | (1L << POWER) | (1L << AND) | (1L << OR) | (1L << AND_EXCLUSIVE) | (1L << OR_EXCLUSIVE) | (1L << CHAIN))) != 0)) {
					{
					State = 97; operation();
					State = 98; jsonLtOperation();
					}
				}

				}
				break;
			case PAREN_LEFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102; Match(PAREN_LEFT);
				State = 103; jsonLtOperation();
				State = 104; Match(PAREN_RIGHT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonLtItemContext : ParserRuleContext {
		public JsonfunctionCallContext jsonfunctionCall() {
			return GetRuleContext<JsonfunctionCallContext>(0);
		}
		public JsonValueBooleanContext jsonValueBoolean() {
			return GetRuleContext<JsonValueBooleanContext>(0);
		}
		public JsonValueStringContext jsonValueString() {
			return GetRuleContext<JsonValueStringContext>(0);
		}
		public JsonValueIntegerContext jsonValueInteger() {
			return GetRuleContext<JsonValueIntegerContext>(0);
		}
		public JsonValueNumberContext jsonValueNumber() {
			return GetRuleContext<JsonValueNumberContext>(0);
		}
		public JsonValueNullContext jsonValueNull() {
			return GetRuleContext<JsonValueNullContext>(0);
		}
		public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public JsonLtItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonLtItem; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonLtItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonLtItemContext jsonLtItem() {
		JsonLtItemContext _localctx = new JsonLtItemContext(Context, State);
		EnterRule(_localctx, 26, RULE_jsonLtItem);
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; jsonfunctionCall();
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109; jsonValueBoolean();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 110; jsonValueString();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 111; jsonValueInteger();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 112; jsonValueNumber();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 113; jsonValueNull();
				}
				break;
			case CURRENT_VALUE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 114; jsonType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(JsltParser.EQ, 0); }
		public ITerminalNode GE() { return GetToken(JsltParser.GE, 0); }
		public ITerminalNode GT() { return GetToken(JsltParser.GT, 0); }
		public ITerminalNode LE() { return GetToken(JsltParser.LE, 0); }
		public ITerminalNode LT() { return GetToken(JsltParser.LT, 0); }
		public ITerminalNode NE() { return GetToken(JsltParser.NE, 0); }
		public ITerminalNode PLUS() { return GetToken(JsltParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(JsltParser.MINUS, 0); }
		public ITerminalNode DIVID() { return GetToken(JsltParser.DIVID, 0); }
		public ITerminalNode MODULO() { return GetToken(JsltParser.MODULO, 0); }
		public ITerminalNode WILDCARD_SUBSCRIPT() { return GetToken(JsltParser.WILDCARD_SUBSCRIPT, 0); }
		public ITerminalNode POWER() { return GetToken(JsltParser.POWER, 0); }
		public ITerminalNode CHAIN() { return GetToken(JsltParser.CHAIN, 0); }
		public ITerminalNode AND() { return GetToken(JsltParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(JsltParser.OR, 0); }
		public ITerminalNode AND_EXCLUSIVE() { return GetToken(JsltParser.AND_EXCLUSIVE, 0); }
		public ITerminalNode OR_EXCLUSIVE() { return GetToken(JsltParser.OR_EXCLUSIVE, 0); }
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 28, RULE_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WILDCARD_SUBSCRIPT) | (1L << EQ) | (1L << NE) | (1L << GT) | (1L << LT) | (1L << LE) | (1L << GE) | (1L << PLUS) | (1L << MINUS) | (1L << DIVID) | (1L << MODULO) | (1L << POWER) | (1L << AND) | (1L << OR) | (1L << AND_EXCLUSIVE) | (1L << OR_EXCLUSIVE) | (1L << CHAIN))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonfunctionCallContext : ParserRuleContext {
		public ITerminalNode DOT_ID() { return GetToken(JsltParser.DOT_ID, 0); }
		public ITerminalNode PAREN_LEFT() { return GetToken(JsltParser.PAREN_LEFT, 0); }
		public ITerminalNode PAREN_RIGHT() { return GetToken(JsltParser.PAREN_RIGHT, 0); }
		public JsonValueListContext jsonValueList() {
			return GetRuleContext<JsonValueListContext>(0);
		}
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public JsonfunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonfunctionCall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonfunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonfunctionCallContext jsonfunctionCall() {
		JsonfunctionCallContext _localctx = new JsonfunctionCallContext(Context, State);
		EnterRule(_localctx, 30, RULE_jsonfunctionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; Match(DOT_ID);
			State = 120; Match(PAREN_LEFT);
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CURRENT_VALUE) | (1L << NT) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << BRACE_LEFT) | (1L << BRACKET_LEFT) | (1L << PAREN_LEFT) | (1L << STRING) | (1L << NUMBER) | (1L << INT) | (1L << DOT_ID))) != 0)) {
				{
				State = 121; jsonValueList();
				}
			}

			State = 124; Match(PAREN_RIGHT);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BRACE_LEFT) {
				{
				State = 125; obj();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueListContext : ParserRuleContext {
		public JsonValueContext[] jsonValue() {
			return GetRuleContexts<JsonValueContext>();
		}
		public JsonValueContext jsonValue(int i) {
			return GetRuleContext<JsonValueContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JsltParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsltParser.COMMA, i);
		}
		public JsonValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueListContext jsonValueList() {
		JsonValueListContext _localctx = new JsonValueListContext(Context, State);
		EnterRule(_localctx, 32, RULE_jsonValueList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; jsonValue();
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 129; Match(COMMA);
				State = 130; jsonValue();
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x30', '\x8B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '.', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', '\x31', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x37', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x41', '\n', '\x6', '\f', 
		'\x6', '\xE', '\x6', '\x44', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'J', '\n', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', 'O', '\n', '\a', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', 'S', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x5', '\xE', '\x61', '\n', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', 'g', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', 'm', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', 'v', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '}', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x81', '\n', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\x86', '\n', '\x12', '\f', 
		'\x12', '\xE', '\x12', '\x89', '\v', '\x12', '\x3', '\x12', '\x2', '\x2', 
		'\x13', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '\x2', '\x5', 
		'\x3', '\x2', ' ', '!', '\x3', '\x2', '\a', '\v', '\x5', '\x2', '\x4', 
		'\x4', '\xF', '\x14', '\x16', '\x1F', '\x2', '\x8C', '\x2', '$', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\'', '\x3', '\x2', '\x2', '\x2', '\x6', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'I', '\x3', '\x2', '\x2', '\x2', '\f', 'N', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 'P', '\x3', '\x2', '\x2', '\x2', '\x10', 'T', '\x3', '\x2', 
		'\x2', '\x2', '\x12', 'V', '\x3', '\x2', '\x2', '\x2', '\x14', 'X', '\x3', 
		'\x2', '\x2', '\x2', '\x16', 'Z', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\\', '\x3', '\x2', '\x2', '\x2', '\x1A', 'l', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', 'u', '\x3', '\x2', '\x2', '\x2', '\x1E', 'w', '\x3', '\x2', '\x2', 
		'\x2', ' ', 'y', '\x3', '\x2', '\x2', '\x2', '\"', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '$', '%', '\x5', '\x4', '\x3', '\x2', '%', '&', '\a', '\x2', 
		'\x2', '\x3', '&', '\x3', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x5', 
		'\f', '\a', '\x2', '(', '\x5', '\x3', '\x2', '\x2', '\x2', ')', '*', '\a', 
		'#', '\x2', '\x2', '*', '/', '\x5', '\b', '\x5', '\x2', '+', ',', '\a', 
		'\'', '\x2', '\x2', ',', '.', '\x5', '\b', '\x5', '\x2', '-', '+', '\x3', 
		'\x2', '\x2', '\x2', '.', '\x31', '\x3', '\x2', '\x2', '\x2', '/', '-', 
		'\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x33', '\a', '$', '\x2', '\x2', '\x33', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x35', '\a', '#', '\x2', '\x2', '\x35', 
		'\x37', '\a', '$', '\x2', '\x2', '\x36', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x37', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x39', '\a', '*', '\x2', '\x2', '\x39', ':', '\a', 
		'\x6', '\x2', '\x2', ':', ';', '\x5', '\f', '\a', '\x2', ';', '\t', '\x3', 
		'\x2', '\x2', '\x2', '<', '=', '\a', '%', '\x2', '\x2', '=', '\x42', '\x5', 
		'\f', '\a', '\x2', '>', '?', '\a', '\'', '\x2', '\x2', '?', '\x41', '\x5', 
		'\f', '\a', '\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', '\x41', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\a', 
		'&', '\x2', '\x2', '\x46', 'J', '\x3', '\x2', '\x2', '\x2', 'G', 'H', 
		'\a', '%', '\x2', '\x2', 'H', 'J', '\a', '&', '\x2', '\x2', 'I', '<', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'J', 
		'\v', '\x3', '\x2', '\x2', '\x2', 'K', 'O', '\x5', '\x6', '\x4', '\x2', 
		'L', 'O', '\x5', '\n', '\x6', '\x2', 'M', 'O', '\x5', '\x1A', '\xE', '\x2', 
		'N', 'K', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 
		'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'R', '\a', '*', '\x2', '\x2', 'Q', 'S', '\x5', '\x18', '\r', 
		'\x2', 'R', 'Q', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'S', '\xF', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', ',', '\x2', 
		'\x2', 'U', '\x11', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '-', '\x2', 
		'\x2', 'W', '\x13', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\t', '\x2', 
		'\x2', '\x2', 'Y', '\x15', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', 
		'\"', '\x2', '\x2', '[', '\x17', '\x3', '\x2', '\x2', '\x2', '\\', ']', 
		'\a', '\x5', '\x2', '\x2', ']', '^', '\t', '\x3', '\x2', '\x2', '^', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '_', '\x61', '\a', '\x15', '\x2', '\x2', '`', 
		'_', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x66', '\x5', '\x1C', 
		'\xF', '\x2', '\x63', '\x64', '\x5', '\x1E', '\x10', '\x2', '\x64', '\x65', 
		'\x5', '\x1A', '\xE', '\x2', '\x65', 'g', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x63', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'g', 'm', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\a', '(', 
		'\x2', '\x2', 'i', 'j', '\x5', '\x1A', '\xE', '\x2', 'j', 'k', '\a', ')', 
		'\x2', '\x2', 'k', 'm', '\x3', '\x2', '\x2', '\x2', 'l', '`', '\x3', '\x2', 
		'\x2', '\x2', 'l', 'h', '\x3', '\x2', '\x2', '\x2', 'm', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'v', '\x5', ' ', '\x11', '\x2', 'o', 'v', '\x5', 
		'\x14', '\v', '\x2', 'p', 'v', '\x5', '\xE', '\b', '\x2', 'q', 'v', '\x5', 
		'\x12', '\n', '\x2', 'r', 'v', '\x5', '\x10', '\t', '\x2', 's', 'v', '\x5', 
		'\x16', '\f', '\x2', 't', 'v', '\x5', '\x18', '\r', '\x2', 'u', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'u', 'o', '\x3', '\x2', '\x2', '\x2', 'u', 'p', '\x3', 
		'\x2', '\x2', '\x2', 'u', 'q', '\x3', '\x2', '\x2', '\x2', 'u', 'r', '\x3', 
		'\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 'u', 't', '\x3', 
		'\x2', '\x2', '\x2', 'v', '\x1D', '\x3', '\x2', '\x2', '\x2', 'w', 'x', 
		'\t', '\x4', '\x2', '\x2', 'x', '\x1F', '\x3', '\x2', '\x2', '\x2', 'y', 
		'z', '\a', '\x30', '\x2', '\x2', 'z', '|', '\a', '(', '\x2', '\x2', '{', 
		'}', '\x5', '\"', '\x12', '\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', 
		'|', '}', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x80', '\a', ')', '\x2', '\x2', '\x7F', '\x81', '\x5', '\x6', '\x4', 
		'\x2', '\x80', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '!', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x87', '\x5', '\f', '\a', '\x2', '\x83', '\x84', '\a', '\'', '\x2', '\x2', 
		'\x84', '\x86', '\x5', '\f', '\a', '\x2', '\x85', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x89', '\x3', '\x2', '\x2', '\x2', '\x87', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '#', '\x3', '\x2', '\x2', '\x2', '\x89', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\xF', '/', '\x36', '\x42', 'I', 'N', 'R', '`', '\x66', 
		'l', 'u', '|', '\x80', '\x87',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.Json.Jslt.Parser
