//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JsltParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.Jslt.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class JsltParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SUBSCRIPT=1, WILDCARD_SUBSCRIPT=2, CURRENT_VALUE=3, COLON=4, SHARP=5, 
		RECURSIVE_DESCENT=6, URI_TYPE=7, TIME_TYPE=8, DATETIME_TYPE=9, STRING_TYPE=10, 
		BOOLEAN_TYPE=11, GUID_TYPE=12, INTEGER_TYPE=13, DECIMAL_TYPE=14, IN=15, 
		NIN=16, SUBSETOF=17, CONTAINS=18, SIZE=19, EMPTY=20, TRUE=21, FALSE=22, 
		DEFAULT=23, EQ=24, NE=25, GT=26, LT=27, LE=28, GE=29, NT=30, PLUS=31, 
		MINUS=32, DIVID=33, MODULO=34, POWER=35, AND=36, OR=37, AND_EXCLUSIVE=38, 
		OR_EXCLUSIVE=39, COALESCE=40, CHAIN=41, NULL=42, BRACE_LEFT=43, BRACE_RIGHT=44, 
		BRACKET_LEFT=45, BRACKET_RIGHT=46, COMMA=47, PAREN_LEFT=48, PAREN_RIGHT=49, 
		DOLLAR=50, QUESTION=51, STRING=52, MULTI_LINE_COMMENT=53, SINGLE_QUOTE_CODE_STRING=54, 
		NUMBER=55, SIGNED_NUMBER=56, INT=57, SIGNED_INT=58, ID=59, IDQUOTED=60, 
		VARIABLE_NAME=61, IDLOWCASE=62;
	public const int
		RULE_script = 0, RULE_json = 1, RULE_obj = 2, RULE_pair = 3, RULE_string = 4, 
		RULE_array = 5, RULE_jsonValue = 6, RULE_jsonValueString = 7, RULE_jsonValueNumber = 8, 
		RULE_jsonValueInteger = 9, RULE_jsonValueBoolean = 10, RULE_jsonValueNull = 11, 
		RULE_jsonType = 12, RULE_jsonLtOperations = 13, RULE_jsonLtOperation = 14, 
		RULE_jsonLtItem = 15, RULE_operation = 16, RULE_variable = 17, RULE_jsonfunctionCall = 18, 
		RULE_jsonfunctionName = 19, RULE_jsonValueList = 20, RULE_jsltJsonpath = 21, 
		RULE_jsonpath = 22, RULE_jsonpath_ = 23, RULE_jsonpath__ = 24, RULE_jsonpath_subscript = 25, 
		RULE_subscriptables = 26, RULE_subscriptableArguments = 27, RULE_subscriptableBareword = 28, 
		RULE_jsonPath_identifier = 29, RULE_subscriptable = 30, RULE_sliceable = 31, 
		RULE_signedNumber = 32, RULE_signedInt = 33, RULE_sliceableLeft = 34, 
		RULE_sliceableRight = 35, RULE_sliceableBinary = 36, RULE_expressions = 37, 
		RULE_expression = 38, RULE_binaryOperator = 39, RULE_value = 40;
	public static readonly string[] ruleNames = {
		"script", "json", "obj", "pair", "string", "array", "jsonValue", "jsonValueString", 
		"jsonValueNumber", "jsonValueInteger", "jsonValueBoolean", "jsonValueNull", 
		"jsonType", "jsonLtOperations", "jsonLtOperation", "jsonLtItem", "operation", 
		"variable", "jsonfunctionCall", "jsonfunctionName", "jsonValueList", "jsltJsonpath", 
		"jsonpath", "jsonpath_", "jsonpath__", "jsonpath_subscript", "subscriptables", 
		"subscriptableArguments", "subscriptableBareword", "jsonPath_identifier", 
		"subscriptable", "sliceable", "signedNumber", "signedInt", "sliceableLeft", 
		"sliceableRight", "sliceableBinary", "expressions", "expression", "binaryOperator", 
		"value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'*'", "'@'", "':'", "'#'", "'..'", "'#uri'", "'#time'", 
		"'#datetime'", "'#string'", "'#boolean'", "'#uuid'", "'#integer'", "'#decimal'", 
		"'in'", "'nin'", "'subsetof'", "'contains'", "'size'", "'empty'", "'true'", 
		"'false'", "'default'", "'=='", "'!='", "'>'", "'<'", "'<='", "'>='", 
		"'!'", "'+'", "'-'", "'/'", "'%'", "'^'", "'&'", "'|'", "'&&'", "'||'", 
		"'??'", "'->'", "'null'", "'{'", "'}'", "'['", "']'", "','", "'('", "')'", 
		"'$'", "'?'", null, null, "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SUBSCRIPT", "WILDCARD_SUBSCRIPT", "CURRENT_VALUE", "COLON", "SHARP", 
		"RECURSIVE_DESCENT", "URI_TYPE", "TIME_TYPE", "DATETIME_TYPE", "STRING_TYPE", 
		"BOOLEAN_TYPE", "GUID_TYPE", "INTEGER_TYPE", "DECIMAL_TYPE", "IN", "NIN", 
		"SUBSETOF", "CONTAINS", "SIZE", "EMPTY", "TRUE", "FALSE", "DEFAULT", "EQ", 
		"NE", "GT", "LT", "LE", "GE", "NT", "PLUS", "MINUS", "DIVID", "MODULO", 
		"POWER", "AND", "OR", "AND_EXCLUSIVE", "OR_EXCLUSIVE", "COALESCE", "CHAIN", 
		"NULL", "BRACE_LEFT", "BRACE_RIGHT", "BRACKET_LEFT", "BRACKET_RIGHT", 
		"COMMA", "PAREN_LEFT", "PAREN_RIGHT", "DOLLAR", "QUESTION", "STRING", 
		"MULTI_LINE_COMMENT", "SINGLE_QUOTE_CODE_STRING", "NUMBER", "SIGNED_NUMBER", 
		"INT", "SIGNED_INT", "ID", "IDQUOTED", "VARIABLE_NAME", "IDLOWCASE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JsltParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JsltParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JsltParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JsltParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ScriptContext : ParserRuleContext {
		public JsonContext json() {
			return GetRuleContext<JsonContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(JsltParser.Eof, 0); }
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; json();
			State = 83; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonContext : ParserRuleContext {
		public JsonValueContext jsonValue() {
			return GetRuleContext<JsonValueContext>(0);
		}
		public JsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonContext json() {
		JsonContext _localctx = new JsonContext(Context, State);
		EnterRule(_localctx, 2, RULE_json);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; jsonValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		public ITerminalNode BRACE_LEFT() { return GetToken(JsltParser.BRACE_LEFT, 0); }
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ITerminalNode BRACE_RIGHT() { return GetToken(JsltParser.BRACE_RIGHT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(JsltParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsltParser.COMMA, i);
		}
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 4, RULE_obj);
		int _la;
		try {
			State = 100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87; Match(BRACE_LEFT);
				State = 88; pair();
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 89; Match(COMMA);
					State = 90; pair();
					}
					}
					State = 95;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 96; Match(BRACE_RIGHT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 98; Match(BRACE_LEFT);
				State = 99; Match(BRACE_RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(JsltParser.COLON, 0); }
		public JsonValueContext jsonValue() {
			return GetRuleContext<JsonValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 6, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; @string();
			State = 103; Match(COLON);
			State = 104; jsonValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsltParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 8, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode BRACKET_LEFT() { return GetToken(JsltParser.BRACKET_LEFT, 0); }
		public JsonValueContext[] jsonValue() {
			return GetRuleContexts<JsonValueContext>();
		}
		public JsonValueContext jsonValue(int i) {
			return GetRuleContext<JsonValueContext>(i);
		}
		public ITerminalNode BRACKET_RIGHT() { return GetToken(JsltParser.BRACKET_RIGHT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(JsltParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsltParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 10, RULE_array);
		int _la;
		try {
			State = 121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; Match(BRACKET_LEFT);
				State = 109; jsonValue();
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 110; Match(COMMA);
					State = 111; jsonValue();
					}
					}
					State = 116;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 117; Match(BRACKET_RIGHT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119; Match(BRACKET_LEFT);
				State = 120; Match(BRACKET_RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueContext : ParserRuleContext {
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public JsonLtOperationsContext jsonLtOperations() {
			return GetRuleContext<JsonLtOperationsContext>(0);
		}
		public JsonValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueContext jsonValue() {
		JsonValueContext _localctx = new JsonValueContext(Context, State);
		EnterRule(_localctx, 12, RULE_jsonValue);
		try {
			State = 126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BRACE_LEFT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123; obj();
				}
				break;
			case BRACKET_LEFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124; array();
				}
				break;
			case TRUE:
			case FALSE:
			case NT:
			case NULL:
			case PAREN_LEFT:
			case DOLLAR:
			case STRING:
			case NUMBER:
			case SIGNED_NUMBER:
			case INT:
			case SIGNED_INT:
			case ID:
			case VARIABLE_NAME:
				EnterOuterAlt(_localctx, 3);
				{
				State = 125; jsonLtOperations();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueStringContext : ParserRuleContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public JsonValueStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueStringContext jsonValueString() {
		JsonValueStringContext _localctx = new JsonValueStringContext(Context, State);
		EnterRule(_localctx, 14, RULE_jsonValueString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; @string();
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << URI_TYPE) | (1L << TIME_TYPE) | (1L << DATETIME_TYPE) | (1L << STRING_TYPE) | (1L << BOOLEAN_TYPE) | (1L << GUID_TYPE) | (1L << INTEGER_TYPE) | (1L << DECIMAL_TYPE))) != 0)) {
				{
				State = 129; jsonType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueNumberContext : ParserRuleContext {
		public SignedNumberContext signedNumber() {
			return GetRuleContext<SignedNumberContext>(0);
		}
		public SignedIntContext signedInt() {
			return GetRuleContext<SignedIntContext>(0);
		}
		public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public JsonValueNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueNumber; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueNumberContext jsonValueNumber() {
		JsonValueNumberContext _localctx = new JsonValueNumberContext(Context, State);
		EnterRule(_localctx, 16, RULE_jsonValueNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
			case SIGNED_NUMBER:
				{
				State = 132; signedNumber();
				}
				break;
			case INT:
			case SIGNED_INT:
				{
				State = 133; signedInt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << URI_TYPE) | (1L << TIME_TYPE) | (1L << DATETIME_TYPE) | (1L << STRING_TYPE) | (1L << BOOLEAN_TYPE) | (1L << GUID_TYPE) | (1L << INTEGER_TYPE) | (1L << DECIMAL_TYPE))) != 0)) {
				{
				State = 136; jsonType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueIntegerContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(JsltParser.INT, 0); }
		public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public JsonValueIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueInteger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueIntegerContext jsonValueInteger() {
		JsonValueIntegerContext _localctx = new JsonValueIntegerContext(Context, State);
		EnterRule(_localctx, 18, RULE_jsonValueInteger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(INT);
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << URI_TYPE) | (1L << TIME_TYPE) | (1L << DATETIME_TYPE) | (1L << STRING_TYPE) | (1L << BOOLEAN_TYPE) | (1L << GUID_TYPE) | (1L << INTEGER_TYPE) | (1L << DECIMAL_TYPE))) != 0)) {
				{
				State = 140; jsonType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueBooleanContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(JsltParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(JsltParser.FALSE, 0); }
		public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public JsonValueBooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueBoolean; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueBooleanContext jsonValueBoolean() {
		JsonValueBooleanContext _localctx = new JsonValueBooleanContext(Context, State);
		EnterRule(_localctx, 20, RULE_jsonValueBoolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << URI_TYPE) | (1L << TIME_TYPE) | (1L << DATETIME_TYPE) | (1L << STRING_TYPE) | (1L << BOOLEAN_TYPE) | (1L << GUID_TYPE) | (1L << INTEGER_TYPE) | (1L << DECIMAL_TYPE))) != 0)) {
				{
				State = 144; jsonType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueNullContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(JsltParser.NULL, 0); }
		public JsonValueNullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueNull; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueNull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueNullContext jsonValueNull() {
		JsonValueNullContext _localctx = new JsonValueNullContext(Context, State);
		EnterRule(_localctx, 22, RULE_jsonValueNull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonTypeContext : ParserRuleContext {
		public ITerminalNode BOOLEAN_TYPE() { return GetToken(JsltParser.BOOLEAN_TYPE, 0); }
		public ITerminalNode URI_TYPE() { return GetToken(JsltParser.URI_TYPE, 0); }
		public ITerminalNode TIME_TYPE() { return GetToken(JsltParser.TIME_TYPE, 0); }
		public ITerminalNode DATETIME_TYPE() { return GetToken(JsltParser.DATETIME_TYPE, 0); }
		public ITerminalNode STRING_TYPE() { return GetToken(JsltParser.STRING_TYPE, 0); }
		public ITerminalNode GUID_TYPE() { return GetToken(JsltParser.GUID_TYPE, 0); }
		public ITerminalNode INTEGER_TYPE() { return GetToken(JsltParser.INTEGER_TYPE, 0); }
		public ITerminalNode DECIMAL_TYPE() { return GetToken(JsltParser.DECIMAL_TYPE, 0); }
		public JsonTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonTypeContext jsonType() {
		JsonTypeContext _localctx = new JsonTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_jsonType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << URI_TYPE) | (1L << TIME_TYPE) | (1L << DATETIME_TYPE) | (1L << STRING_TYPE) | (1L << BOOLEAN_TYPE) | (1L << GUID_TYPE) | (1L << INTEGER_TYPE) | (1L << DECIMAL_TYPE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonLtOperationsContext : ParserRuleContext {
		public JsonLtOperationContext[] jsonLtOperation() {
			return GetRuleContexts<JsonLtOperationContext>();
		}
		public JsonLtOperationContext jsonLtOperation(int i) {
			return GetRuleContext<JsonLtOperationContext>(i);
		}
		public ITerminalNode NT() { return GetToken(JsltParser.NT, 0); }
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public ITerminalNode PAREN_LEFT() { return GetToken(JsltParser.PAREN_LEFT, 0); }
		public ITerminalNode PAREN_RIGHT() { return GetToken(JsltParser.PAREN_RIGHT, 0); }
		public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public JsonLtOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonLtOperations; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonLtOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonLtOperationsContext jsonLtOperations() {
		JsonLtOperationsContext _localctx = new JsonLtOperationsContext(Context, State);
		EnterRule(_localctx, 26, RULE_jsonLtOperations);
		int _la;
		try {
			State = 169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 152;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 151; Match(NT);
					}
					break;
				}
				State = 154; jsonLtOperation();
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WILDCARD_SUBSCRIPT) | (1L << EQ) | (1L << NE) | (1L << GT) | (1L << LT) | (1L << LE) | (1L << GE) | (1L << PLUS) | (1L << MINUS) | (1L << DIVID) | (1L << MODULO) | (1L << POWER) | (1L << AND) | (1L << OR) | (1L << AND_EXCLUSIVE) | (1L << OR_EXCLUSIVE) | (1L << COALESCE) | (1L << CHAIN))) != 0)) {
					{
					{
					State = 155; operation();
					State = 156; jsonLtOperation();
					}
					}
					State = 162;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 163; Match(PAREN_LEFT);
				State = 164; jsonLtOperation();
				State = 165; Match(PAREN_RIGHT);
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << URI_TYPE) | (1L << TIME_TYPE) | (1L << DATETIME_TYPE) | (1L << STRING_TYPE) | (1L << BOOLEAN_TYPE) | (1L << GUID_TYPE) | (1L << INTEGER_TYPE) | (1L << DECIMAL_TYPE))) != 0)) {
					{
					State = 166; jsonType();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonLtOperationContext : ParserRuleContext {
		public JsonLtItemContext jsonLtItem() {
			return GetRuleContext<JsonLtItemContext>(0);
		}
		public ITerminalNode NT() { return GetToken(JsltParser.NT, 0); }
		public JsonLtOperationContext jsonLtOperation() {
			return GetRuleContext<JsonLtOperationContext>(0);
		}
		public ITerminalNode PAREN_LEFT() { return GetToken(JsltParser.PAREN_LEFT, 0); }
		public ITerminalNode PAREN_RIGHT() { return GetToken(JsltParser.PAREN_RIGHT, 0); }
		public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public JsonLtOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonLtOperation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonLtOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonLtOperationContext jsonLtOperation() {
		JsonLtOperationContext _localctx = new JsonLtOperationContext(Context, State);
		EnterRule(_localctx, 28, RULE_jsonLtOperation);
		int _la;
		try {
			State = 180;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case NULL:
			case DOLLAR:
			case STRING:
			case NUMBER:
			case SIGNED_NUMBER:
			case INT:
			case SIGNED_INT:
			case ID:
			case VARIABLE_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 171; jsonLtItem();
				}
				break;
			case NT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172; Match(NT);
				State = 173; jsonLtOperation();
				}
				break;
			case PAREN_LEFT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 174; Match(PAREN_LEFT);
				State = 175; jsonLtOperation();
				State = 176; Match(PAREN_RIGHT);
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << URI_TYPE) | (1L << TIME_TYPE) | (1L << DATETIME_TYPE) | (1L << STRING_TYPE) | (1L << BOOLEAN_TYPE) | (1L << GUID_TYPE) | (1L << INTEGER_TYPE) | (1L << DECIMAL_TYPE))) != 0)) {
					{
					State = 177; jsonType();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonLtItemContext : ParserRuleContext {
		public JsonfunctionCallContext jsonfunctionCall() {
			return GetRuleContext<JsonfunctionCallContext>(0);
		}
		public JsonValueBooleanContext jsonValueBoolean() {
			return GetRuleContext<JsonValueBooleanContext>(0);
		}
		public JsonValueStringContext jsonValueString() {
			return GetRuleContext<JsonValueStringContext>(0);
		}
		public JsonValueIntegerContext jsonValueInteger() {
			return GetRuleContext<JsonValueIntegerContext>(0);
		}
		public JsonValueNumberContext jsonValueNumber() {
			return GetRuleContext<JsonValueNumberContext>(0);
		}
		public JsonValueNullContext jsonValueNull() {
			return GetRuleContext<JsonValueNullContext>(0);
		}
		public JsltJsonpathContext jsltJsonpath() {
			return GetRuleContext<JsltJsonpathContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public JsonLtItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonLtItem; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonLtItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonLtItemContext jsonLtItem() {
		JsonLtItemContext _localctx = new JsonLtItemContext(Context, State);
		EnterRule(_localctx, 30, RULE_jsonLtItem);
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 182; jsonfunctionCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183; jsonValueBoolean();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 184; jsonValueString();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 185; jsonValueInteger();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 186; jsonValueNumber();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 187; jsonValueNull();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 188; jsltJsonpath();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 189; variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(JsltParser.EQ, 0); }
		public ITerminalNode GE() { return GetToken(JsltParser.GE, 0); }
		public ITerminalNode GT() { return GetToken(JsltParser.GT, 0); }
		public ITerminalNode LE() { return GetToken(JsltParser.LE, 0); }
		public ITerminalNode LT() { return GetToken(JsltParser.LT, 0); }
		public ITerminalNode NE() { return GetToken(JsltParser.NE, 0); }
		public ITerminalNode PLUS() { return GetToken(JsltParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(JsltParser.MINUS, 0); }
		public ITerminalNode DIVID() { return GetToken(JsltParser.DIVID, 0); }
		public ITerminalNode MODULO() { return GetToken(JsltParser.MODULO, 0); }
		public ITerminalNode WILDCARD_SUBSCRIPT() { return GetToken(JsltParser.WILDCARD_SUBSCRIPT, 0); }
		public ITerminalNode POWER() { return GetToken(JsltParser.POWER, 0); }
		public ITerminalNode CHAIN() { return GetToken(JsltParser.CHAIN, 0); }
		public ITerminalNode AND() { return GetToken(JsltParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(JsltParser.OR, 0); }
		public ITerminalNode AND_EXCLUSIVE() { return GetToken(JsltParser.AND_EXCLUSIVE, 0); }
		public ITerminalNode OR_EXCLUSIVE() { return GetToken(JsltParser.OR_EXCLUSIVE, 0); }
		public ITerminalNode COALESCE() { return GetToken(JsltParser.COALESCE, 0); }
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 32, RULE_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WILDCARD_SUBSCRIPT) | (1L << EQ) | (1L << NE) | (1L << GT) | (1L << LT) | (1L << LE) | (1L << GE) | (1L << PLUS) | (1L << MINUS) | (1L << DIVID) | (1L << MODULO) | (1L << POWER) | (1L << AND) | (1L << OR) | (1L << AND_EXCLUSIVE) | (1L << OR_EXCLUSIVE) | (1L << COALESCE) | (1L << CHAIN))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode VARIABLE_NAME() { return GetToken(JsltParser.VARIABLE_NAME, 0); }
		public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 34, RULE_variable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; Match(VARIABLE_NAME);
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << URI_TYPE) | (1L << TIME_TYPE) | (1L << DATETIME_TYPE) | (1L << STRING_TYPE) | (1L << BOOLEAN_TYPE) | (1L << GUID_TYPE) | (1L << INTEGER_TYPE) | (1L << DECIMAL_TYPE))) != 0)) {
				{
				State = 195; jsonType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonfunctionCallContext : ParserRuleContext {
		public JsonfunctionNameContext jsonfunctionName() {
			return GetRuleContext<JsonfunctionNameContext>(0);
		}
		public ITerminalNode PAREN_LEFT() { return GetToken(JsltParser.PAREN_LEFT, 0); }
		public ITerminalNode PAREN_RIGHT() { return GetToken(JsltParser.PAREN_RIGHT, 0); }
		public JsonValueListContext jsonValueList() {
			return GetRuleContext<JsonValueListContext>(0);
		}
		public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public JsonfunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonfunctionCall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonfunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonfunctionCallContext jsonfunctionCall() {
		JsonfunctionCallContext _localctx = new JsonfunctionCallContext(Context, State);
		EnterRule(_localctx, 36, RULE_jsonfunctionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; jsonfunctionName();
			State = 199; Match(PAREN_LEFT);
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << NT) | (1L << NULL) | (1L << BRACE_LEFT) | (1L << BRACKET_LEFT) | (1L << PAREN_LEFT) | (1L << DOLLAR) | (1L << STRING) | (1L << NUMBER) | (1L << SIGNED_NUMBER) | (1L << INT) | (1L << SIGNED_INT) | (1L << ID) | (1L << VARIABLE_NAME))) != 0)) {
				{
				State = 200; jsonValueList();
				}
			}

			State = 203; Match(PAREN_RIGHT);
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << URI_TYPE) | (1L << TIME_TYPE) | (1L << DATETIME_TYPE) | (1L << STRING_TYPE) | (1L << BOOLEAN_TYPE) | (1L << GUID_TYPE) | (1L << INTEGER_TYPE) | (1L << DECIMAL_TYPE))) != 0)) {
				{
				State = 204; jsonType();
				}
			}

			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BRACE_LEFT) {
				{
				State = 207; obj();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonfunctionNameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(JsltParser.ID, 0); }
		public JsonfunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonfunctionName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonfunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonfunctionNameContext jsonfunctionName() {
		JsonfunctionNameContext _localctx = new JsonfunctionNameContext(Context, State);
		EnterRule(_localctx, 38, RULE_jsonfunctionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueListContext : ParserRuleContext {
		public JsonValueContext[] jsonValue() {
			return GetRuleContexts<JsonValueContext>();
		}
		public JsonValueContext jsonValue(int i) {
			return GetRuleContext<JsonValueContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JsltParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsltParser.COMMA, i);
		}
		public JsonValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValueList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueListContext jsonValueList() {
		JsonValueListContext _localctx = new JsonValueListContext(Context, State);
		EnterRule(_localctx, 40, RULE_jsonValueList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; jsonValue();
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 213; Match(COMMA);
				State = 214; jsonValue();
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsltJsonpathContext : ParserRuleContext {
		public JsonpathContext jsonpath() {
			return GetRuleContext<JsonpathContext>(0);
		}
		public ITerminalNode VARIABLE_NAME() { return GetToken(JsltParser.VARIABLE_NAME, 0); }
		public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public JsltJsonpathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsltJsonpath; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsltJsonpath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsltJsonpathContext jsltJsonpath() {
		JsltJsonpathContext _localctx = new JsltJsonpathContext(Context, State);
		EnterRule(_localctx, 42, RULE_jsltJsonpath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARIABLE_NAME) {
				{
				State = 220; Match(VARIABLE_NAME);
				}
			}

			State = 223; jsonpath();
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << URI_TYPE) | (1L << TIME_TYPE) | (1L << DATETIME_TYPE) | (1L << STRING_TYPE) | (1L << BOOLEAN_TYPE) | (1L << GUID_TYPE) | (1L << INTEGER_TYPE) | (1L << DECIMAL_TYPE))) != 0)) {
				{
				State = 224; jsonType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonpathContext : ParserRuleContext {
		public ITerminalNode DOLLAR() { return GetToken(JsltParser.DOLLAR, 0); }
		public Jsonpath_subscriptContext jsonpath_subscript() {
			return GetRuleContext<Jsonpath_subscriptContext>(0);
		}
		public JsonpathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonpath; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonpath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonpathContext jsonpath() {
		JsonpathContext _localctx = new JsonpathContext(Context, State);
		EnterRule(_localctx, 44, RULE_jsonpath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227; Match(DOLLAR);
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SUBSCRIPT) | (1L << RECURSIVE_DESCENT) | (1L << BRACKET_LEFT))) != 0)) {
				{
				State = 228; jsonpath_subscript();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsonpath_Context : ParserRuleContext {
		public ITerminalNode DOLLAR() { return GetToken(JsltParser.DOLLAR, 0); }
		public ITerminalNode CURRENT_VALUE() { return GetToken(JsltParser.CURRENT_VALUE, 0); }
		public Jsonpath_subscriptContext jsonpath_subscript() {
			return GetRuleContext<Jsonpath_subscriptContext>(0);
		}
		public Jsonpath_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonpath_; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonpath_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jsonpath_Context jsonpath_() {
		Jsonpath_Context _localctx = new Jsonpath_Context(Context, State);
		EnterRule(_localctx, 46, RULE_jsonpath_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			_la = TokenStream.LA(1);
			if ( !(_la==CURRENT_VALUE || _la==DOLLAR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SUBSCRIPT) | (1L << RECURSIVE_DESCENT) | (1L << BRACKET_LEFT))) != 0)) {
				{
				State = 232; jsonpath_subscript();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsonpath__Context : ParserRuleContext {
		public Jsonpath_Context jsonpath_() {
			return GetRuleContext<Jsonpath_Context>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public Jsonpath__Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonpath__; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonpath__(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jsonpath__Context jsonpath__() {
		Jsonpath__Context _localctx = new Jsonpath__Context(Context, State);
		EnterRule(_localctx, 48, RULE_jsonpath__);
		try {
			State = 237;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_VALUE:
			case DOLLAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235; jsonpath_();
				}
				break;
			case TRUE:
			case FALSE:
			case NULL:
			case BRACE_LEFT:
			case BRACKET_LEFT:
			case STRING:
			case NUMBER:
			case SIGNED_NUMBER:
			case IDQUOTED:
			case VARIABLE_NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236; value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsonpath_subscriptContext : ParserRuleContext {
		public ITerminalNode RECURSIVE_DESCENT() { return GetToken(JsltParser.RECURSIVE_DESCENT, 0); }
		public SubscriptableBarewordContext subscriptableBareword() {
			return GetRuleContext<SubscriptableBarewordContext>(0);
		}
		public SubscriptablesContext subscriptables() {
			return GetRuleContext<SubscriptablesContext>(0);
		}
		public Jsonpath_subscriptContext jsonpath_subscript() {
			return GetRuleContext<Jsonpath_subscriptContext>(0);
		}
		public ITerminalNode SUBSCRIPT() { return GetToken(JsltParser.SUBSCRIPT, 0); }
		public Jsonpath_subscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonpath_subscript; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonpath_subscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jsonpath_subscriptContext jsonpath_subscript() {
		Jsonpath_subscriptContext _localctx = new Jsonpath_subscriptContext(Context, State);
		EnterRule(_localctx, 50, RULE_jsonpath_subscript);
		int _la;
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RECURSIVE_DESCENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 239; Match(RECURSIVE_DESCENT);
				State = 242;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case WILDCARD_SUBSCRIPT:
				case IN:
				case NIN:
				case SUBSETOF:
				case CONTAINS:
				case SIZE:
				case EMPTY:
				case TRUE:
				case FALSE:
				case ID:
					{
					State = 240; subscriptableBareword();
					}
					break;
				case BRACKET_LEFT:
					{
					State = 241; subscriptables();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SUBSCRIPT) | (1L << RECURSIVE_DESCENT) | (1L << BRACKET_LEFT))) != 0)) {
					{
					State = 244; jsonpath_subscript();
					}
				}

				}
				break;
			case SUBSCRIPT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247; Match(SUBSCRIPT);
				State = 248; subscriptableBareword();
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SUBSCRIPT) | (1L << RECURSIVE_DESCENT) | (1L << BRACKET_LEFT))) != 0)) {
					{
					State = 249; jsonpath_subscript();
					}
				}

				}
				break;
			case BRACKET_LEFT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 252; subscriptables();
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SUBSCRIPT) | (1L << RECURSIVE_DESCENT) | (1L << BRACKET_LEFT))) != 0)) {
					{
					State = 253; jsonpath_subscript();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptablesContext : ParserRuleContext {
		public ITerminalNode BRACKET_LEFT() { return GetToken(JsltParser.BRACKET_LEFT, 0); }
		public SubscriptableContext subscriptable() {
			return GetRuleContext<SubscriptableContext>(0);
		}
		public ITerminalNode BRACKET_RIGHT() { return GetToken(JsltParser.BRACKET_RIGHT, 0); }
		public SubscriptablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptables; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptablesContext subscriptables() {
		SubscriptablesContext _localctx = new SubscriptablesContext(Context, State);
		EnterRule(_localctx, 52, RULE_subscriptables);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258; Match(BRACKET_LEFT);
			State = 259; subscriptable();
			State = 260; Match(BRACKET_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptableArgumentsContext : ParserRuleContext {
		public ITerminalNode PAREN_LEFT() { return GetToken(JsltParser.PAREN_LEFT, 0); }
		public ITerminalNode PAREN_RIGHT() { return GetToken(JsltParser.PAREN_RIGHT, 0); }
		public Jsonpath__Context[] jsonpath__() {
			return GetRuleContexts<Jsonpath__Context>();
		}
		public Jsonpath__Context jsonpath__(int i) {
			return GetRuleContext<Jsonpath__Context>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JsltParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsltParser.COMMA, i);
		}
		public SubscriptableArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptableArguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptableArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptableArgumentsContext subscriptableArguments() {
		SubscriptableArgumentsContext _localctx = new SubscriptableArgumentsContext(Context, State);
		EnterRule(_localctx, 54, RULE_subscriptableArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; Match(PAREN_LEFT);
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CURRENT_VALUE) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << BRACE_LEFT) | (1L << BRACKET_LEFT) | (1L << DOLLAR) | (1L << STRING) | (1L << NUMBER) | (1L << SIGNED_NUMBER) | (1L << IDQUOTED) | (1L << VARIABLE_NAME))) != 0)) {
				{
				State = 263; jsonpath__();
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 264; Match(COMMA);
					State = 265; jsonpath__();
					}
					}
					State = 270;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 273; Match(PAREN_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptableBarewordContext : ParserRuleContext {
		public JsonPath_identifierContext jsonPath_identifier() {
			return GetRuleContext<JsonPath_identifierContext>(0);
		}
		public SubscriptableArgumentsContext subscriptableArguments() {
			return GetRuleContext<SubscriptableArgumentsContext>(0);
		}
		public ITerminalNode WILDCARD_SUBSCRIPT() { return GetToken(JsltParser.WILDCARD_SUBSCRIPT, 0); }
		public SubscriptableBarewordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptableBareword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptableBareword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptableBarewordContext subscriptableBareword() {
		SubscriptableBarewordContext _localctx = new SubscriptableBarewordContext(Context, State);
		EnterRule(_localctx, 56, RULE_subscriptableBareword);
		int _la;
		try {
			State = 280;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN:
			case NIN:
			case SUBSETOF:
			case CONTAINS:
			case SIZE:
			case EMPTY:
			case TRUE:
			case FALSE:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 275; jsonPath_identifier();
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PAREN_LEFT) {
					{
					State = 276; subscriptableArguments();
					}
				}

				}
				break;
			case WILDCARD_SUBSCRIPT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 279; Match(WILDCARD_SUBSCRIPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonPath_identifierContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(JsltParser.ID, 0); }
		public ITerminalNode IN() { return GetToken(JsltParser.IN, 0); }
		public ITerminalNode NIN() { return GetToken(JsltParser.NIN, 0); }
		public ITerminalNode SUBSETOF() { return GetToken(JsltParser.SUBSETOF, 0); }
		public ITerminalNode CONTAINS() { return GetToken(JsltParser.CONTAINS, 0); }
		public ITerminalNode SIZE() { return GetToken(JsltParser.SIZE, 0); }
		public ITerminalNode EMPTY() { return GetToken(JsltParser.EMPTY, 0); }
		public ITerminalNode TRUE() { return GetToken(JsltParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(JsltParser.FALSE, 0); }
		public JsonPath_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonPath_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonPath_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonPath_identifierContext jsonPath_identifier() {
		JsonPath_identifierContext _localctx = new JsonPath_identifierContext(Context, State);
		EnterRule(_localctx, 58, RULE_jsonPath_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IN) | (1L << NIN) | (1L << SUBSETOF) | (1L << CONTAINS) | (1L << SIZE) | (1L << EMPTY) | (1L << TRUE) | (1L << FALSE) | (1L << ID))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptableContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsltParser.STRING, 0); }
		public SliceableContext sliceable() {
			return GetRuleContext<SliceableContext>(0);
		}
		public ITerminalNode WILDCARD_SUBSCRIPT() { return GetToken(JsltParser.WILDCARD_SUBSCRIPT, 0); }
		public ITerminalNode QUESTION() { return GetToken(JsltParser.QUESTION, 0); }
		public ITerminalNode PAREN_LEFT() { return GetToken(JsltParser.PAREN_LEFT, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ITerminalNode PAREN_RIGHT() { return GetToken(JsltParser.PAREN_RIGHT, 0); }
		public Jsonpath_Context jsonpath_() {
			return GetRuleContext<Jsonpath_Context>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(JsltParser.NUMBER, 0); }
		public ITerminalNode PLUS() { return GetToken(JsltParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(JsltParser.MINUS, 0); }
		public ITerminalNode IDQUOTED() { return GetToken(JsltParser.IDQUOTED, 0); }
		public SubscriptableArgumentsContext subscriptableArguments() {
			return GetRuleContext<SubscriptableArgumentsContext>(0);
		}
		public SubscriptableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptableContext subscriptable() {
		SubscriptableContext _localctx = new SubscriptableContext(Context, State);
		EnterRule(_localctx, 60, RULE_subscriptable);
		int _la;
		try {
			State = 303;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 284; Match(STRING);
				}
				break;
			case COLON:
			case NUMBER:
			case SIGNED_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 285; sliceable();
				}
				break;
			case WILDCARD_SUBSCRIPT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 286; Match(WILDCARD_SUBSCRIPT);
				}
				break;
			case QUESTION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 287; Match(QUESTION);
				State = 288; Match(PAREN_LEFT);
				State = 289; expressions();
				State = 290; Match(PAREN_RIGHT);
				}
				break;
			case CURRENT_VALUE:
			case DOLLAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 292; jsonpath_();
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << NUMBER))) != 0)) {
					{
					State = 294;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==PLUS || _la==MINUS) {
						{
						State = 293;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 296; Match(NUMBER);
					}
				}

				}
				break;
			case IDQUOTED:
				EnterOuterAlt(_localctx, 6);
				{
				State = 299; Match(IDQUOTED);
				State = 301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PAREN_LEFT) {
					{
					State = 300; subscriptableArguments();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceableContext : ParserRuleContext {
		public SignedNumberContext signedNumber() {
			return GetRuleContext<SignedNumberContext>(0);
		}
		public SliceableLeftContext sliceableLeft() {
			return GetRuleContext<SliceableLeftContext>(0);
		}
		public SliceableRightContext sliceableRight() {
			return GetRuleContext<SliceableRightContext>(0);
		}
		public SliceableBinaryContext sliceableBinary() {
			return GetRuleContext<SliceableBinaryContext>(0);
		}
		public SliceableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceableContext sliceable() {
		SliceableContext _localctx = new SliceableContext(Context, State);
		EnterRule(_localctx, 62, RULE_sliceable);
		try {
			State = 309;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305; signedNumber();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 306; sliceableLeft();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 307; sliceableRight();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 308; sliceableBinary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedNumberContext : ParserRuleContext {
		public ITerminalNode SIGNED_NUMBER() { return GetToken(JsltParser.SIGNED_NUMBER, 0); }
		public ITerminalNode NUMBER() { return GetToken(JsltParser.NUMBER, 0); }
		public SignedNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedNumber; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedNumberContext signedNumber() {
		SignedNumberContext _localctx = new SignedNumberContext(Context, State);
		EnterRule(_localctx, 64, RULE_signedNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER || _la==SIGNED_NUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedIntContext : ParserRuleContext {
		public ITerminalNode SIGNED_INT() { return GetToken(JsltParser.SIGNED_INT, 0); }
		public ITerminalNode INT() { return GetToken(JsltParser.INT, 0); }
		public SignedIntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedInt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedIntContext signedInt() {
		SignedIntContext _localctx = new SignedIntContext(Context, State);
		EnterRule(_localctx, 66, RULE_signedInt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			_la = TokenStream.LA(1);
			if ( !(_la==INT || _la==SIGNED_INT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceableLeftContext : ParserRuleContext {
		public SignedNumberContext signedNumber() {
			return GetRuleContext<SignedNumberContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(JsltParser.COLON, 0); }
		public SliceableLeftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceableLeft; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceableLeft(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceableLeftContext sliceableLeft() {
		SliceableLeftContext _localctx = new SliceableLeftContext(Context, State);
		EnterRule(_localctx, 68, RULE_sliceableLeft);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315; signedNumber();
			State = 316; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceableRightContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(JsltParser.COLON, 0); }
		public SignedNumberContext signedNumber() {
			return GetRuleContext<SignedNumberContext>(0);
		}
		public SliceableRightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceableRight; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceableRight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceableRightContext sliceableRight() {
		SliceableRightContext _localctx = new SliceableRightContext(Context, State);
		EnterRule(_localctx, 70, RULE_sliceableRight);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; Match(COLON);
			State = 319; signedNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceableBinaryContext : ParserRuleContext {
		public SignedNumberContext[] signedNumber() {
			return GetRuleContexts<SignedNumberContext>();
		}
		public SignedNumberContext signedNumber(int i) {
			return GetRuleContext<SignedNumberContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(JsltParser.COLON, 0); }
		public SliceableBinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceableBinary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceableBinary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceableBinaryContext sliceableBinary() {
		SliceableBinaryContext _localctx = new SliceableBinaryContext(Context, State);
		EnterRule(_localctx, 72, RULE_sliceableBinary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; signedNumber();
			State = 322; Match(COLON);
			State = 323; signedNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode NT() { return GetToken(JsltParser.NT, 0); }
		public BinaryOperatorContext[] binaryOperator() {
			return GetRuleContexts<BinaryOperatorContext>();
		}
		public BinaryOperatorContext binaryOperator(int i) {
			return GetRuleContext<BinaryOperatorContext>(i);
		}
		public ITerminalNode PAREN_LEFT() { return GetToken(JsltParser.PAREN_LEFT, 0); }
		public ITerminalNode PAREN_RIGHT() { return GetToken(JsltParser.PAREN_RIGHT, 0); }
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 74, RULE_expressions);
		int _la;
		try {
			State = 340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 326;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 325; Match(NT);
					}
					break;
				}
				State = 328; expression();
				State = 332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 329; binaryOperator();
					State = 330; expression();
					}
					}
					State = 334;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IN) | (1L << NIN) | (1L << SUBSETOF) | (1L << CONTAINS) | (1L << SIZE) | (1L << EMPTY) | (1L << EQ) | (1L << NE) | (1L << GT) | (1L << LT) | (1L << LE) | (1L << GE) | (1L << AND) | (1L << OR))) != 0) );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 336; Match(PAREN_LEFT);
				State = 337; expression();
				State = 338; Match(PAREN_RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Jsonpath__Context jsonpath__() {
			return GetRuleContext<Jsonpath__Context>(0);
		}
		public ITerminalNode NT() { return GetToken(JsltParser.NT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PAREN_LEFT() { return GetToken(JsltParser.PAREN_LEFT, 0); }
		public ITerminalNode PAREN_RIGHT() { return GetToken(JsltParser.PAREN_RIGHT, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_expression);
		try {
			State = 349;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_VALUE:
			case TRUE:
			case FALSE:
			case NULL:
			case BRACE_LEFT:
			case BRACKET_LEFT:
			case DOLLAR:
			case STRING:
			case NUMBER:
			case SIGNED_NUMBER:
			case IDQUOTED:
			case VARIABLE_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 342; jsonpath__();
				}
				break;
			case NT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343; Match(NT);
				State = 344; expression();
				}
				break;
			case PAREN_LEFT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 345; Match(PAREN_LEFT);
				State = 346; expression();
				State = 347; Match(PAREN_RIGHT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOperatorContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(JsltParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(JsltParser.OR, 0); }
		public ITerminalNode EQ() { return GetToken(JsltParser.EQ, 0); }
		public ITerminalNode NE() { return GetToken(JsltParser.NE, 0); }
		public ITerminalNode LT() { return GetToken(JsltParser.LT, 0); }
		public ITerminalNode LE() { return GetToken(JsltParser.LE, 0); }
		public ITerminalNode GT() { return GetToken(JsltParser.GT, 0); }
		public ITerminalNode GE() { return GetToken(JsltParser.GE, 0); }
		public ITerminalNode IN() { return GetToken(JsltParser.IN, 0); }
		public ITerminalNode NIN() { return GetToken(JsltParser.NIN, 0); }
		public ITerminalNode SUBSETOF() { return GetToken(JsltParser.SUBSETOF, 0); }
		public ITerminalNode CONTAINS() { return GetToken(JsltParser.CONTAINS, 0); }
		public ITerminalNode SIZE() { return GetToken(JsltParser.SIZE, 0); }
		public ITerminalNode EMPTY() { return GetToken(JsltParser.EMPTY, 0); }
		public BinaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOperatorContext binaryOperator() {
		BinaryOperatorContext _localctx = new BinaryOperatorContext(Context, State);
		EnterRule(_localctx, 78, RULE_binaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IN) | (1L << NIN) | (1L << SUBSETOF) | (1L << CONTAINS) | (1L << SIZE) | (1L << EMPTY) | (1L << EQ) | (1L << NE) | (1L << GT) | (1L << LT) | (1L << LE) | (1L << GE) | (1L << AND) | (1L << OR))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsltParser.STRING, 0); }
		public ITerminalNode IDQUOTED() { return GetToken(JsltParser.IDQUOTED, 0); }
		public SignedNumberContext signedNumber() {
			return GetRuleContext<SignedNumberContext>(0);
		}
		public ITerminalNode TRUE() { return GetToken(JsltParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(JsltParser.FALSE, 0); }
		public ITerminalNode NULL() { return GetToken(JsltParser.NULL, 0); }
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsltParserVisitor<TResult> typedVisitor = visitor as IJsltParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 80, RULE_value);
		try {
			State = 362;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 353; Match(STRING);
				}
				break;
			case IDQUOTED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 354; Match(IDQUOTED);
				}
				break;
			case NUMBER:
			case SIGNED_NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 355; signedNumber();
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 356; Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 357; Match(FALSE);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 358; Match(NULL);
				}
				break;
			case BRACE_LEFT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 359; obj();
				}
				break;
			case BRACKET_LEFT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 360; array();
				}
				break;
			case VARIABLE_NAME:
				EnterOuterAlt(_localctx, 9);
				{
				State = 361; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '@', '\x16F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', '^', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'\x61', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', 'g', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\a', '\a', 's', '\n', '\a', '\f', '\a', '\xE', 
		'\a', 'v', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '|', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\x81', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x85', 
		'\n', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x89', '\n', '\n', 
		'\x3', '\n', '\x5', '\n', '\x8C', '\n', '\n', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', '\x90', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\x94', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x5', '\xF', '\x9B', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xA1', '\n', '\xF', '\f', 
		'\xF', '\xE', '\xF', '\xA4', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xAA', '\n', '\xF', '\x5', 
		'\xF', '\xAC', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xB5', '\n', '\x10', '\x5', '\x10', '\xB7', '\n', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xC1', '\n', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xC7', 
		'\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\xCC', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xD0', 
		'\n', '\x14', '\x3', '\x14', '\x5', '\x14', '\xD3', '\n', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', 
		'\x16', '\xDA', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\xDD', '\v', 
		'\x16', '\x3', '\x17', '\x5', '\x17', '\xE0', '\n', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x5', '\x17', '\xE4', '\n', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\xE8', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x5', '\x19', '\xEC', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x5', 
		'\x1A', '\xF0', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x5', '\x1B', '\xF5', '\n', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\xF8', 
		'\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', 
		'\xFD', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x101', 
		'\n', '\x1B', '\x5', '\x1B', '\x103', '\n', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\a', '\x1D', '\x10D', '\n', '\x1D', '\f', '\x1D', 
		'\xE', '\x1D', '\x110', '\v', '\x1D', '\x5', '\x1D', '\x112', '\n', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', 
		'\x118', '\n', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x11B', '\n', '\x1E', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x5', ' ', '\x129', '\n', ' ', '\x3', ' ', '\x5', ' ', '\x12C', 
		'\n', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x130', '\n', ' ', '\x5', 
		' ', '\x132', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x5', '!', '\x138', '\n', '!', '\x3', '\"', '\x3', '\"', '\x3', '#', 
		'\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '\'', 
		'\x5', '\'', '\x149', '\n', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x6', '\'', '\x14F', '\n', '\'', '\r', '\'', '\xE', '\'', 
		'\x150', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x5', '\'', 
		'\x157', '\n', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x5', '(', '\x160', '\n', '(', '\x3', ')', 
		'\x3', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x16D', '\n', 
		'*', '\x3', '*', '\x2', '\x2', '+', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', '\x2', '\v', '\x3', '\x2', '\x17', '\x18', '\x3', '\x2', '\t', 
		'\x10', '\x5', '\x2', '\x4', '\x4', '\x1A', '\x1F', '!', '+', '\x4', '\x2', 
		'\x5', '\x5', '\x34', '\x34', '\x4', '\x2', '\x11', '\x18', '=', '=', 
		'\x3', '\x2', '!', '\"', '\x3', '\x2', '\x39', ':', '\x3', '\x2', ';', 
		'<', '\x5', '\x2', '\x11', '\x16', '\x1A', '\x1F', '&', '\'', '\x2', '\x18A', 
		'\x2', 'T', '\x3', '\x2', '\x2', '\x2', '\x4', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x66', '\x3', '\x2', '\x2', '\x2', '\b', 'h', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'l', '\x3', '\x2', '\x2', '\x2', '\f', '{', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x80', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x12', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x16', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x95', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\xB6', '\x3', '\x2', '\x2', '\x2', ' ', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\xC2', '\x3', '\x2', '\x2', '\x2', '$', '\xC4', 
		'\x3', '\x2', '\x2', '\x2', '&', '\xC8', '\x3', '\x2', '\x2', '\x2', '(', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '*', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', ',', '\xDF', '\x3', '\x2', '\x2', '\x2', '.', '\xE5', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\xE9', '\x3', '\x2', '\x2', '\x2', '\x32', '\xEF', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x104', '\x3', '\x2', '\x2', '\x2', '\x38', '\x108', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x11A', '\x3', '\x2', '\x2', '\x2', '<', '\x11C', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x137', '\x3', '\x2', '\x2', '\x2', '\x42', '\x139', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x46', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x140', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x143', '\x3', '\x2', '\x2', '\x2', 'L', '\x156', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x15F', '\x3', '\x2', '\x2', '\x2', 'P', '\x161', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x16C', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\x5', '\x4', '\x3', '\x2', 'U', 'V', '\a', '\x2', '\x2', '\x3', 
		'V', '\x3', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x5', '\xE', '\b', 
		'\x2', 'X', '\x5', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '-', '\x2', 
		'\x2', 'Z', '_', '\x5', '\b', '\x5', '\x2', '[', '\\', '\a', '\x31', '\x2', 
		'\x2', '\\', '^', '\x5', '\b', '\x5', '\x2', ']', '[', '\x3', '\x2', '\x2', 
		'\x2', '^', '\x61', '\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', 
		'\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x63', '\a', '.', '\x2', '\x2', '\x63', 'g', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x65', '\a', '-', '\x2', '\x2', '\x65', 'g', '\a', '.', '\x2', 
		'\x2', '\x66', 'Y', '\x3', '\x2', '\x2', '\x2', '\x66', '\x64', '\x3', 
		'\x2', '\x2', '\x2', 'g', '\a', '\x3', '\x2', '\x2', '\x2', 'h', 'i', 
		'\x5', '\n', '\x6', '\x2', 'i', 'j', '\a', '\x6', '\x2', '\x2', 'j', 'k', 
		'\x5', '\xE', '\b', '\x2', 'k', '\t', '\x3', '\x2', '\x2', '\x2', 'l', 
		'm', '\a', '\x36', '\x2', '\x2', 'm', '\v', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\a', '/', '\x2', '\x2', 'o', 't', '\x5', '\xE', '\b', '\x2', 
		'p', 'q', '\a', '\x31', '\x2', '\x2', 'q', 's', '\x5', '\xE', '\b', '\x2', 
		'r', 'p', '\x3', '\x2', '\x2', '\x2', 's', 'v', '\x3', '\x2', '\x2', '\x2', 
		't', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 
		'u', 'w', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 
		'w', 'x', '\a', '\x30', '\x2', '\x2', 'x', '|', '\x3', '\x2', '\x2', '\x2', 
		'y', 'z', '\a', '/', '\x2', '\x2', 'z', '|', '\a', '\x30', '\x2', '\x2', 
		'{', 'n', '\x3', '\x2', '\x2', '\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', 
		'|', '\r', '\x3', '\x2', '\x2', '\x2', '}', '\x81', '\x5', '\x6', '\x4', 
		'\x2', '~', '\x81', '\x5', '\f', '\a', '\x2', '\x7F', '\x81', '\x5', '\x1C', 
		'\xF', '\x2', '\x80', '}', '\x3', '\x2', '\x2', '\x2', '\x80', '~', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x82', '\x84', '\x5', '\n', '\x6', 
		'\x2', '\x83', '\x85', '\x5', '\x1A', '\xE', '\x2', '\x84', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x86', '\x89', '\x5', '\x42', '\"', 
		'\x2', '\x87', '\x89', '\x5', '\x44', '#', '\x2', '\x88', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x87', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8C', '\x5', '\x1A', '\xE', 
		'\x2', '\x8B', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x13', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8F', '\a', ';', '\x2', '\x2', '\x8E', '\x90', '\x5', '\x1A', '\xE', 
		'\x2', '\x8F', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x15', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x93', '\t', '\x2', '\x2', '\x2', '\x92', '\x94', '\x5', '\x1A', '\xE', 
		'\x2', '\x93', '\x92', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x17', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x96', '\a', ',', '\x2', '\x2', '\x96', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x98', '\t', '\x3', '\x2', '\x2', '\x98', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x9B', '\a', ' ', '\x2', '\x2', '\x9A', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', '\xA2', '\x5', 
		'\x1E', '\x10', '\x2', '\x9D', '\x9E', '\x5', '\"', '\x12', '\x2', '\x9E', 
		'\x9F', '\x5', '\x1E', '\x10', '\x2', '\x9F', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\a', 
		'\x32', '\x2', '\x2', '\xA6', '\xA7', '\x5', '\x1E', '\x10', '\x2', '\xA7', 
		'\xA9', '\a', '\x33', '\x2', '\x2', '\xA8', '\xAA', '\x5', '\x1A', '\xE', 
		'\x2', '\xA9', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xB7', '\x5', 
		' ', '\x11', '\x2', '\xAE', '\xAF', '\a', ' ', '\x2', '\x2', '\xAF', '\xB7', 
		'\x5', '\x1E', '\x10', '\x2', '\xB0', '\xB1', '\a', '\x32', '\x2', '\x2', 
		'\xB1', '\xB2', '\x5', '\x1E', '\x10', '\x2', '\xB2', '\xB4', '\a', '\x33', 
		'\x2', '\x2', '\xB3', '\xB5', '\x5', '\x1A', '\xE', '\x2', '\xB4', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\xB5', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xAD', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xB7', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\xC1', '\x5', '&', '\x14', '\x2', '\xB9', '\xC1', '\x5', '\x16', 
		'\f', '\x2', '\xBA', '\xC1', '\x5', '\x10', '\t', '\x2', '\xBB', '\xC1', 
		'\x5', '\x14', '\v', '\x2', '\xBC', '\xC1', '\x5', '\x12', '\n', '\x2', 
		'\xBD', '\xC1', '\x5', '\x18', '\r', '\x2', '\xBE', '\xC1', '\x5', ',', 
		'\x17', '\x2', '\xBF', '\xC1', '\x5', '$', '\x13', '\x2', '\xC0', '\xB8', 
		'\x3', '\x2', '\x2', '\x2', '\xC0', '\xB9', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xBB', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\xC0', '\xBE', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '!', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\xC3', '\t', '\x4', '\x2', '\x2', '\xC3', '#', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\xC6', '\a', '?', '\x2', '\x2', '\xC5', 
		'\xC7', '\x5', '\x1A', '\xE', '\x2', '\xC6', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC7', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xC9', '\x5', '(', '\x15', '\x2', '\xC9', 
		'\xCB', '\a', '\x32', '\x2', '\x2', '\xCA', '\xCC', '\x5', '*', '\x16', 
		'\x2', '\xCB', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xCF', '\a', '\x33', '\x2', '\x2', '\xCE', '\xD0', '\x5', '\x1A', '\xE', 
		'\x2', '\xCF', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD3', '\x5', '\x6', '\x4', '\x2', '\xD2', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD3', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\xD5', '\a', '=', '\x2', '\x2', '\xD5', 
		')', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xDB', '\x5', '\xE', '\b', '\x2', 
		'\xD7', '\xD8', '\a', '\x31', '\x2', '\x2', '\xD8', '\xDA', '\x5', '\xE', 
		'\b', '\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', 
		'\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '+', '\x3', '\x2', 
		'\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE0', 
		'\a', '?', '\x2', '\x2', '\xDF', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xE3', '\x5', '.', '\x18', '\x2', '\xE2', '\xE4', '\x5', 
		'\x1A', '\xE', '\x2', '\xE3', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '-', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE7', '\a', '\x34', '\x2', '\x2', '\xE6', '\xE8', '\x5', 
		'\x34', '\x1B', '\x2', '\xE7', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', '/', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xEB', '\t', '\x5', '\x2', '\x2', '\xEA', '\xEC', '\x5', 
		'\x34', '\x1B', '\x2', '\xEB', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\xEC', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xF0', '\x5', '\x30', '\x19', '\x2', '\xEE', '\xF0', '\x5', 
		'R', '*', '\x2', '\xEF', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xEE', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\xF1', '\xF4', '\a', '\b', '\x2', '\x2', '\xF2', '\xF5', '\x5', ':', 
		'\x1E', '\x2', '\xF3', '\xF5', '\x5', '\x36', '\x1C', '\x2', '\xF4', '\xF2', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\xF3', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF8', '\x5', '\x34', 
		'\x1B', '\x2', '\xF7', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\xF9', '\xFA', '\a', '\x3', '\x2', '\x2', '\xFA', '\xFC', '\x5', ':', 
		'\x1E', '\x2', '\xFB', '\xFD', '\x5', '\x34', '\x1B', '\x2', '\xFC', '\xFB', 
		'\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\x3', '\x2', '\x2', '\x2', 
		'\xFD', '\x103', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x100', '\x5', '\x36', 
		'\x1C', '\x2', '\xFF', '\x101', '\x5', '\x34', '\x1B', '\x2', '\x100', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '\x103', '\x3', '\x2', '\x2', '\x2', '\x102', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x103', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x104', '\x105', '\a', '/', '\x2', '\x2', '\x105', '\x106', 
		'\x5', '>', ' ', '\x2', '\x106', '\x107', '\a', '\x30', '\x2', '\x2', 
		'\x107', '\x37', '\x3', '\x2', '\x2', '\x2', '\x108', '\x111', '\a', '\x32', 
		'\x2', '\x2', '\x109', '\x10E', '\x5', '\x32', '\x1A', '\x2', '\x10A', 
		'\x10B', '\a', '\x31', '\x2', '\x2', '\x10B', '\x10D', '\x5', '\x32', 
		'\x1A', '\x2', '\x10C', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10D', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10C', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x111', '\x109', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', 
		'\x2', '\x2', '\x2', '\x112', '\x113', '\x3', '\x2', '\x2', '\x2', '\x113', 
		'\x114', '\a', '\x33', '\x2', '\x2', '\x114', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x115', '\x117', '\x5', '<', '\x1F', '\x2', '\x116', '\x118', 
		'\x5', '\x38', '\x1D', '\x2', '\x117', '\x116', '\x3', '\x2', '\x2', '\x2', 
		'\x117', '\x118', '\x3', '\x2', '\x2', '\x2', '\x118', '\x11B', '\x3', 
		'\x2', '\x2', '\x2', '\x119', '\x11B', '\a', '\x4', '\x2', '\x2', '\x11A', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x119', '\x3', '\x2', '\x2', 
		'\x2', '\x11B', ';', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\t', 
		'\x6', '\x2', '\x2', '\x11D', '=', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		'\x132', '\a', '\x36', '\x2', '\x2', '\x11F', '\x132', '\x5', '@', '!', 
		'\x2', '\x120', '\x132', '\a', '\x4', '\x2', '\x2', '\x121', '\x122', 
		'\a', '\x35', '\x2', '\x2', '\x122', '\x123', '\a', '\x32', '\x2', '\x2', 
		'\x123', '\x124', '\x5', 'L', '\'', '\x2', '\x124', '\x125', '\a', '\x33', 
		'\x2', '\x2', '\x125', '\x132', '\x3', '\x2', '\x2', '\x2', '\x126', '\x12B', 
		'\x5', '\x30', '\x19', '\x2', '\x127', '\x129', '\t', '\a', '\x2', '\x2', 
		'\x128', '\x127', '\x3', '\x2', '\x2', '\x2', '\x128', '\x129', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x12C', '\a', '\x39', '\x2', '\x2', '\x12B', '\x128', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x132', 
		'\x3', '\x2', '\x2', '\x2', '\x12D', '\x12F', '\a', '>', '\x2', '\x2', 
		'\x12E', '\x130', '\x5', '\x38', '\x1D', '\x2', '\x12F', '\x12E', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x130', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x132', '\x3', '\x2', '\x2', '\x2', '\x131', '\x11E', '\x3', '\x2', '\x2', 
		'\x2', '\x131', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x131', '\x120', 
		'\x3', '\x2', '\x2', '\x2', '\x131', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x126', '\x3', '\x2', '\x2', '\x2', '\x131', '\x12D', '\x3', 
		'\x2', '\x2', '\x2', '\x132', '?', '\x3', '\x2', '\x2', '\x2', '\x133', 
		'\x138', '\x5', '\x42', '\"', '\x2', '\x134', '\x138', '\x5', '\x46', 
		'$', '\x2', '\x135', '\x138', '\x5', 'H', '%', '\x2', '\x136', '\x138', 
		'\x5', 'J', '&', '\x2', '\x137', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'\x137', '\x134', '\x3', '\x2', '\x2', '\x2', '\x137', '\x135', '\x3', 
		'\x2', '\x2', '\x2', '\x137', '\x136', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\t', '\b', '\x2', 
		'\x2', '\x13A', '\x43', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', 
		'\t', '\t', '\x2', '\x2', '\x13C', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x13D', '\x13E', '\x5', '\x42', '\"', '\x2', '\x13E', '\x13F', '\a', 
		'\x6', '\x2', '\x2', '\x13F', 'G', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'\x141', '\a', '\x6', '\x2', '\x2', '\x141', '\x142', '\x5', '\x42', '\"', 
		'\x2', '\x142', 'I', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\x5', 
		'\x42', '\"', '\x2', '\x144', '\x145', '\a', '\x6', '\x2', '\x2', '\x145', 
		'\x146', '\x5', '\x42', '\"', '\x2', '\x146', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '\x149', '\a', ' ', '\x2', '\x2', '\x148', '\x147', '\x3', 
		'\x2', '\x2', '\x2', '\x148', '\x149', '\x3', '\x2', '\x2', '\x2', '\x149', 
		'\x14A', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14E', '\x5', 'N', '(', 
		'\x2', '\x14B', '\x14C', '\x5', 'P', ')', '\x2', '\x14C', '\x14D', '\x5', 
		'N', '(', '\x2', '\x14D', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x14E', 
		'\x14B', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', '\x3', '\x2', '\x2', 
		'\x2', '\x150', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x150', '\x151', 
		'\x3', '\x2', '\x2', '\x2', '\x151', '\x157', '\x3', '\x2', '\x2', '\x2', 
		'\x152', '\x153', '\a', '\x32', '\x2', '\x2', '\x153', '\x154', '\x5', 
		'N', '(', '\x2', '\x154', '\x155', '\a', '\x33', '\x2', '\x2', '\x155', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x156', '\x148', '\x3', '\x2', '\x2', 
		'\x2', '\x156', '\x152', '\x3', '\x2', '\x2', '\x2', '\x157', 'M', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x160', '\x5', '\x32', '\x1A', '\x2', '\x159', 
		'\x15A', '\a', ' ', '\x2', '\x2', '\x15A', '\x160', '\x5', 'N', '(', '\x2', 
		'\x15B', '\x15C', '\a', '\x32', '\x2', '\x2', '\x15C', '\x15D', '\x5', 
		'N', '(', '\x2', '\x15D', '\x15E', '\a', '\x33', '\x2', '\x2', '\x15E', 
		'\x160', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x158', '\x3', '\x2', '\x2', 
		'\x2', '\x15F', '\x159', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x15B', 
		'\x3', '\x2', '\x2', '\x2', '\x160', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\x161', '\x162', '\t', '\n', '\x2', '\x2', '\x162', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x163', '\x16D', '\a', '\x36', '\x2', '\x2', '\x164', '\x16D', 
		'\a', '>', '\x2', '\x2', '\x165', '\x16D', '\x5', '\x42', '\"', '\x2', 
		'\x166', '\x16D', '\a', '\x17', '\x2', '\x2', '\x167', '\x16D', '\a', 
		'\x18', '\x2', '\x2', '\x168', '\x16D', '\a', ',', '\x2', '\x2', '\x169', 
		'\x16D', '\x5', '\x6', '\x4', '\x2', '\x16A', '\x16D', '\x5', '\f', '\a', 
		'\x2', '\x16B', '\x16D', '\x5', '$', '\x13', '\x2', '\x16C', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '\x164', '\x3', '\x2', '\x2', '\x2', 
		'\x16C', '\x165', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x166', '\x3', 
		'\x2', '\x2', '\x2', '\x16C', '\x167', '\x3', '\x2', '\x2', '\x2', '\x16C', 
		'\x168', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x169', '\x3', '\x2', '\x2', 
		'\x2', '\x16C', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16B', 
		'\x3', '\x2', '\x2', '\x2', '\x16D', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '_', '\x66', 't', '{', '\x80', '\x84', '\x88', '\x8B', '\x8F', 
		'\x93', '\x9A', '\xA2', '\xA9', '\xAB', '\xB4', '\xB6', '\xC0', '\xC6', 
		'\xCB', '\xCF', '\xD2', '\xDB', '\xDF', '\xE3', '\xE7', '\xEB', '\xEF', 
		'\xF4', '\xF7', '\xFC', '\x100', '\x102', '\x10E', '\x111', '\x117', '\x11A', 
		'\x128', '\x12B', '\x12F', '\x131', '\x137', '\x148', '\x150', '\x156', 
		'\x15F', '\x16C',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.Jslt.Parser
